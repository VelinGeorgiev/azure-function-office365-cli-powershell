#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const updateNotifier = require("update-notifier");
const config_1 = require("./config");
const Command_1 = require("./Command");
const appInsights_1 = require("./appInsights");
const Utils_1 = require("./Utils");
const autocomplete_1 = require("./autocomplete");
const packageJSON = require('../package.json');
const vorpal = require('./vorpal-init'), chalk = vorpal.chalk;
const readdirR = (dir) => {
    return fs.statSync(dir).isDirectory()
        ? Array.prototype.concat(...fs.readdirSync(dir).map(f => readdirR(path.join(dir, f))))
        : dir;
};
const loadAllCommands = (rootFolder) => {
    const commandsDir = path.join(rootFolder, './o365');
    const files = readdirR(commandsDir);
    files.forEach(file => {
        if (file.indexOf(`${path.sep}commands${path.sep}`) > -1 &&
            file.endsWith('.js') &&
            !file.endsWith('.spec.js')) {
            try {
                const cmd = require(file);
                if (cmd instanceof Command_1.default) {
                    cmd.init(vorpal);
                }
            }
            catch (e) {
                console.log(e);
            }
        }
    });
};
const loadCommandFromArgs = (args, rootFolder) => {
    if (args.length <= 3) {
        loadAllCommands(rootFolder);
        return;
    }
    const isCompletionCommand = args.indexOf('completion') > -1;
    if (isCompletionCommand) {
        loadAllCommands(rootFolder);
        return;
    }
    // get the name of the command to be executed from args
    // first two arguments are node and the name of the script
    let cliArgs = args.slice(2);
    // find the first command argument if any
    // arguments start typically with - or -- but for the 'spo login' command
    // it's the URL of the site to connect to
    const pos = cliArgs.findIndex(p => p.startsWith('-') || p.startsWith('https://'));
    if (pos > -1) {
        // remove command args so that what's left is only the command name
        cliArgs = cliArgs.slice(0, pos);
    }
    let commandFilePath = '';
    if (cliArgs.length === 1) {
        commandFilePath = path.join(rootFolder, 'o365', 'commands', `${cliArgs[0]}.js`);
    }
    else {
        if (cliArgs.length === 2) {
            commandFilePath = path.join(rootFolder, 'o365', cliArgs[0], 'commands', `${cliArgs.join('-')}.js`);
        }
        else {
            commandFilePath = path.join(rootFolder, 'o365', cliArgs[0], 'commands', cliArgs[1], cliArgs.slice(1).join('-') + '.js');
        }
    }
    if (!fs.existsSync(commandFilePath)) {
        loadAllCommands(rootFolder);
        return;
    }
    try {
        const cmd = require(commandFilePath);
        if (cmd instanceof Command_1.default) {
            cmd.init(vorpal);
        }
        else {
            loadAllCommands(rootFolder);
        }
    }
    catch (_a) {
        loadAllCommands(rootFolder);
    }
};
appInsights_1.default.trackEvent({
    name: 'started'
});
updateNotifier({ pkg: packageJSON }).notify({ defer: false });
fs.realpath(__dirname, (err, resolvedPath) => {
    if (process.argv.indexOf('--completion:clink:generate') > -1) {
        loadAllCommands(resolvedPath);
        console.log(autocomplete_1.autocomplete.getClinkCompletion(vorpal));
        process.exit();
    }
    if (process.argv.indexOf('--completion:sh:generate') > -1) {
        loadAllCommands(resolvedPath);
        autocomplete_1.autocomplete.generateShCompletion(vorpal);
        process.exit();
    }
    if (process.argv.indexOf('--completion:sh:setup') > -1) {
        loadAllCommands(resolvedPath);
        autocomplete_1.autocomplete.generateShCompletion(vorpal);
        autocomplete_1.autocomplete.setupShCompletion();
        process.exit();
    }
    if (process.argv.indexOf('--reconsent') > -1) {
        console.log(`To reconsent the PnP Office 365 Management Shell Azure AD application navigate in your web browser to https://login.microsoftonline.com/${config_1.default.tenant}/oauth2/authorize?client_id=${config_1.default.cliAadAppId}&response_type=code&prompt=admin_consent`);
        process.exit();
    }
    // disable linux-normalizing args to support JSON and XML values
    vorpal.isCommandArgKeyPairNormalized = false;
    vorpal
        .title('Office 365 CLI')
        .description(packageJSON.description)
        .version(packageJSON.version);
    vorpal
        .command('version', 'Shows the current version of the CLI')
        .action(function (args, cb) {
        this.log(packageJSON.version);
        cb();
    });
    vorpal.pipe((stdout) => {
        return Utils_1.default.logOutput(stdout);
    });
    let v = null;
    try {
        if (process.argv.length > 2) {
            vorpal.delimiter('');
            vorpal.on('client_command_error', (err) => {
                if (v) {
                    process.exit(1);
                }
            });
        }
        loadCommandFromArgs(process.argv, resolvedPath);
        v = vorpal.parse(process.argv);
        // if no command has been passed/match, run immersive mode
        if (!v._command) {
            vorpal
                .delimiter(chalk.red(config_1.default.delimiter + ' '))
                .show();
        }
    }
    catch (e) {
        appInsights_1.default.trackException({
            exception: e
        });
        appInsights_1.default.flush();
        process.exit(1);
    }
});
//# sourceMappingURL=index.js.map