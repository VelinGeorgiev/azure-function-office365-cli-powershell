"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const childProcess = require("child_process");
class KeychainTokenStorage {
    constructor() {
        this.securityPath = '/usr/bin/security';
        this.description = 'Office 365 CLI';
    }
    get() {
        return new Promise((resolve, reject) => {
            const args = [
                'find-generic-password',
                '-a', this.description,
                '-s', this.description,
                '-D', this.description,
                '-g'
            ];
            childProcess.execFile(this.securityPath, args, (err, stdout, stderr) => {
                if (err) {
                    reject(err.message);
                    return;
                }
                const match = /^password: (?:0x[0-9A-F]+  )?"(.*)"$/m.exec(stderr);
                if (match) {
                    const password = match[1].replace(/\\134/g, '\\');
                    resolve(password);
                    return;
                }
                reject('Password in invalid format');
            });
        });
    }
    ;
    set(connectionInfo) {
        return new Promise((resolve, reject) => {
            const args = [
                'add-generic-password',
                '-a', this.description,
                '-s', this.description,
                '-D', this.description,
                '-w', connectionInfo,
                '-U'
            ];
            childProcess.execFile(this.securityPath, args, (err, stdout, stderr) => {
                if (err) {
                    reject('Could not add password to keychain: ' + err.message);
                }
                else {
                    resolve();
                }
            });
        });
    }
    ;
    remove() {
        return new Promise((resolve, reject) => {
            const args = [
                'delete-generic-password',
                '-a', this.description,
                '-s', this.description,
                '-D', this.description
            ];
            childProcess.execFile(this.securityPath, args, (err, stdout, stderr) => {
                if (err) {
                    reject('Could not remove account from keychain: ' + err.message);
                }
                else {
                    resolve();
                }
            });
        });
    }
    ;
}
exports.KeychainTokenStorage = KeychainTokenStorage;
//# sourceMappingURL=KeychainTokenStorage.js.map