"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const vorpal = require('../../../../vorpal-init');
class GraphSchemaExtensionGet extends GraphCommand_1.default {
    get name() {
        return `${commands_1.default.SCHEMAEXTENSION_GET}`;
    }
    get description() {
        return 'Gets the properties of the specified schema extension definition';
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Gets the properties of the specified schema extension definition with id '${args.options.id}'...`);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/schemaExtensions/${args.options.id}`,
            headers: {
                accept: 'application/json;odata.metadata=none',
                'content-type': 'application/json'
            },
            json: true
        };
        request_1.default.get(requestOptions)
            .then((res) => {
            cmd.log(res);
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --id <id>',
                description: `The unique identifier for the schema extension definition`
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.id) {
                return 'Required option id is missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    To get properties of a schema extension definition, you have to pass the ID of the schema
    extension. 

  Examples:
  
    Gets properties of a schema extension definition with ID domain_myExtension
      ${chalk.grey(config_1.default.delimiter)} ${this.name} --id domain_myExtension`);
    }
}
module.exports = new GraphSchemaExtensionGet();
//# sourceMappingURL=schemaextension-get.js.map