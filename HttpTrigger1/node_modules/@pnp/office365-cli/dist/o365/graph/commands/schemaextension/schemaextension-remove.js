"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const vorpal = require('../../../../vorpal-init');
class GraphSchemaExtensionRemoveCommand extends GraphCommand_1.default {
    get name() {
        return commands_1.default.SCHEMAEXTENSION_REMOVE;
    }
    get description() {
        return 'Removes specified Microsoft Graph schema extension';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.confirm = typeof args.options.confirm !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const removeSchemaExtension = () => {
            if (this.verbose) {
                cmd.log(`Removes specified Microsoft Graph schema extension with id '${args.options.id}'...`);
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/schemaExtensions/${args.options.id}`,
                headers: {
                    accept: 'application/json;odata.metadata=none',
                    'content-type': 'application/json'
                },
                json: true
            };
            request_1.default.delete(requestOptions)
                .then(() => {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
                cb();
            }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
        };
        if (args.options.confirm) {
            removeSchemaExtension();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to remove the schema extension with ID ${args.options.id}?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeSchemaExtension();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '-i, --id <id>',
                description: `The unique identifier for the schema extension definition`
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming removing the specified schema extension'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.id) {
                return 'Required option id is missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    To remove specified schema extension definition, you have to pass the ID of the schema
    extension. 

  Examples:
  
    Removes specified Microsoft Graph schema extension with ID domain_myExtension. Will prompt for confirmation
        ${chalk.grey(config_1.default.delimiter)} ${this.name} --id domain_myExtension
    
    Removes specified Microsoft Graph schema extension with ID domain_myExtension without prompt for confirmation
        ${chalk.grey(config_1.default.delimiter)} ${this.name} --id domain_myExtension --confirm
    `);
    }
}
module.exports = new GraphSchemaExtensionRemoveCommand();
//# sourceMappingURL=schemaextension-remove.js.map