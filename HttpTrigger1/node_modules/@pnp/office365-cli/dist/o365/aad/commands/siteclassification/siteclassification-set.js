"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const DirectorySetting_1 = require("./DirectorySetting");
const vorpal = require('../../../../vorpal-init');
class AadSiteClassificationUpdateCommand extends GraphCommand_1.default {
    get name() {
        return `${commands_1.default.SITECLASSIFICATION_SET}`;
    }
    get description() {
        return 'Updates site classification configuration';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.classifications = typeof args.options.classifications !== 'undefined';
        telemetryProps.defaultClassification = typeof args.options.defaultClassification !== 'undefined';
        telemetryProps.usageGuidelinesUrl = typeof args.options.usageGuidelinesUrl !== 'undefined';
        telemetryProps.guestUsageGuidelinesUrl = typeof args.options.guestUsageGuidelinesUrl !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const requestOptions = {
            url: `${this.resource}/beta/settings`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            const unifiedGroupSetting = res.value.filter((directorySetting) => {
                return directorySetting.displayName === 'Group.Unified';
            });
            if (!unifiedGroupSetting ||
                unifiedGroupSetting.length === 0) {
                return Promise.reject("There is no previous defined site classification which can updated.");
            }
            const updatedDirSettings = new DirectorySetting_1.UpdateDirectorySetting();
            unifiedGroupSetting[0].values.forEach((directorySetting) => {
                switch (directorySetting.name) {
                    case "ClassificationList":
                        if (args.options.classifications) {
                            updatedDirSettings.values.push({
                                "name": directorySetting.name,
                                "value": args.options.classifications
                            });
                        }
                        else {
                            updatedDirSettings.values.push({
                                "name": directorySetting.name,
                                "value": directorySetting.value
                            });
                        }
                        break;
                    case "DefaultClassification":
                        if (args.options.defaultClassification) {
                            updatedDirSettings.values.push({
                                "name": directorySetting.name,
                                "value": args.options.defaultClassification
                            });
                        }
                        else {
                            updatedDirSettings.values.push({
                                "name": directorySetting.name,
                                "value": directorySetting.value
                            });
                        }
                        break;
                    case "UsageGuidelinesUrl":
                        if (args.options.usageGuidelinesUrl) {
                            updatedDirSettings.values.push({
                                "name": directorySetting.name,
                                "value": args.options.usageGuidelinesUrl
                            });
                        }
                        else {
                            updatedDirSettings.values.push({
                                "name": directorySetting.name,
                                "value": directorySetting.value
                            });
                        }
                        break;
                    case "GuestUsageGuidelinesUrl":
                        if (args.options.guestUsageGuidelinesUrl) {
                            updatedDirSettings.values.push({
                                "name": directorySetting.name,
                                "value": args.options.guestUsageGuidelinesUrl
                            });
                        }
                        else {
                            updatedDirSettings.values.push({
                                "name": directorySetting.name,
                                "value": directorySetting.value
                            });
                        }
                        break;
                    default:
                        updatedDirSettings.values.push({
                            "name": directorySetting.name,
                            "value": directorySetting.value
                        });
                        break;
                }
            });
            const requestOptions = {
                url: `${this.resource}/beta/settings/${unifiedGroupSetting[0].id}`,
                headers: {
                    accept: 'application/json;odata.metadata=none',
                    'content-type': 'application/json'
                },
                json: true,
                body: updatedDirSettings,
            };
            return request_1.default.patch(requestOptions);
        })
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-c, --classifications [classifications]',
                description: 'Comma-separated list of classifications'
            },
            {
                option: '-d, --defaultClassification [defaultClassification]',
                description: 'Classification to use by default'
            },
            {
                option: '-u, --usageGuidelinesUrl [usageGuidelinesUrl]',
                description: 'URL with usage guidelines for members'
            },
            {
                option: '-g, --guestUsageGuidelinesUrl [guestUsageGuidelinesUrl]',
                description: 'URL with usage guidelines for guests'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.classifications &&
                !args.options.defaultClassification &&
                !args.options.usageGuidelinesUrl &&
                !args.options.guestUsageGuidelinesUrl) {
                return 'Specify at least one property to update';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    ${chalk.yellow('Attention:')} This command is based on an API that is currently
    in preview and is subject to change once the API reached general
    availability.

  Examples:

    Update Office 365 Tenant site classification configuration
      ${this.name} --classifications "High, Medium, Low" --defaultClassification "Medium" 

    Update only the default classification
      ${this.name} --defaultClassification "Low"

    Update site classification with a usage guidelines URL 
      ${this.name} --usageGuidelinesUrl "http://aka.ms/pnp"

    Update site classification with usage guidelines URLs for guests and members
      ${this.name} --usageGuidelinesUrl "http://aka.ms/pnp" --guestUsageGuidelinesUrl "http://aka.ms/pnp" 

  More information:

    SharePoint "modern" sites classification
      https://docs.microsoft.com/en-us/sharepoint/dev/solution-guidance/modern-experience-site-classification
    `);
    }
}
module.exports = new AadSiteClassificationUpdateCommand();
//# sourceMappingURL=siteclassification-set.js.map