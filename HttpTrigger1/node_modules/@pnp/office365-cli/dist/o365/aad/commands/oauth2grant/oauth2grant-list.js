"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const Utils_1 = require("../../../../Utils");
const AadCommand_1 = require("../../../base/AadCommand");
const vorpal = require('../../../../vorpal-init');
class AadOAuth2GrantListCommand extends AadCommand_1.default {
    get name() {
        return commands_1.default.OAUTH2GRANT_LIST;
    }
    get description() {
        return 'Lists OAuth2 permission grants for the specified service principal';
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Retrieving list of OAuth grants for the service principal...`);
        }
        const requestOptions = {
            url: `${this.resource}/myorganization/oauth2PermissionGrants?api-version=1.6&$filter=clientId eq '${encodeURIComponent(args.options.clientId)}'`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res.value && res.value.length > 0) {
                if (args.options.output === 'json') {
                    cmd.log(res.value);
                }
                else {
                    cmd.log(res.value.map(g => {
                        return {
                            objectId: g.objectId,
                            resourceId: g.resourceId,
                            scope: g.scope
                        };
                    }));
                }
            }
            cb();
        }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --clientId <clientId>',
                description: 'objectId of the service principal for which the configured OAuth2 permission grants should be retrieved'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.clientId) {
                return 'Required option clientId missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.clientId)) {
                return `${args.options.clientId} is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.OAUTH2GRANT_LIST).helpInformation());
        log(`  Remarks:
  
    In order to list existing OAuth2 permissions granted to a service principal, you need its ${chalk.grey('objectId')}.
    You can retrieve it using the ${chalk.blue(commands_1.default.SP_GET)} command.

    When using the text output type (default), the command lists only the values of the ${chalk.grey('objectId')},
    ${chalk.grey('resourceId')} and ${chalk.grey('scope')} properties of the OAuth grant. When setting the output
    type to JSON, all available properties are included in the command output.
   
  Examples:
  
    List OAuth2 permissions granted to service principal with objectId ${chalk.grey('b2307a39-e878-458b-bc90-03bc578531d6')}.
      ${commands_1.default.OAUTH2GRANT_LIST} --clientId b2307a39-e878-458b-bc90-03bc578531d6

  More information:
  
    Application and service principal objects in Azure Active Directory (Azure AD)
      https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-application-objects
`);
    }
}
module.exports = new AadOAuth2GrantListCommand();
//# sourceMappingURL=oauth2grant-list.js.map