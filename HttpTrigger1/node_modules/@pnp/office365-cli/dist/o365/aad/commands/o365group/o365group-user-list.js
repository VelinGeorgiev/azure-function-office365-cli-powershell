"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const commands_2 = require("../../../teams/commands");
const GraphItemsListCommand_1 = require("../../../base/GraphItemsListCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class AadO365GroupUserListCommand extends GraphItemsListCommand_1.GraphItemsListCommand {
    get name() {
        return `${commands_1.default.O365GROUP_USER_LIST}`;
    }
    get description() {
        return "Lists users for the specified Office 365 group or Microsoft Teams team";
    }
    alias() {
        return [commands_2.default.TEAMS_USER_LIST];
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.role = args.options.role;
        telemetryProps.teamId = typeof args.options.teamId !== 'undefined';
        telemetryProps.groupId = typeof args.options.groupId !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const providedGroupId = (typeof args.options.groupId !== 'undefined') ? args.options.groupId : args.options.teamId;
        this
            .getOwners(cmd, providedGroupId)
            .then(() => {
            if (args.options.role === "Owner") {
                return Promise.resolve();
            }
            return this.getMembersAndGuests(cmd, providedGroupId);
        })
            .then(() => {
            // Filter out duplicate added values for owners (as they are returned as members as well)
            this.items = this.items.filter((groupUser, index, self) => index === self.findIndex((t) => (t.id === groupUser.id && t.displayName === groupUser.displayName)));
            if (args.options.role) {
                this.items = this.items.filter(i => i.userType === args.options.role);
            }
            cmd.log(this.items);
            if (this.verbose) {
                cmd.log(vorpal.chalk.green("DONE"));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    getOwners(cmd, groupId) {
        const endpoint = `${this.resource}/v1.0/groups/${groupId}/owners?$select=id,displayName,userPrincipalName,userType`;
        return this.getAllItems(endpoint, cmd, true).then(() => {
            // Currently there is a bug in the Microsoft Graph that returns Owners as
            // userType 'member'. We therefore update all returned user as owner
            for (var i in this.items) {
                this.items[i].userType = "Owner";
            }
        });
    }
    getMembersAndGuests(cmd, groupId) {
        const endpoint = `${this.resource}/v1.0/groups/${groupId}/members?$select=id,displayName,userPrincipalName,userType`;
        return this.getAllItems(endpoint, cmd, false);
    }
    options() {
        const options = [
            {
                option: "-i, --groupId [groupId]",
                description: "The ID of the Office 365 group for which to list users"
            },
            {
                option: "--teamId [teamId]",
                description: "The ID of the Microsoft Teams team for which to list users"
            },
            {
                option: "-r, --role [type]",
                description: "Filter the results to only users with the given role: Owner|Member|Guest",
                autocomplete: ["Owner", "Member", "Guest"]
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.groupId && !args.options.teamId) {
                return 'Please provide one of the following parameters: groupId or teamId';
            }
            if (args.options.groupId && args.options.teamId) {
                return 'You cannot provide both a groupId and teamId parameter, please provide only one';
            }
            if (args.options.teamId && !Utils_1.default.isValidGuid(args.options.teamId)) {
                return `${args.options.teamId} is not a valid GUID`;
            }
            if (args.options.groupId && !Utils_1.default.isValidGuid(args.options.groupId)) {
                return `${args.options.groupId} is not a valid GUID`;
            }
            if (args.options.role) {
                if (['Owner', 'Member', 'Guest'].indexOf(args.options.role) === -1) {
                    return `${args.options.role} is not a valid role value. Allowed values Owner|Member|Guest`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:

    List all users and their role in the specified Office 365 group
      ${this.name} --groupId '00000000-0000-0000-0000-000000000000'

    List all owners and their role in the specified Office 365 group
      ${this.name} --groupId '00000000-0000-0000-0000-000000000000' --role Owner

    List all guests and their role in the specified Office 365 group
      ${this.name} --groupId '00000000-0000-0000-0000-000000000000' --role Guest

    List all users and their role in the specified team
      ${commands_2.default.TEAMS_USER_LIST} --teamId '00000000-0000-0000-0000-000000000000'

    List all owners and their role in the specified team
      ${commands_2.default.TEAMS_USER_LIST} --teamId '00000000-0000-0000-0000-000000000000' --role Owner

`);
    }
}
module.exports = new AadO365GroupUserListCommand();
//# sourceMappingURL=o365group-user-list.js.map