"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const vorpal = require('../../../../vorpal-init');
class AadSiteClassificationDisableCommand extends GraphCommand_1.default {
    get name() {
        return `${commands_1.default.SITECLASSIFICATION_DISABLE}`;
    }
    get description() {
        return 'Disables site classification';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.confirm = (!(!args.options.confirm)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const disableSiteClassification = () => {
            const requestOptions = {
                url: `${this.resource}/beta/settings`,
                headers: {
                    accept: 'application/json;odata.metadata=none'
                },
                json: true
            };
            request_1.default
                .get(requestOptions)
                .then((res) => {
                if (res.value.length === 0) {
                    return Promise.reject('Site classification is not enabled.');
                }
                const unifiedGroupSetting = res.value.filter((directorySetting) => {
                    return directorySetting.displayName === 'Group.Unified';
                });
                if (!unifiedGroupSetting || unifiedGroupSetting.length === 0) {
                    return Promise.reject('Missing DirectorySettingTemplate for "Group.Unified"');
                }
                if (!unifiedGroupSetting[0] ||
                    !unifiedGroupSetting[0].id || unifiedGroupSetting[0].id.length === 0) {
                    return Promise.reject('Missing UnifiedGroupSettting id');
                }
                const requestOptions = {
                    url: `${this.resource}/beta/settings/` + unifiedGroupSetting[0].id,
                    headers: {
                        accept: 'application/json;odata.metadata=none',
                        'content-type': 'application/json'
                    },
                    json: true,
                };
                return request_1.default.delete(requestOptions);
            })
                .then(() => {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
                cb();
            }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
        };
        if (args.options.confirm) {
            disableSiteClassification();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to disable site classification?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    disableSiteClassification();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming disabling site classification'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    ${chalk.yellow('Attention:')} This command is based on an API that is currently
    in preview and is subject to change once the API reached general
    availability.

  Examples:
  
    Disable site classification 
      ${this.name}  

    Disable site classification without confirmation
      ${this.name} --confirm

  More information:

    SharePoint "modern" sites classification
      https://docs.microsoft.com/en-us/sharepoint/dev/solution-guidance/modern-experience-site-classification
    `);
    }
}
module.exports = new AadSiteClassificationDisableCommand();
//# sourceMappingURL=siteclassification-disable.js.map