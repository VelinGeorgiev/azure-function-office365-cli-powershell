"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const commands_2 = require("../../../teams/commands");
const Utils_1 = require("../../../../Utils");
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const vorpal = require('../../../../vorpal-init');
class AadO365GroupUserAddCommand extends GraphCommand_1.default {
    get name() {
        return `${commands_1.default.O365GROUP_USER_ADD}`;
    }
    get description() {
        return 'Adds user to specified Office 365 Group or Microsoft Teams team';
    }
    alias() {
        return [commands_2.default.TEAMS_USER_ADD];
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.role = args.options.role;
        telemetryProps.teamId = typeof args.options.teamId !== 'undefined';
        telemetryProps.groupId = typeof args.options.groupId !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const providedGroupId = (typeof args.options.groupId !== 'undefined') ? args.options.groupId : args.options.teamId;
        const requestOptions = {
            url: `${this.resource}/v1.0/users/${encodeURIComponent(args.options.userName)}/id`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            const endpoint = `${this.resource}/v1.0/groups/${providedGroupId}/${((typeof args.options.role !== 'undefined') ? args.options.role : '').toLowerCase() === 'owner' ? 'owners' : 'members'}/$ref`;
            const requestOptions = {
                url: endpoint,
                headers: {
                    'accept': 'application/json;odata.metadata=none'
                },
                json: true,
                body: { "@odata.id": "https://graph.microsoft.com/v1.0/directoryObjects/" + res.value }
            };
            return request_1.default.post(requestOptions);
        })
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-n, --userName <userName>',
                description: 'User\'s UPN (user principal name, eg. johndoe@example.com)'
            },
            {
                option: "-i, --groupId [groupId]",
                description: "The ID of the Office 365 Group to which to add the user"
            },
            {
                option: "--teamId [teamId]",
                description: "The ID of the Teams team to which to add the user"
            },
            {
                option: '-r, --role [role]',
                description: 'The role to be assigned to the new user: Owner|Member. Default Member',
                autocomplete: ['Owner', 'Member']
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.groupId && !args.options.teamId) {
                return 'Please provide one of the following parameters: groupId or teamId';
            }
            if (args.options.groupId && args.options.teamId) {
                return 'You cannot provide both a groupId and teamId parameter, please provide only one';
            }
            if (args.options.teamId && !Utils_1.default.isValidGuid(args.options.teamId)) {
                return `${args.options.teamId} is not a valid GUID`;
            }
            if (args.options.groupId && !Utils_1.default.isValidGuid(args.options.groupId)) {
                return `${args.options.groupId} is not a valid GUID`;
            }
            if (!args.options.userName) {
                return 'Required parameter userName missing';
            }
            if (args.options.role) {
                if (['owner', 'member'].indexOf(args.options.role.toLowerCase()) === -1) {
                    return `${args.options.role} is not a valid role value. Allowed values Owner|Member`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:

    Add a new member to the specified Office 365 Group
      ${this.name} --groupId '00000000-0000-0000-0000-000000000000' --userName 'anne.matthews@contoso.onmicrosoft.com'

    Add a new owner to the specified Office 365 Group
      ${this.name} --groupId '00000000-0000-0000-0000-000000000000' --userName 'anne.matthews@contoso.onmicrosoft.com' --role Owner

    Add a new member to the specified Microsoft Teams team
      ${this.alias()[0]} --teamId '00000000-0000-0000-0000-000000000000' --userName 'anne.matthews@contoso.onmicrosoft.com'
`);
    }
}
module.exports = new AadO365GroupUserAddCommand();
//# sourceMappingURL=o365group-user-add.js.map