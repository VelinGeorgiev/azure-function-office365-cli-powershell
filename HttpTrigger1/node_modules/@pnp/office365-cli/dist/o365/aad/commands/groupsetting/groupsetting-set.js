"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const Utils_1 = require("../../../../Utils");
const GraphCommand_1 = require("../../../base/GraphCommand");
const vorpal = require('../../../../vorpal-init');
class AadGroupSettingSetCommand extends GraphCommand_1.default {
    get name() {
        return `${commands_1.default.GROUPSETTING_SET}`;
    }
    get description() {
        return 'Updates the particular group setting';
    }
    allowUnknownOptions() {
        return true;
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Retrieving group setting with id '${args.options.id}'...`);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/groupSettings/${args.options.id}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((groupSetting) => {
            const requestOptions = {
                url: `${this.resource}/v1.0/groupSettings/${args.options.id}`,
                headers: {
                    accept: 'application/json;odata.metadata=none',
                    'content-type': 'application/json'
                },
                body: {
                    displayName: groupSetting.displayName,
                    templateId: groupSetting.templateId,
                    values: this.getGroupSettingValues(args.options, groupSetting)
                },
                json: true
            };
            return request_1.default.patch(requestOptions);
        })
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    getGroupSettingValues(options, groupSetting) {
        const values = [];
        const excludeOptions = [
            'id',
            'debug',
            'verbose',
            'output'
        ];
        Object.keys(options).forEach(key => {
            if (excludeOptions.indexOf(key) === -1) {
                values.push({
                    name: key,
                    value: options[key]
                });
            }
        });
        groupSetting.values.forEach(v => {
            if (!values.find(e => e.name === v.name)) {
                values.push({
                    name: v.name,
                    value: v.value
                });
            }
        });
        return values;
    }
    options() {
        const options = [
            {
                option: '-i, --id <id>',
                description: 'The ID of the group setting to update'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.id) {
                return 'Required option id missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    To update a group setting, you have to specify the ID of the group setting.
    You can retrieve the ID of the group setting using the
    ${chalk.blue(commands_1.default.GROUPSETTING_LIST)} command.

    To update values for the different properties specified in the group
    setting, include additional options that match the property in the group
    setting. For example ${chalk.blue("--ClassificationList 'HBI, MBI, LBI, GDPR'")} will set
    the list of classifications to use on modern SharePoint sites.

    If you don't specify a value for the particular property, it will remain
    unchanged. To find out which properties are available for the particular
    group setting, use the ${chalk.blue(commands_1.default.GROUPSETTING_GET)} command.

    If the specified ${chalk.blue('id')} doesn't reference a valid group setting, you will get
    a ${chalk.grey("Resource 'xyz' does not exist or one of its queried reference-property")}
    ${chalk.grey('objects are not present.')} error.

  Examples:
  
    Configure classification for modern SharePoint sites
      ${this.name} --id c391b57d-5783-4c53-9236-cefb5c6ef323 --UsageGuidelinesUrl https://contoso.sharepoint.com/sites/compliance --ClassificationList 'HBI, MBI, LBI, GDPR' --DefaultClassification MBI
`);
    }
}
module.exports = new AadGroupSettingSetCommand();
//# sourceMappingURL=groupsetting-set.js.map