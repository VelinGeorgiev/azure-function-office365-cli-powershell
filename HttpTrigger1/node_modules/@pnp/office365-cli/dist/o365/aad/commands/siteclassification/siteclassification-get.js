"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const SiteClassificationSettings_1 = require("./SiteClassificationSettings");
const Command_1 = require("../../../../Command");
const vorpal = require('../../../../vorpal-init');
class AadSiteClassificationGetCommand extends GraphCommand_1.default {
    get name() {
        return `${commands_1.default.SITECLASSIFICATION_GET}`;
    }
    get description() {
        return 'Gets site classification configuration';
    }
    commandAction(cmd, args, cb) {
        const requestOptions = {
            url: `${this.resource}/beta/settings`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res.value.length == 0) {
                cb(new Command_1.CommandError('Site classification is not enabled.'));
                return;
            }
            const unifiedGroupSetting = res.value.filter((directorySetting) => {
                return directorySetting.displayName === 'Group.Unified';
            });
            if (unifiedGroupSetting == null || unifiedGroupSetting.length == 0) {
                cb(new Command_1.CommandError("Missing DirectorySettingTemplate for \"Group.Unified\""));
                return;
            }
            const siteClassificationsSettings = new SiteClassificationSettings_1.SiteClassificationSettings();
            // Get the classification list
            const classificationList = unifiedGroupSetting[0].values.filter((directorySetting) => {
                return directorySetting.name === 'ClassificationList';
            });
            siteClassificationsSettings.Classifications = [];
            if (classificationList != null && classificationList.length > 0) {
                siteClassificationsSettings.Classifications = classificationList[0].value.split(',');
            }
            // Get the UsageGuidelinesUrl
            const guidanceUrl = unifiedGroupSetting[0].values.filter((directorySetting) => {
                return directorySetting.name === 'UsageGuidelinesUrl';
            });
            siteClassificationsSettings.UsageGuidelinesUrl = "";
            if (guidanceUrl != null && guidanceUrl.length > 0) {
                siteClassificationsSettings.UsageGuidelinesUrl = guidanceUrl[0].value;
            }
            // Get the GuestUsageGuidelinesUrl
            const guestGuidanceUrl = unifiedGroupSetting[0].values.filter((directorySetting) => {
                return directorySetting.name === 'GuestUsageGuidelinesUrl';
            });
            siteClassificationsSettings.GuestUsageGuidelinesUrl = "";
            if (guestGuidanceUrl != null && guestGuidanceUrl.length > 0) {
                siteClassificationsSettings.GuestUsageGuidelinesUrl = guestGuidanceUrl[0].value;
            }
            // Get the DefaultClassification
            const defaultClassification = unifiedGroupSetting[0].values.filter((directorySetting) => {
                return directorySetting.name === 'DefaultClassification';
            });
            siteClassificationsSettings.DefaultClassification = "";
            if (defaultClassification != null && defaultClassification.length > 0) {
                siteClassificationsSettings.DefaultClassification = defaultClassification[0].value;
            }
            cmd.log(JSON.parse(JSON.stringify(siteClassificationsSettings)));
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    ${chalk.yellow('Attention:')} This command is based on an API that is currently
    in preview and is subject to change once the API reached general
    availability.

  Examples:
  
    Get information about the Office 365 Tenant site classification
      ${this.name}

  More information:

    SharePoint "modern" sites classification
      https://docs.microsoft.com/en-us/sharepoint/dev/solution-guidance/modern-experience-site-classification
    `);
    }
}
module.exports = new AadSiteClassificationGetCommand();
//# sourceMappingURL=siteclassification-get.js.map