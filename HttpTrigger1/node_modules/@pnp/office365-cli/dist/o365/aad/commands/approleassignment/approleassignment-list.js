"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const Utils_1 = require("../../../../Utils");
const AadCommand_1 = require("../../../base/AadCommand");
const request_1 = require("../../../../request");
const vorpal = require('../../../../vorpal-init');
class AadAppRoleAssignmentListCommand extends AadCommand_1.default {
    get name() {
        return commands_1.default.APPROLEASSIGNMENT_LIST;
    }
    get description() {
        return 'Lists app role assignments for the specified application registration';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.appId = typeof args.options.appId !== 'undefined';
        telemetryProps.displayName = typeof args.options.displayName !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let sp;
        // get the service principal associated with the appId
        const spMatchQuery = args.options.appId ?
            `appId eq '${encodeURIComponent(args.options.appId)}'` :
            `displayName eq '${encodeURIComponent(args.options.displayName)}'`;
        this
            .getServicePrincipalForApp(spMatchQuery)
            .then((resp) => {
            if (!resp.value.length) {
                return Promise.reject('app registration not found');
            }
            sp = resp.value[0];
            // the role assignment has an appRoleId but no name. To get the name,
            // we need to get all the roles from the resource. the resource is
            // a service principal. Multiple roles may have same resource id.
            const resourceIds = sp.appRoleAssignments.map((item) => item.resourceId);
            const tasks = [];
            for (let i = 0; i < resourceIds.length; i++) {
                tasks.push(this.getServicePrincipal(resourceIds[i]));
            }
            return Promise.all(tasks);
        })
            .then((resources) => {
            // loop through all appRoleAssignments for the servicePrincipal
            // and lookup the appRole.Id in the resources[resourceId].appRoles array...
            const results = [];
            sp.appRoleAssignments.map((appRoleAssignment) => {
                const resource = resources.find((r) => r.objectId === appRoleAssignment.resourceId);
                if (resource) {
                    const appRole = resource.appRoles.find((r) => r.id === appRoleAssignment.id);
                    if (appRole) {
                        results.push({
                            appRoleId: appRoleAssignment.id,
                            resourceDisplayName: appRoleAssignment.resourceDisplayName,
                            resourceId: appRoleAssignment.resourceId,
                            roleId: appRole.id,
                            roleName: appRole.value
                        });
                    }
                }
            });
            if (args.options.output === 'json') {
                cmd.log(results);
            }
            else {
                cmd.log(results.map((r) => {
                    return {
                        resourceDisplayName: r.resourceDisplayName,
                        roleName: r.roleName
                    };
                }));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    getServicePrincipalForApp(filterParam) {
        const spRequestOptions = {
            url: `${this.resource}/myorganization/servicePrincipals?api-version=1.6&$expand=appRoleAssignments&$filter=${filterParam}`,
            headers: {
                accept: 'application/json'
            },
            json: true
        };
        return request_1.default.get(spRequestOptions);
    }
    getServicePrincipal(spId) {
        const spRequestOptions = {
            url: `${this.resource}/myorganization/servicePrincipals/${spId}?api-version=1.6`,
            headers: {
                accept: 'application/json'
            },
            json: true
        };
        return request_1.default.get(spRequestOptions);
    }
    options() {
        const options = [
            {
                option: '-i, --appId [appId]',
                description: 'Application (client) Id of the App Registration for which the configured app roles should be retrieved'
            },
            {
                option: '-n, --displayName [displayName]',
                description: 'Display name of the application for which the configured app roles should be retrieved'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.appId && !args.options.displayName) {
                return 'Specify either appId or displayName';
            }
            if (args.options.appId && !Utils_1.default.isValidGuid(args.options.appId)) {
                return `${args.options.appId} is not a valid GUID`;
            }
            if (args.options.appId && args.options.displayName) {
                return 'Specify either appId or displayName but not both';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.APPROLEASSIGNMENT_LIST).helpInformation());
        log(`  Remarks:
  
    Specify either the ${chalk.grey('appId')} or ${chalk.grey('displayName')} but not both. 
    If you specify both values, the command will fail with an error.
   
  Examples:
  
    List app roles assigned to service principal with Application (client) ID
    ${chalk.grey('b2307a39-e878-458b-bc90-03bc578531d6')}.
      ${commands_1.default.APPROLEASSIGNMENT_LIST} --appId b2307a39-e878-458b-bc90-03bc578531d6

    List app roles assigned to service principal with Application display name
    ${chalk.grey('MyAppName')}.
      ${commands_1.default.APPROLEASSIGNMENT_LIST} --displayName 'MyAppName'

  More information:
  
    Application and service principal objects in Azure Active Directory
    (Azure AD): 
      https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-application-objects
`);
    }
}
module.exports = new AadAppRoleAssignmentListCommand();
//# sourceMappingURL=approleassignment-list.js.map