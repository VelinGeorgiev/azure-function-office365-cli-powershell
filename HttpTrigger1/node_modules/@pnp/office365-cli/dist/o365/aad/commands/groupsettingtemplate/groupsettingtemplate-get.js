"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const GraphItemsListCommand_1 = require("../../../base/GraphItemsListCommand");
const Command_1 = require("../../../../Command");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class AadGroupSettingTemplateGetCommand extends GraphItemsListCommand_1.GraphItemsListCommand {
    get name() {
        return `${commands_1.default.GROUPSETTINGTEMPLATE_GET}`;
    }
    get description() {
        return 'Gets information about the specified Azure AD group settings template';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.id = typeof args.options.id !== 'undefined';
        telemetryProps.displayName = typeof args.options.displayName !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        this
            .getAllItems(`${this.resource}/v1.0/groupSettingTemplates`, cmd, true)
            .then(() => {
            const groupSettingTemplate = this.items.filter(t => args.options.id ? t.id === args.options.id : t.displayName === args.options.displayName);
            if (groupSettingTemplate && groupSettingTemplate.length > 0) {
                cmd.log(groupSettingTemplate.pop());
            }
            else {
                cb(new Command_1.CommandError(`Resource '${(args.options.id || args.options.displayName)}' does not exist.`));
                return;
            }
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --id [id]',
                description: 'The ID of the settings template to retrieve. Specify the id or displayName but not both'
            },
            {
                option: '-n, --displayName [displayName]',
                description: 'The display name of the settings template to retrieve. Specify the id or displayName but not both'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.id && !args.options.displayName) {
                return 'Specify either id or displayName';
            }
            if (args.options.id && args.options.displayName) {
                return 'Specify either id or displayName but not both';
            }
            if (args.options.id &&
                !Utils_1.default.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Get information about the group setting template with id
    ${chalk.grey('62375ab9-6b52-47ed-826b-58e47e0e304b')}
      ${this.name} --id 62375ab9-6b52-47ed-826b-58e47e0e304b

    Get information about the group setting template with display name
    ${chalk.grey('Group.Unified')}
      ${this.name} --displayName Group.Unified
`);
    }
}
module.exports = new AadGroupSettingTemplateGetCommand();
//# sourceMappingURL=groupsettingtemplate-get.js.map