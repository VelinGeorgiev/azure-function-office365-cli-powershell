"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const Utils_1 = require("../../../../Utils");
const AadCommand_1 = require("../../../base/AadCommand");
const vorpal = require('../../../../vorpal-init');
class AadSpGetCommand extends AadCommand_1.default {
    get name() {
        return commands_1.default.SP_GET;
    }
    get description() {
        return 'Gets information about the specific service principal';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.appId = (!(!args.options.appId)).toString();
        telemetryProps.displayName = (!(!args.options.displayName)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Retrieving service principal information...`);
        }
        const spMatchQuery = args.options.appId ?
            `appId eq '${encodeURIComponent(args.options.appId)}'` :
            `displayName eq '${encodeURIComponent(args.options.displayName)}'`;
        const requestOptions = {
            url: `${this.resource}/myorganization/servicePrincipals?api-version=1.6&$filter=${spMatchQuery}`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res.value && res.value.length > 0) {
                cmd.log(res.value[0]);
            }
            cb();
        }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --appId [appId]',
                description: 'ID of the application for which the service principal should be retrieved'
            },
            {
                option: '-n, --displayName [displayName]',
                description: 'Display name of the application for which the service principal should be retrieved'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.appId && !args.options.displayName) {
                return 'Specify either appId or displayName';
            }
            if (args.options.appId) {
                if (!Utils_1.default.isValidGuid(args.options.appId)) {
                    return `${args.options.appId} is not a valid GUID`;
                }
            }
            if (args.options.appId && args.options.displayName) {
                return 'Specify either appId or displayName but not both';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.SP_GET).helpInformation());
        log(`  Remarks:
  
    When looking up information about a service principal you should specify either its ${chalk.grey('appId')}
    or ${chalk.grey('displayName')} but not both. If you specify both values, the command will fail
    with an error.
   
  Examples:
  
    Return details about the service principal with appId ${chalk.grey('b2307a39-e878-458b-bc90-03bc578531d6')}.
      ${commands_1.default.SP_GET} --appId b2307a39-e878-458b-bc90-03bc578531d6

    Return details about the ${chalk.grey('Microsoft Graph')} service principal.
      ${commands_1.default.SP_GET} --displayName "Microsoft Graph"

  More information:
  
    Application and service principal objects in Azure Active Directory (Azure AD)
      https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-application-objects
`);
    }
}
module.exports = new AadSpGetCommand();
//# sourceMappingURL=sp-get.js.map