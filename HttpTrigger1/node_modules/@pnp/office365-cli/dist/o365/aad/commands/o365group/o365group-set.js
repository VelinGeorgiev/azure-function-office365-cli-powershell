"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const fs = require("fs");
const path = require("path");
const Utils_1 = require("../../../../Utils");
const GraphCommand_1 = require("../../../base/GraphCommand");
const vorpal = require('../../../../vorpal-init');
class AadO365GroupSetCommand extends GraphCommand_1.default {
    get name() {
        return commands_1.default.O365GROUP_SET;
    }
    get description() {
        return 'Updates Office 365 Group properties';
    }
    commandAction(cmd, args, cb) {
        (() => {
            if (!args.options.displayName &&
                !args.options.description &&
                typeof args.options.isPrivate === 'undefined') {
                return Promise.resolve();
            }
            if (this.verbose) {
                cmd.log(`Updating Office 365 Group ${args.options.id}...`);
            }
            const update = {};
            if (args.options.displayName) {
                update.displayName = args.options.displayName;
            }
            if (args.options.description) {
                update.description = args.options.description;
            }
            if (typeof args.options.isPrivate !== 'undefined') {
                update.visibility = args.options.isPrivate == 'true' ? 'Private' : 'Public';
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/groups/${args.options.id}`,
                headers: {
                    'accept': 'application/json;odata.metadata=none'
                },
                json: true,
                body: update
            };
            return request_1.default.patch(requestOptions);
        })()
            .then(() => {
            if (!args.options.logoPath) {
                if (this.debug) {
                    cmd.log('logoPath not set. Skipping');
                }
                return Promise.resolve();
            }
            const fullPath = path.resolve(args.options.logoPath);
            if (this.verbose) {
                cmd.log(`Setting group logo ${fullPath}...`);
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/groups/${args.options.id}/photo/$value`,
                headers: {
                    'content-type': this.getImageContentType(fullPath)
                },
                body: fs.readFileSync(fullPath)
            };
            return new Promise((resolve, reject) => {
                this.setGroupLogo(requestOptions, AadO365GroupSetCommand.numRepeat, resolve, reject, cmd);
            });
        })
            .then(() => {
            if (!args.options.owners) {
                if (this.debug) {
                    cmd.log('Owners not set. Skipping');
                }
                return Promise.resolve(undefined);
            }
            const owners = args.options.owners.split(',').map(o => o.trim());
            if (this.verbose) {
                cmd.log('Retrieving user information to set group owners...');
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/users?$filter=${owners.map(o => `userPrincipalName eq '${o}'`).join(' or ')}&$select=id`,
                headers: {
                    'content-type': 'application/json'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })
            .then((res) => {
            if (!res) {
                return Promise.resolve();
            }
            return Promise.all(res.value.map(u => request_1.default.post({
                url: `${this.resource}/v1.0/groups/${args.options.id}/owners/$ref`,
                headers: {
                    'content-type': 'application/json'
                },
                json: true,
                body: {
                    "@odata.id": `https://graph.microsoft.com/v1.0/users/${u.id}`
                }
            })));
        })
            .then(() => {
            if (!args.options.members) {
                if (this.debug) {
                    cmd.log('Members not set. Skipping');
                }
                return Promise.resolve(undefined);
            }
            const members = args.options.members.split(',').map(o => o.trim());
            if (this.verbose) {
                cmd.log('Retrieving user information to set group members...');
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/users?$filter=${members.map(o => `userPrincipalName eq '${o}'`).join(' or ')}&$select=id`,
                headers: {
                    'content-type': 'application/json'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })
            .then((res) => {
            if (!res) {
                return Promise.resolve();
            }
            return Promise.all(res.value.map(u => request_1.default.post({
                url: `${this.resource}/v1.0/groups/${args.options.id}/members/$ref`,
                headers: {
                    'content-type': 'application/json'
                },
                json: true,
                body: {
                    "@odata.id": `https://graph.microsoft.com/v1.0/users/${u.id}`
                }
            })));
        })
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
    }
    setGroupLogo(requestOptions, retryLeft, resolve, reject, cmd) {
        request_1.default
            .put(requestOptions)
            .then((res) => {
            if (this.debug) {
                cmd.log('Response:');
                cmd.log(res);
                cmd.log('');
            }
            resolve();
        }, (err) => {
            if (--retryLeft > 0) {
                setTimeout(() => {
                    this.setGroupLogo(requestOptions, retryLeft, resolve, reject, cmd);
                }, 500 * (AadO365GroupSetCommand.numRepeat - retryLeft));
            }
            else {
                reject(err);
            }
        });
    }
    getImageContentType(imagePath) {
        let extension = imagePath.substr(imagePath.lastIndexOf('.')).toLowerCase();
        switch (extension) {
            case '.png':
                return 'image/png';
            case '.gif':
                return 'image/gif';
            default:
                return 'image/jpeg';
        }
    }
    options() {
        const options = [
            {
                option: '-i, --id <id>',
                description: 'The ID of the Office 365 Group to update'
            },
            {
                option: '-n, --displayName [displayName]',
                description: 'Display name for the Office 365 Group'
            },
            {
                option: '-d, --description [description]',
                description: 'Description for the Office 365 Group'
            },
            {
                option: '--owners [owners]',
                description: 'Comma-separated list of Office 365 Group owners to add'
            },
            {
                option: '--members [members]',
                description: 'Comma-separated list of Office 365 Group members to add'
            },
            {
                option: '--isPrivate [isPrivate]',
                description: 'Set to true if the Office 365 Group should be private and to false if it should be public (default)'
            },
            {
                option: '-l, --logoPath [logoPath]',
                description: 'Local path to the image file to use as group logo'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.displayName &&
                !args.options.description &&
                !args.options.members &&
                !args.options.owners &&
                typeof args.options.isPrivate === 'undefined' &&
                !args.options.logoPath) {
                return 'Specify at least one property to update';
            }
            if (!args.options.id) {
                return 'Required option id missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
            if (args.options.owners) {
                let owners = args.options.owners.split(',').map(o => o.trim());
                for (let i = 0; i < owners.length; i++) {
                    if (owners[i].indexOf('@') < 0) {
                        return `${owners[i]} is not a valid userPrincipalName`;
                    }
                }
            }
            if (args.options.members) {
                let members = args.options.members.split(',').map(m => m.trim());
                for (let i = 0; i < members.length; i++) {
                    if (members[i].indexOf('@') < 0) {
                        return `${members[i]} is not a valid userPrincipalName`;
                    }
                }
            }
            if (typeof args.options.isPrivate !== 'undefined' &&
                args.options.isPrivate !== 'true' &&
                args.options.isPrivate !== 'false') {
                return `${args.options.isPrivate} is not a valid boolean value`;
            }
            if (args.options.logoPath) {
                const fullPath = path.resolve(args.options.logoPath);
                if (!fs.existsSync(fullPath)) {
                    return `File '${fullPath}' not found`;
                }
                if (fs.lstatSync(fullPath).isDirectory()) {
                    return `Path '${fullPath}' points to a directory`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    When updating group's owners and members, the command will add newly
    specified users to the previously set owners and members. The previously
    set users will not be replaced.

    When specifying the path to the logo image you can use both relative and
    absolute paths. Note, that ~ in the path, will not be resolved and will most
    likely result in an error.

  Examples:

    Update Office 365 Group display name
      ${this.name} --id 28beab62-7540-4db1-a23f-29a6018a3848 --displayName Finance

    Change Office 365 Group visibility to public
      ${this.name} --id 28beab62-7540-4db1-a23f-29a6018a3848 --isPrivate false

    Add new Office 365 Group owners
      ${this.name} --id 28beab62-7540-4db1-a23f-29a6018a3848 --owners "DebraB@contoso.onmicrosoft.com,DiegoS@contoso.onmicrosoft.com"

    Add new Office 365 Group members
      ${this.name} --id 28beab62-7540-4db1-a23f-29a6018a3848 --members "DebraB@contoso.onmicrosoft.com,DiegoS@contoso.onmicrosoft.com"

    Update Office 365 Group logo
      ${this.name} --id 28beab62-7540-4db1-a23f-29a6018a3848 --logoPath images/logo.png
`);
    }
}
AadO365GroupSetCommand.numRepeat = 15;
module.exports = new AadO365GroupSetCommand();
//# sourceMappingURL=o365group-set.js.map