"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const Utils_1 = require("../../../../Utils");
const GraphCommand_1 = require("../../../base/GraphCommand");
const vorpal = require('../../../../vorpal-init');
class AadGroupSettingRemoveCommand extends GraphCommand_1.default {
    get name() {
        return commands_1.default.GROUPSETTING_REMOVE;
    }
    get description() {
        return 'Removes the particular group setting';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.confirm = (!(!args.options.confirm)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const removeGroupSetting = () => {
            if (this.verbose) {
                cmd.log(`Removing group setting: ${args.options.id}...`);
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/groupSettings/${args.options.id}`,
                headers: {
                    'accept': 'application/json;odata.metadata=none'
                },
            };
            request_1.default
                .delete(requestOptions)
                .then(() => {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
                cb();
            }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
        };
        if (args.options.confirm) {
            removeGroupSetting();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to remove the group setting ${args.options.id}?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeGroupSetting();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '-i, --id <id>',
                description: 'The ID of the group setting to remove'
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming removing the group setting'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.id) {
                return 'Required option id missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:
  
    If the specified ${chalk.grey('id')} doesn't refer to an existing group setting, you will
    get a ${chalk.grey('Resource does not exist')} error.

  Examples:

    Remove group setting with ID ${chalk.grey('28beab62-7540-4db1-a23f-29a6018a3848')}.
    Will prompt for confirmation before removing the group setting
      ${this.name} --id 28beab62-7540-4db1-a23f-29a6018a3848

    Remove group setting with ID ${chalk.grey('28beab62-7540-4db1-a23f-29a6018a3848')} without
    prompting for confirmation
      ${this.name} --id 28beab62-7540-4db1-a23f-29a6018a3848 --confirm
  `);
    }
}
module.exports = new AadGroupSettingRemoveCommand();
//# sourceMappingURL=groupsetting-remove.js.map