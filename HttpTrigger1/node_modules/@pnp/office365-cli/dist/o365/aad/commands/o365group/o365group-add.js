"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const fs = require("fs");
const path = require("path");
const GraphCommand_1 = require("../../../base/GraphCommand");
const vorpal = require('../../../../vorpal-init');
class AadO365GroupAddCommand extends GraphCommand_1.default {
    get name() {
        return commands_1.default.O365GROUP_ADD;
    }
    get description() {
        return 'Creates Office 365 Group';
    }
    commandAction(cmd, args, cb) {
        let group;
        if (this.verbose) {
            cmd.log(`Creating Office 365 Group...`);
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/groups`,
            headers: {
                'accept': 'application/json;odata.metadata=none'
            },
            json: true,
            body: {
                description: args.options.description,
                displayName: args.options.displayName,
                groupTypes: [
                    "Unified"
                ],
                mailEnabled: true,
                mailNickname: args.options.mailNickname,
                securityEnabled: false,
                visibility: args.options.isPrivate == 'true' ? 'Private' : 'Public'
            }
        };
        request_1.default
            .post(requestOptions)
            .then((res) => {
            group = res;
            if (!args.options.logoPath) {
                if (this.debug) {
                    cmd.log('logoPath not set. Skipping');
                }
                return Promise.resolve();
            }
            const fullPath = path.resolve(args.options.logoPath);
            if (this.verbose) {
                cmd.log(`Setting group logo ${fullPath}...`);
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/groups/${group.id}/photo/$value`,
                headers: {
                    'content-type': this.getImageContentType(fullPath)
                },
                body: fs.readFileSync(fullPath)
            };
            return new Promise((resolve, reject) => {
                this.setGroupLogo(requestOptions, AadO365GroupAddCommand.numRepeat, resolve, reject, cmd);
            });
        })
            .then(() => {
            if (!args.options.owners) {
                if (this.debug) {
                    cmd.log('Owners not set. Skipping');
                }
                return Promise.resolve(undefined);
            }
            const owners = args.options.owners.split(',').map(o => o.trim());
            if (this.verbose) {
                cmd.log('Retrieving user information to set group owners...');
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/users?$filter=${owners.map(o => `userPrincipalName eq '${o}'`).join(' or ')}&$select=id`,
                headers: {
                    'content-type': 'application/json'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })
            .then((res) => {
            if (!res) {
                return Promise.resolve();
            }
            return Promise.all(res.value.map(u => request_1.default.post({
                url: `${this.resource}/v1.0/groups/${group.id}/owners/$ref`,
                headers: {
                    'content-type': 'application/json'
                },
                json: true,
                body: {
                    "@odata.id": `https://graph.microsoft.com/v1.0/users/${u.id}`
                }
            })));
        })
            .then(() => {
            if (!args.options.members) {
                if (this.debug) {
                    cmd.log('Members not set. Skipping');
                }
                return Promise.resolve(undefined);
            }
            const members = args.options.members.split(',').map(o => o.trim());
            if (this.verbose) {
                cmd.log('Retrieving user information to set group members...');
            }
            const requestOptions = {
                url: `${this.resource}/v1.0/users?$filter=${members.map(o => `userPrincipalName eq '${o}'`).join(' or ')}&$select=id`,
                headers: {
                    'content-type': 'application/json'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })
            .then((res) => {
            if (!res) {
                return Promise.resolve();
            }
            return Promise.all(res.value.map(u => request_1.default.post({
                url: `${this.resource}/v1.0/groups/${group.id}/members/$ref`,
                headers: {
                    'content-type': 'application/json'
                },
                json: true,
                body: {
                    "@odata.id": `https://graph.microsoft.com/v1.0/users/${u.id}`
                }
            })));
        })
            .then(() => {
            cmd.log(group);
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
    }
    setGroupLogo(requestOptions, retryLeft, resolve, reject, cmd) {
        request_1.default
            .put(requestOptions)
            .then((res) => {
            resolve();
        }, (err) => {
            if (--retryLeft > 0) {
                setTimeout(() => {
                    this.setGroupLogo(requestOptions, retryLeft, resolve, reject, cmd);
                }, 500 * (AadO365GroupAddCommand.numRepeat - retryLeft));
            }
            else {
                reject(err);
            }
        });
    }
    getImageContentType(imagePath) {
        let extension = imagePath.substr(imagePath.lastIndexOf('.')).toLowerCase();
        switch (extension) {
            case '.png':
                return 'image/png';
            case '.gif':
                return 'image/gif';
            default:
                return 'image/jpeg';
        }
    }
    options() {
        const options = [
            {
                option: '-n, --displayName <displayName>',
                description: 'Display name for the Office 365 Group'
            },
            {
                option: '-d, --description <description>',
                description: 'Description for the Office 365 Group'
            },
            {
                option: '-m, --mailNickname <mailNickname>',
                description: 'Name to use in the group e-mail (part before the @)'
            },
            {
                option: '--owners [owners]',
                description: 'Comma-separated list of Office 365 Group owners'
            },
            {
                option: '--members [members]',
                description: 'Comma-separated list of Office 365 Group members'
            },
            {
                option: '--isPrivate [isPrivate]',
                description: 'Set to true if the Office 365 Group should be private and to false if it should be public (default)'
            },
            {
                option: '-l, --logoPath [logoPath]',
                description: 'Local path to the image file to use as group logo'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.displayName) {
                return 'Required option displayName missing';
            }
            if (!args.options.description) {
                return 'Required option description missing';
            }
            if (!args.options.mailNickname) {
                return 'Required option mailNickname missing';
            }
            if (args.options.owners) {
                let owners = args.options.owners.split(',').map(o => o.trim());
                for (let i = 0; i < owners.length; i++) {
                    if (owners[i].indexOf('@') < 0) {
                        return `${owners[i]} is not a valid userPrincipalName`;
                    }
                }
            }
            if (args.options.members) {
                let members = args.options.members.split(',').map(m => m.trim());
                for (let i = 0; i < members.length; i++) {
                    if (members[i].indexOf('@') < 0) {
                        return `${members[i]} is not a valid userPrincipalName`;
                    }
                }
            }
            if (typeof args.options.isPrivate !== 'undefined' &&
                args.options.isPrivate !== 'true' &&
                args.options.isPrivate !== 'false') {
                return `${args.options.isPrivate} is not a valid boolean value`;
            }
            if (args.options.logoPath) {
                const fullPath = path.resolve(args.options.logoPath);
                if (!fs.existsSync(fullPath)) {
                    return `File '${fullPath}' not found`;
                }
                if (fs.lstatSync(fullPath).isDirectory()) {
                    return `Path '${fullPath}' points to a directory`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    When specifying the path to the logo image you can use both relative and
    absolute paths. Note, that ~ in the path, will not be resolved and will most
    likely result in an error.

  Examples:

    Create a public Office 365 Group
      ${this.name} --displayName Finance --description 'This is the Contoso Finance Group. Please come here and check out the latest news, posts, files, and more.' --mailNickname finance

    Create a private Office 365 Group
      ${this.name} --displayName Finance --description 'This is the Contoso Finance Group. Please come here and check out the latest news, posts, files, and more.' --mailNickname finance --isPrivate true

    Create a public Office 365 Group and set specified users as its owners
      ${this.name} --displayName Finance --description 'This is the Contoso Finance Group. Please come here and check out the latest news, posts, files, and more.' --mailNickname finance --owners "DebraB@contoso.onmicrosoft.com,DiegoS@contoso.onmicrosoft.com"

    Create a public Office 365 Group and set specified users as its members
      ${this.name} --displayName Finance --description 'This is the Contoso Finance Group. Please come here and check out the latest news, posts, files, and more.' --mailNickname finance --members "DebraB@contoso.onmicrosoft.com,DiegoS@contoso.onmicrosoft.com"

    Create a public Office 365 Group and set its logo
      ${this.name} --displayName Finance --description 'This is the Contoso Finance Group. Please come here and check out the latest news, posts, files, and more.' --mailNickname finance --logoPath images/logo.png
`);
    }
}
AadO365GroupAddCommand.numRepeat = 15;
module.exports = new AadO365GroupAddCommand();
//# sourceMappingURL=o365group-add.js.map