"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const Utils_1 = require("../../../../Utils");
const GraphCommand_1 = require("../../../base/GraphCommand");
const vorpal = require('../../../../vorpal-init');
class AadUserGetCommand extends GraphCommand_1.default {
    get name() {
        return `${commands_1.default.USER_GET}`;
    }
    get description() {
        return 'Gets information about the specified user';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.id = typeof args.options.id !== 'undefined';
        telemetryProps.userName = typeof args.options.userName !== 'undefined';
        telemetryProps.properties = args.options.properties;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const properties = args.options.properties ?
            `?$select=${args.options.properties.split(',').map(p => encodeURIComponent(p.trim())).join(',')}` :
            '';
        const requestOptions = {
            url: `${this.resource}/v1.0/users/${encodeURIComponent(args.options.id ? args.options.id : args.options.userName)}${properties}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            cmd.log(res);
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --id [id]',
                description: 'The ID of the user to retrieve information for. Specify id or userName but not both'
            },
            {
                option: '-n, --userName [userName]',
                description: 'The name of the user to retrieve information for. Specify id or userName but not both'
            },
            {
                option: '-p, --properties [properties]',
                description: 'Comma-separated list of properties to retrieve'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.id && !args.options.userName) {
                return 'Specify either id or userName';
            }
            if (args.options.id && args.options.userName) {
                return 'Specify either id or userName but not both';
            }
            if (args.options.id &&
                !Utils_1.default.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    You can retrieve information about a user, either by specifying that user's
    id or user name (${chalk.grey(`userPrincipalName`)}), but not both.

    If the user with the specified id or user name doesn't exist, you will get
    a ${chalk.grey(`Resource 'xyz' does not exist or one of its queried reference-property`)}
    ${chalk.grey(`objects are not present.`)} error.

  Examples:

    Get information about the user with id ${chalk.grey(`1caf7dcd-7e83-4c3a-94f7-932a1299c844`)}
      ${this.name} --id 1caf7dcd-7e83-4c3a-94f7-932a1299c844

    Get information about the user with user name ${chalk.grey(`AarifS@contoso.onmicrosoft.com`)}
      ${this.name} --userName AarifS@contoso.onmicrosoft.com

    For the user with id ${chalk.grey(`1caf7dcd-7e83-4c3a-94f7-932a1299c844`)}
    retrieve the user name, e-mail address and full name
      ${this.name} --id 1caf7dcd-7e83-4c3a-94f7-932a1299c844 --properties "userPrincipalName,mail,displayName"

  More information:

    Microsoft Graph User properties
      https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/resources/user#properties
`);
    }
}
module.exports = new AadUserGetCommand();
//# sourceMappingURL=user-get.js.map