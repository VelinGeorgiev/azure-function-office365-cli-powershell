"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PeriodBasedReport_1 = require("./PeriodBasedReport");
const path = require("path");
const fs = require("fs");
class DateAndPeriodBasedReport extends PeriodBasedReport_1.default {
    commandAction(cmd, args, cb) {
        const periodParameter = args.options.period ? `${this.usageEndpoint}(period='${encodeURIComponent(args.options.period)}')` : '';
        const dateParameter = args.options.date ? `${this.usageEndpoint}(date=${encodeURIComponent(args.options.date)})` : '';
        const endpoint = `${this.resource}/v1.0/reports/${(args.options.period ? periodParameter : dateParameter)}`;
        this.executeReport(endpoint, cmd, args.options.output, args.options.outputFile, cb);
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.period = args.options.period;
        telemetryProps.date = typeof args.options.date !== 'undefined';
        return telemetryProps;
    }
    options() {
        const options = [
            {
                option: '-d, --date [date]',
                description: 'The date for which you would like to view the users who performed any activity. Supported date format is YYYY-MM-DD. Specify the date or period, but not both.'
            }
        ];
        const parentOptions = super.options();
        // period is optional in this command
        for (let index = 0; index < parentOptions.length; index++) {
            parentOptions[index].option = parentOptions[index].option.replace("-p, --period <period>", "-p, --period [period]");
        }
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.period && !args.options.date) {
                return 'Specify period or date, one is required.';
            }
            if (args.options.outputFile && !fs.existsSync(path.dirname(args.options.outputFile))) {
                return `The specified path ${path.dirname(args.options.outputFile)} doesn't exist`;
            }
            if (args.options.period && args.options.date) {
                return 'Specify period or date but not both.';
            }
            if (args.options.date && !(args.options.date.match(/^\d{4}-\d{2}-\d{2}$/))) {
                return `${args.options.date} is not a valid date. The supported date format is YYYY-MM-DD`;
            }
            return this.validatePeriod(args.options.period);
        };
    }
}
exports.default = DateAndPeriodBasedReport;
//# sourceMappingURL=DateAndPeriodBasedReport.js.map