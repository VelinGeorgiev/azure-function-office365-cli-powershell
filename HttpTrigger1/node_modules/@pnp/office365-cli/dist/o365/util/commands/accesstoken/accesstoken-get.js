"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const commands_2 = require("../../../commands/commands");
const Command_1 = require("../../../../Command");
const Auth_1 = require("../../../../Auth");
const vorpal = require('../../../../vorpal-init');
class AccessTokenGetCommand extends Command_1.default {
    get name() {
        return `${commands_1.default.UTIL_ACCESSTOKEN_GET}`;
    }
    get description() {
        return 'Gets access token for the specified resource';
    }
    alias() {
        return [commands_2.default.ACCESSTOKEN_GET];
    }
    commandAction(cmd, args, cb) {
        this.showDeprecationWarning(cmd, commands_2.default.ACCESSTOKEN_GET, commands_1.default.UTIL_ACCESSTOKEN_GET);
        Auth_1.default
            .ensureAccessToken(args.options.resource, cmd, this.debug, args.options.new)
            .then((accessToken) => {
            cmd.log(accessToken);
            cb();
        }, (err) => cb(new Command_1.CommandError(err)));
    }
    options() {
        const options = [
            {
                option: '-r, --resource <resource>',
                description: 'The resource for which to retrieve an access token'
            },
            {
                option: '--new',
                description: 'Retrieve a new access token to ensure that it\'s valid for as long as possible'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.resource) {
                return 'Required parameter resource missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:
    
    The ${chalk.blue(this.name)} command returns an access token for the specified
    resource. If an access token has been previously retrieved and is still
    valid, the command will return the cached token. If you want to ensure that
    the returned access token is valid for as long as possible, you can force
    the command to retrieve a new access token by using the ${chalk.grey('--new')} option.
      
  Examples:
  
    Get access token for the Microsoft Graph
      ${this.name} --resource https://graph.microsoft.com

    Get a new access token for SharePoint Online
      ${this.name} --resource https://contoso.sharepoint.com --new
`);
    }
}
module.exports = new AccessTokenGetCommand();
//# sourceMappingURL=accesstoken-get.js.map