"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const YammerCommand_1 = require("../../../base/YammerCommand");
const request_1 = require("../../../../request");
const vorpal = require('../../../../vorpal-init');
class YammerNetworkListCommand extends YammerCommand_1.default {
    get name() {
        return `${commands_1.default.YAMMER_NETWORK_LIST}`;
    }
    get description() {
        return 'Returns a list of networks to which the current user has access';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.includeSuspended = args.options.includeSuspended;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const requestOptions = {
            url: `${this.resource}/v1/networks/current.json`,
            headers: {
                accept: 'application/json;odata.metadata=none',
                'content-type': 'application/json;odata=nometadata'
            },
            json: true,
            body: {
                includeSuspended: args.options.includeSuspended !== undefined && args.options.includeSuspended !== false
            }
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            if (args.options.output === 'json') {
                cmd.log(res);
            }
            else {
                cmd.log(res.map(n => ({ id: n.id, name: n.name, email: n.email, community: n.community, permalink: n.permalink, web_url: n.web_url })));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '--includeSuspended',
                description: 'Include the networks in which the user is suspended'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    ${chalk.yellow('Attention:')} In order to use this command, you need to grant the Azure AD
    application used by the Office 365 CLI the permission to the Yammer API.
    To do this, execute the ${chalk.blue('consent --service yammer')} command.
    
  Examples:
  
    Returns the current user's networks
      ${this.name}

    Returns the current user's networks including the networks in which the user
    is suspended
      ${this.name} --includeSuspended
    `);
    }
}
module.exports = new YammerNetworkListCommand();
//# sourceMappingURL=network-list.js.map