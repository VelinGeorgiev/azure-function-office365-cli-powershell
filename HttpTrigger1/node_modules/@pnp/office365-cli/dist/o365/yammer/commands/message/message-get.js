"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const YammerCommand_1 = require("../../../base/YammerCommand");
const request_1 = require("../../../../request");
const vorpal = require('../../../../vorpal-init');
class YammerMessageGetCommand extends YammerCommand_1.default {
    get name() {
        return `${commands_1.default.YAMMER_MESSAGE_GET}`;
    }
    get description() {
        return 'Returns a Yammer message';
    }
    commandAction(cmd, args, cb) {
        const requestOptions = {
            url: `${this.resource}/v1/messages/${args.options.id}.json`,
            headers: {
                accept: 'application/json;odata.metadata=none',
                'content-type': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            if (args.options.output === 'json') {
                cmd.log(res);
            }
            else {
                cmd.log({
                    id: res.id,
                    sender_id: res.sender_id,
                    replied_to_id: res.replied_to_id,
                    thread_id: res.thread_id,
                    group_id: res.group_id,
                    created_at: res.created_at,
                    direct_message: res.direct_message,
                    system_message: res.system_message,
                    privacy: res.privacy,
                    message_type: res.message_type,
                    content_excerpt: res.content_excerpt
                });
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '--id <id>',
                description: 'The id of the Yammer message'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.id) {
                return 'Required id value is missing';
            }
            if (typeof args.options.id !== 'number') {
                return `${args.options.id} is not a number`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:
  
    ${chalk.yellow('Attention:')} In order to use this command, you need to grant the Azure AD
    application used by the Office 365 CLI the permission to the Yammer API.
    To do this, execute the ${chalk.blue('consent --service yammer')} command.
    
  Examples:
  
    Returns the Yammer message with the id 1239871123
      ${this.name} --id 1239871123

    Returns the Yammer message with the id 1239871123 in JSON format
      ${this.name} --id 1239871123 --output json
    `);
    }
}
module.exports = new YammerMessageGetCommand();
//# sourceMappingURL=message-get.js.map