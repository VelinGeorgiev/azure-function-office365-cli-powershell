"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const YammerCommand_1 = require("../../../base/YammerCommand");
const request_1 = require("../../../../request");
const vorpal = require('../../../../vorpal-init');
class YammerUserGetCommand extends YammerCommand_1.default {
    get name() {
        return `${commands_1.default.YAMMER_USER_GET}`;
    }
    get description() {
        return 'Retrieves the current user or searches for a user by ID or e-mail';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.userId = args.options.userId !== undefined;
        telemetryProps.email = args.options.email !== undefined;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let endPoint = `${this.resource}/v1/users/current.json`;
        if (args.options.userId) {
            endPoint = `${this.resource}/v1/users/${encodeURIComponent(args.options.userId)}.json`;
        }
        else if (args.options.email) {
            endPoint = `${this.resource}/v1/users/by_email.json?email=${encodeURIComponent(args.options.email)}`;
        }
        const requestOptions = {
            url: endPoint,
            headers: {
                accept: 'application/json;odata.metadata=none',
                'content-type': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            if (args.options.output === 'json') {
                cmd.log(res);
            }
            else {
                if (res instanceof Array) {
                    cmd.log(res.map((n) => {
                        const item = {
                            id: n.id,
                            full_name: n.full_name,
                            email: n.email,
                            job_title: n.job_title,
                            state: n.state,
                            url: n.url
                        };
                        return item;
                    }));
                }
                else {
                    cmd.log({ id: res.id, full_name: res.full_name, email: res.email, job_title: res.job_title, state: res.state, url: res.url });
                }
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --userId [userId]',
                description: 'Retrieve a user by ID'
            },
            {
                option: '--email [email]',
                description: 'Retrieve a user by e-mail'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (args.options.userId !== undefined && args.options.email !== undefined) {
                return `You are only allowed to search by ID or e-mail but not both`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks

    ${chalk.yellow('Attention:')} In order to use this command, you need to grant the Azure AD
    application used by the Office 365 CLI the permission to the Yammer API.
    To do this, execute the ${chalk.blue('consent --service yammer')} command.
    
    All operations return a single user object. Operations executed with the
    ${chalk.blue('email')} parameter return an array of user objects.
      
  Examples:
  
    Returns the current user
      ${this.name}

    Returns the user with the ID 1496550697
      ${this.name} --userId 1496550697

    Returns an array of users matching the e-mail john.smith@contoso.com
      ${this.name} --email john.smith@contoso.com

    Returns an array of users matching the e-mail john.smith@contoso.com in
    JSON. The JSON output returns a full user object
      ${this.name} --email john.smith@contoso.com --output json
    `);
    }
}
module.exports = new YammerUserGetCommand();
//# sourceMappingURL=user-get.js.map