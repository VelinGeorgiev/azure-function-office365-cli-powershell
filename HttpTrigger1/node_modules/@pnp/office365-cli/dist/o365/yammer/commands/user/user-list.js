"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const YammerCommand_1 = require("../../../base/YammerCommand");
const request_1 = require("../../../../request");
const vorpal = require('../../../../vorpal-init');
class YammerUserListCommand extends YammerCommand_1.default {
    constructor() {
        super();
        this.items = [];
    }
    get name() {
        return `${commands_1.default.YAMMER_USER_LIST}`;
    }
    get description() {
        return 'Returns users from the current network';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.letter = args.options.letter !== undefined;
        telemetryProps.sortBy = args.options.sortBy !== undefined;
        telemetryProps.reverse = args.options.reverse !== undefined;
        telemetryProps.limit = args.options.limit !== undefined;
        telemetryProps.groupId = args.options.groupId !== undefined;
        return telemetryProps;
    }
    getAllItems(cmd, args, page) {
        return new Promise((resolve, reject) => {
            if (page === 1) {
                this.items = [];
            }
            let endPoint = `${this.resource}/v1/users.json`;
            if (args.options.groupId !== undefined) {
                endPoint = `${this.resource}/v1/users/in_group/${args.options.groupId}.json`;
            }
            endPoint += `?page=${page}`;
            if (args.options.reverse !== undefined) {
                endPoint += `&reverse=true`;
            }
            if (args.options.sortBy !== undefined) {
                endPoint += `&sort_by=${args.options.sortBy}`;
            }
            if (args.options.letter !== undefined) {
                endPoint += `&letter=${args.options.letter}`;
            }
            const requestOptions = {
                url: endPoint,
                headers: {
                    accept: 'application/json;odata.metadata=none',
                    'content-type': 'application/json;odata=nometadata'
                },
                json: true
            };
            request_1.default
                .get(requestOptions)
                .then((res) => {
                let userOutput = res;
                // groups user retrieval returns a user array containing the user objects
                if (res.users) {
                    userOutput = res.users;
                }
                this.items = this.items.concat(userOutput);
                // this is executed once at the end if the limit operation has been executed
                // we need to return the array of the desired size. The API does not provide such a feature
                if (args.options.limit !== undefined && this.items.length > args.options.limit) {
                    this.items = this.items.slice(0, args.options.limit);
                    resolve();
                }
                else {
                    // if the groups endpoint is used, the more_available will tell if a new retrieval is required
                    // if the user endpoint is used, we need to page by 50 items (hardcoded)
                    if (res.more_available === true || this.items.length % 50 === 0) {
                        this.getAllItems(cmd, args, ++page)
                            .then(() => {
                            resolve();
                        }, (err) => {
                            reject(err);
                        });
                    }
                    else {
                        resolve();
                    }
                }
            }, (err) => {
                reject(err);
            });
        });
    }
    ;
    commandAction(cmd, args, cb) {
        this.items = []; // this will reset the items array in interactive mode
        this
            .getAllItems(cmd, args, 1)
            .then(() => {
            if (args.options.output === 'json') {
                cmd.log(this.items);
            }
            else {
                cmd.log(this.items.map((n) => {
                    const item = {
                        id: n.id,
                        full_name: n.full_name,
                        email: n.email
                    };
                    return item;
                }));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    ;
    options() {
        const options = [
            {
                option: '-g, --groupId [groupId]',
                description: 'Returns users within a given group'
            },
            {
                option: '-l, --letter [letter]',
                description: 'Returns users with usernames beginning with the given character'
            },
            {
                option: '--reverse',
                description: 'Returns users in reverse sorting order'
            },
            {
                option: '--limit [limit]',
                description: 'Limits the users returned'
            },
            {
                option: '--sortBy [sortBy]',
                description: 'Returns users sorted by a number of messages or followers, instead of the default behavior of sorting alphabetically. Allowed values are messages,followers',
                autocomplete: ['messages', 'followers']
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (args.options.groupId && typeof args.options.groupId !== 'number') {
                return `${args.options.groupId} is not a number`;
            }
            if (args.options.limit && typeof args.options.limit !== 'number') {
                return `${args.options.limit} is not a number`;
            }
            if (args.options.sortBy && args.options.sortBy !== 'messages' && args.options.sortBy !== 'followers') {
                return `sortBy accepts only the values "messages" or "followers"`;
            }
            if (args.options.letter && !/^(?!\d)[a-zA-Z]+$/i.test(args.options.letter)) {
                return `Value of 'letter' is invalid. Only characters within the ranges [A - Z], [a - z] are allowed.`;
            }
            if (args.options.letter && args.options.letter.length !== 1) {
                return `Only one char as value of 'letter' accepted.`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:
  
    ${chalk.yellow('Attention:')} In order to use this command, you need to grant the Azure AD
    application used by the Office 365 CLI the permission to the Yammer API.
    To do this, execute the ${chalk.blue('consent --service yammer')} command.
    
  Examples:
    
    Returns all Yammer network users
      ${this.name}

    Returns all Yammer network users with usernames beginning with "a"
      ${this.name} --letter a

    Returns all Yammer network users sorted alphabetically in descending order
      ${this.name} --reverse

    Returns the first 10 Yammer network users within the group 5785177.
      ${this.name} --groupId 5785177 --limit 10
    `);
    }
}
module.exports = new YammerUserListCommand();
//# sourceMappingURL=user-list.js.map