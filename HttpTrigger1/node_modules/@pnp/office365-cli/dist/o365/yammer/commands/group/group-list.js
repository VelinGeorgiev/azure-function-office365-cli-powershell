"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const YammerCommand_1 = require("../../../base/YammerCommand");
const request_1 = require("../../../../request");
const vorpal = require('../../../../vorpal-init');
class YammerGroupListCommand extends YammerCommand_1.default {
    constructor() {
        super();
        this.items = [];
    }
    get name() {
        return `${commands_1.default.YAMMER_GROUP_LIST}`;
    }
    get description() {
        return 'Returns the list of groups in a Yammer network or the groups for a specific user';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.userId = args.options.userId !== undefined;
        telemetryProps.limit = args.options.limit !== undefined;
        return telemetryProps;
    }
    getAllItems(cmd, args, page) {
        return new Promise((resolve, reject) => {
            let endpoint = `${this.resource}/v1`;
            if (args.options.userId) {
                endpoint += `/groups/for_user/${args.options.userId}.json`;
            }
            else {
                endpoint += `/groups.json`;
            }
            endpoint += `?page=${page}`;
            const requestOptions = {
                url: endpoint,
                headers: {
                    accept: 'application/json;odata.metadata=none',
                    'content-type': 'application/json;odata=nometadata'
                },
                json: true
            };
            request_1.default
                .get(requestOptions)
                .then((res) => {
                this.items = this.items.concat(res);
                if (args.options.limit && this.items.length > args.options.limit) {
                    this.items = this.items.slice(0, args.options.limit);
                    resolve();
                }
                else {
                    // we need to page by 50 items (hardcoded)
                    if (this.items.length % 50 === 0) {
                        this
                            .getAllItems(cmd, args, ++page)
                            .then(() => {
                            resolve();
                        }, (err) => {
                            reject(err);
                        });
                    }
                    else {
                        resolve();
                    }
                }
            }, (err) => {
                reject(err);
            });
        });
    }
    ;
    commandAction(cmd, args, cb) {
        this.items = []; // this will reset the items array in interactive mode
        this
            .getAllItems(cmd, args, 1)
            .then(() => {
            if (args.options.output === 'json') {
                cmd.log(this.items);
            }
            else {
                cmd.log(this.items.map((n) => {
                    const item = {
                        id: n.id,
                        name: n.name,
                        email: n.email,
                        privacy: n.privacy,
                        external: n.external,
                        moderated: n.moderated
                    };
                    return item;
                }));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    ;
    options() {
        const options = [
            {
                option: '--userId [userId]',
                description: 'Returns the groups for a specific user'
            },
            {
                option: '--limit [limit]',
                description: 'Limits the groups returned'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (args.options.userId && typeof args.options.userId !== 'number') {
                return `${args.options.userId} is not a number`;
            }
            if (args.options.limit && typeof args.options.limit !== 'number') {
                return `${args.options.limit} is not a number`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:
  
    ${chalk.yellow('Attention:')} In order to use this command, you need to grant the Azure AD
    application used by the Office 365 CLI the permission to the Yammer API.
    To do this, execute the ${chalk.blue('consent --service yammer')} command.

  Examples:
    
    Returns all Yammer network groups
      ${this.name}
    
    Returns all Yammer network groups for the user with the ID ${chalk.grey('5611239081')}
      ${this.name} --userId 5611239081

    Returns the first 10 Yammer network groups
      ${this.name} --limit 10

    Returns the first 10 Yammer network groups for the user with the ID ${chalk.grey('5611239081')}
      ${this.name} --userId 5611239081 --limit 10
`);
    }
}
module.exports = new YammerGroupListCommand();
//# sourceMappingURL=group-list.js.map