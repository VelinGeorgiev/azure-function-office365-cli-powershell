"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Rule_1 = require("./Rule");
const semver_1 = require("semver");
class DependencyRule extends Rule_1.Rule {
    constructor(packageName, packageVersion, isDevDep = false, isOptional = false, add = true) {
        super();
        this.packageName = packageName;
        this.packageVersion = packageVersion;
        this.isDevDep = isDevDep;
        this.isOptional = isOptional;
        this.add = add;
    }
    get title() {
        return this.packageName;
    }
    get description() {
        return `${(this.add ? 'Upgrade' : 'Remove')} SharePoint Framework ${(this.isDevDep ? 'dev ' : '')}dependency package ${this.packageName}`;
    }
    ;
    get resolution() {
        return this.add ?
            `${(this.isDevDep ? 'installDev' : 'install')} ${this.packageName}@${this.packageVersion}` :
            `${(this.isDevDep ? 'uninstallDev' : 'uninstall')} ${this.packageName}`;
    }
    ;
    get resolutionType() {
        return 'cmd';
    }
    ;
    get severity() {
        return 'Required';
    }
    ;
    get file() {
        return './package.json';
    }
    ;
    customCondition(project) {
        return false;
    }
    visit(project, findings) {
        if (!project.packageJson) {
            return;
        }
        const projectDependencies = this.isDevDep ? project.packageJson.devDependencies : project.packageJson.dependencies;
        const versionEntry = projectDependencies ? projectDependencies[this.packageName] : '';
        const packageVersion = semver_1.valid(versionEntry);
        const versionRange = semver_1.validRange(versionEntry);
        if (this.add) {
            if (versionEntry) {
                if (packageVersion) {
                    if (semver_1.lt(packageVersion, this.packageVersion)) {
                        this.addFinding(findings);
                    }
                }
                else {
                    if (versionRange) {
                        this.addFinding(findings);
                    }
                }
            }
            else {
                if (!this.isOptional || this.customCondition(project)) {
                    this.addFindingWithCustomInfo(this.packageName, this.description.replace('Upgrade', 'Install'), [{
                            file: this.file,
                            resolution: this.resolution
                        }], findings);
                }
            }
        }
        else {
            if (versionEntry) {
                this.addFinding(findings);
            }
        }
    }
}
exports.DependencyRule = DependencyRule;
//# sourceMappingURL=DependencyRule.js.map