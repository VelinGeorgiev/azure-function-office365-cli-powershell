"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Command_1 = require("../../../../Command");
const model_1 = require("./model");
const project_upgrade_1 = require("./project-upgrade/");
const path = require("path");
const fs = require("fs");
class BaseProjectCommand extends Command_1.default {
    constructor() {
        super(...arguments);
        this.projectRootPath = null;
    }
    getProject(projectRootPath) {
        const project = {
            path: projectRootPath
        };
        const configJsonPath = path.join(projectRootPath, 'config/config.json');
        if (fs.existsSync(configJsonPath)) {
            try {
                project.configJson = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(configJsonPath, 'utf-8')));
            }
            catch (_a) { }
        }
        const copyAssetsJsonPath = path.join(projectRootPath, 'config/copy-assets.json');
        if (fs.existsSync(copyAssetsJsonPath)) {
            try {
                project.copyAssetsJson = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(copyAssetsJsonPath, 'utf-8')));
            }
            catch (_b) { }
        }
        const deployAzureStorageJsonPath = path.join(projectRootPath, 'config/deploy-azure-storage.json');
        if (fs.existsSync(deployAzureStorageJsonPath)) {
            try {
                project.deployAzureStorageJson = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(deployAzureStorageJsonPath, 'utf-8')));
            }
            catch (_c) { }
        }
        const packageJsonPath = path.join(projectRootPath, 'package.json');
        if (fs.existsSync(packageJsonPath)) {
            try {
                project.packageJson = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(packageJsonPath, 'utf-8')));
            }
            catch (_d) { }
        }
        const packageSolutionJsonPath = path.join(projectRootPath, 'config/package-solution.json');
        if (fs.existsSync(packageSolutionJsonPath)) {
            try {
                project.packageSolutionJson = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(packageSolutionJsonPath, 'utf-8')));
            }
            catch (_e) { }
        }
        const serveJsonPath = path.join(projectRootPath, 'config/serve.json');
        if (fs.existsSync(serveJsonPath)) {
            try {
                project.serveJson = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(serveJsonPath, 'utf-8')));
            }
            catch (_f) { }
        }
        const tsConfigJsonPath = path.join(projectRootPath, 'tsconfig.json');
        if (fs.existsSync(tsConfigJsonPath)) {
            try {
                project.tsConfigJson = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(tsConfigJsonPath, 'utf-8')));
            }
            catch (_g) { }
        }
        const tsLintJsonPath = path.join(projectRootPath, 'config/tslint.json');
        if (fs.existsSync(tsLintJsonPath)) {
            try {
                project.tsLintJson = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(tsLintJsonPath, 'utf-8')));
            }
            catch (_h) { }
        }
        const tsLintJsonRootPath = path.join(projectRootPath, 'tslint.json');
        if (fs.existsSync(tsLintJsonRootPath)) {
            try {
                project.tsLintJsonRoot = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(tsLintJsonRootPath, 'utf-8')));
            }
            catch (_j) { }
        }
        const writeManifestJsonPath = path.join(projectRootPath, 'config/write-manifests.json');
        if (fs.existsSync(writeManifestJsonPath)) {
            try {
                project.writeManifestsJson = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(writeManifestJsonPath, 'utf-8')));
            }
            catch (_k) { }
        }
        const yoRcJsonPath = path.join(projectRootPath, '.yo-rc.json');
        if (fs.existsSync(yoRcJsonPath)) {
            try {
                project.yoRcJson = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(yoRcJsonPath, 'utf-8')));
            }
            catch (_l) { }
        }
        const gulpfileJsPath = path.join(projectRootPath, 'gulpfile.js');
        if (fs.existsSync(gulpfileJsPath)) {
            project.gulpfileJs = {
                src: fs.readFileSync(gulpfileJsPath, 'utf-8')
            };
        }
        project.vsCode = {};
        const vsCodeSettingsPath = path.join(projectRootPath, '.vscode', 'settings.json');
        if (fs.existsSync(vsCodeSettingsPath)) {
            try {
                project.vsCode.settingsJson = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(vsCodeSettingsPath, 'utf-8')));
            }
            catch (_m) { }
        }
        const vsCodeExtensionsPath = path.join(projectRootPath, '.vscode', 'extensions.json');
        if (fs.existsSync(vsCodeExtensionsPath)) {
            try {
                project.vsCode.extensionsJson = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(vsCodeExtensionsPath, 'utf-8')));
            }
            catch (_o) { }
        }
        const vsCodeLaunchPath = path.join(projectRootPath, '.vscode', 'launch.json');
        if (fs.existsSync(vsCodeLaunchPath)) {
            try {
                project.vsCode.launchJson = JSON.parse(project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(vsCodeLaunchPath, 'utf-8')));
            }
            catch (_p) { }
        }
        const srcFiles = project_upgrade_1.Utils.getAllFiles(path.join(projectRootPath, 'src'));
        const manifestFiles = srcFiles.filter(f => f.endsWith('.manifest.json'));
        const manifests = manifestFiles.map((f) => {
            const manifestStr = project_upgrade_1.Utils.removeSingleLineComments(fs.readFileSync(f, 'utf-8'));
            const manifest = JSON.parse(manifestStr);
            manifest.path = f;
            return manifest;
        });
        project.manifests = manifests;
        const tsFiles = srcFiles.filter(f => f.endsWith('.ts') || f.endsWith('.tsx'));
        project.tsFiles = tsFiles.map(f => new model_1.TsFile(f));
        const scssFiles = srcFiles.filter(f => f.endsWith('.scss'));
        project.scssFiles = scssFiles.map(f => new model_1.ScssFile(f));
        return project;
    }
    getProjectRoot(folderPath) {
        const packageJsonPath = path.resolve(folderPath, 'package.json');
        if (fs.existsSync(packageJsonPath)) {
            return folderPath;
        }
        else {
            const parentPath = path.resolve(folderPath, `..${path.sep}`);
            if (parentPath !== folderPath) {
                return this.getProjectRoot(parentPath);
            }
            else {
                return null;
            }
        }
    }
    getProjectVersion() {
        const yoRcPath = path.resolve(this.projectRootPath, '.yo-rc.json');
        if (fs.existsSync(yoRcPath)) {
            try {
                const yoRc = JSON.parse(fs.readFileSync(yoRcPath, 'utf-8'));
                if (yoRc && yoRc['@microsoft/generator-sharepoint'] &&
                    yoRc['@microsoft/generator-sharepoint'].version) {
                    return yoRc['@microsoft/generator-sharepoint'].version;
                }
            }
            catch (_a) { }
        }
        const packageJsonPath = path.resolve(this.projectRootPath, 'package.json');
        try {
            const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
            if (packageJson &&
                packageJson.dependencies &&
                packageJson.dependencies['@microsoft/sp-core-library']) {
                const coreLibVersion = packageJson.dependencies['@microsoft/sp-core-library'];
                return coreLibVersion.replace(/[^0-9\.]/g, '');
            }
        }
        catch (_b) { }
        return undefined;
    }
}
exports.BaseProjectCommand = BaseProjectCommand;
//# sourceMappingURL=base-project-command.js.map