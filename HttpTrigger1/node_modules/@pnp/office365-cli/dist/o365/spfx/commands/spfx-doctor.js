"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../commands");
const Command_1 = require("../../../Command");
const child_process = require("child_process");
const AnonymousCommand_1 = require("../../base/AnonymousCommand");
const semver_1 = require("semver");
const vorpal = require('../../../vorpal-init');
/**
 * Has the particular check passed or failed
 */
var CheckStatus;
(function (CheckStatus) {
    CheckStatus[CheckStatus["Success"] = 0] = "Success";
    CheckStatus[CheckStatus["Failure"] = 1] = "Failure";
})(CheckStatus || (CheckStatus = {}));
/**
 * Where to search for the particular npm package: only in the current project,
 * in global packages or both
 */
var PackageSearchMode;
(function (PackageSearchMode) {
    PackageSearchMode[PackageSearchMode["LocalOnly"] = 0] = "LocalOnly";
    PackageSearchMode[PackageSearchMode["GlobalOnly"] = 1] = "GlobalOnly";
    PackageSearchMode[PackageSearchMode["LocalAndGlobal"] = 2] = "LocalAndGlobal";
})(PackageSearchMode || (PackageSearchMode = {}));
/**
 * Is the particular check optional or required
 */
var OptionalOrRequired;
(function (OptionalOrRequired) {
    OptionalOrRequired[OptionalOrRequired["Optional"] = 0] = "Optional";
    OptionalOrRequired[OptionalOrRequired["Required"] = 1] = "Required";
})(OptionalOrRequired || (OptionalOrRequired = {}));
/**
 * Should the method continue or fail on a rejected Promise
 */
var HandlePromise;
(function (HandlePromise) {
    HandlePromise[HandlePromise["Fail"] = 0] = "Fail";
    HandlePromise[HandlePromise["Continue"] = 1] = "Continue";
})(HandlePromise || (HandlePromise = {}));
/**
 * Versions of SharePoint that support SharePoint Framework
 */
var SharePointVersion;
(function (SharePointVersion) {
    SharePointVersion[SharePointVersion["SP2016"] = 1] = "SP2016";
    SharePointVersion[SharePointVersion["SP2019"] = 2] = "SP2019";
    SharePointVersion[SharePointVersion["SPO"] = 4] = "SPO";
    SharePointVersion[SharePointVersion["All"] = 7] = "All";
})(SharePointVersion || (SharePointVersion = {}));
class SpfxDoctorCommand extends AnonymousCommand_1.default {
    constructor() {
        super(...arguments);
        this.versions = {
            '1.0.0': {
                node: {
                    range: '^6.0.0',
                    fix: 'Install Node.js v6'
                },
                npm: {
                    range: '^3.0.0',
                    fix: 'npm i -g npm@3'
                },
                react: {
                    range: '^15',
                    fix: 'npm i react@15'
                },
                sp: SharePointVersion.All
            },
            '1.1.0': {
                node: {
                    range: '^6.0.0',
                    fix: 'Install Node.js v6'
                },
                npm: {
                    range: '^3.0.0 || ^4.0.0',
                    fix: 'npm i -g npm@4'
                },
                react: {
                    range: '^15',
                    fix: 'npm i react@15'
                },
                sp: SharePointVersion.All
            },
            '1.2.0': {
                node: {
                    range: '^6.0.0',
                    fix: 'Install Node.js v6'
                },
                npm: {
                    range: '^3.0.0 || ^4.0.0',
                    fix: 'npm i -g npm@4'
                },
                react: {
                    range: '^15',
                    fix: 'npm i react@15'
                },
                sp: SharePointVersion.SP2019 | SharePointVersion.SPO
            },
            '1.4.0': {
                node: {
                    range: '^6.0.0',
                    fix: 'Install Node.js v6'
                },
                npm: {
                    range: '^3.0.0 || ^4.0.0',
                    fix: 'npm i -g npm@4'
                },
                react: {
                    range: '^15',
                    fix: 'npm i react@15'
                },
                sp: SharePointVersion.SP2019 | SharePointVersion.SPO
            },
            '1.4.1': {
                node: {
                    range: '^6.0.0 || ^8.0.0',
                    fix: 'Install Node.js v8'
                },
                npm: {
                    range: '^3.0.0 || ^4.0.0',
                    fix: 'npm i -g npm@4'
                },
                react: {
                    range: '^15',
                    fix: 'npm i react@15'
                },
                sp: SharePointVersion.SP2019 | SharePointVersion.SPO
            },
            '1.5.0': {
                node: {
                    range: '^6.0.0 || ^8.0.0',
                    fix: 'Install Node.js v8'
                },
                npm: {
                    range: '^3.0.0',
                    fix: 'npm i -g npm@3'
                },
                react: {
                    range: '^15',
                    fix: 'npm i react@15'
                },
                sp: SharePointVersion.SPO
            },
            '1.5.1': {
                node: {
                    range: '^6.0.0 || ^8.0.0',
                    fix: 'Install Node.js v8'
                },
                npm: {
                    range: '^5.0.0',
                    fix: 'npm i -g npm@5'
                },
                react: {
                    range: '^15',
                    fix: 'npm i react@15'
                },
                sp: SharePointVersion.SPO
            },
            '1.6.0': {
                node: {
                    range: '^6.0.0 || ^8.0.0',
                    fix: 'Install Node.js v8'
                },
                npm: {
                    range: '^5.0.0',
                    fix: 'npm i -g npm@5'
                },
                react: {
                    range: '^15',
                    fix: 'npm i react@15'
                },
                sp: SharePointVersion.SPO
            },
            '1.7.0': {
                node: {
                    range: '^8.0.0',
                    fix: 'Install Node.js v8'
                },
                npm: {
                    range: '^5.0.0 || ^6.0.0',
                    fix: 'npm i -g npm@6'
                },
                react: {
                    range: '16.3.2',
                    fix: 'npm i react@16.3.2'
                },
                sp: SharePointVersion.SPO
            },
            '1.7.1': {
                node: {
                    range: '^8.0.0',
                    fix: 'Install Node.js v8'
                },
                npm: {
                    range: '^5.0.0 || ^6.0.0',
                    fix: 'npm i -g npm@6'
                },
                react: {
                    range: '16.3.2',
                    fix: 'npm i react@16.3.2'
                },
                sp: SharePointVersion.SPO
            },
            '1.8.0': {
                node: {
                    range: '^8.0.0',
                    fix: 'Install Node.js v8'
                },
                npm: {
                    range: '^5.0.0 || ^6.0.0',
                    fix: 'npm i -g npm@6'
                },
                react: {
                    range: '16.7.0',
                    fix: 'npm i react@16.7.0'
                },
                sp: SharePointVersion.SPO
            },
            '1.8.1': {
                node: {
                    range: '^8.0.0',
                    fix: 'Install Node.js v8'
                },
                npm: {
                    range: '^5.0.0 || ^6.0.0',
                    fix: 'npm i -g npm@6'
                },
                react: {
                    range: '16.7.0',
                    fix: 'npm i react@16.7.0'
                },
                sp: SharePointVersion.SPO
            },
            '1.8.2': {
                node: {
                    range: '^8.0.0 || ^10.0.0',
                    fix: 'Install Node.js v10'
                },
                npm: {
                    range: '^5.0.0 || ^6.0.0',
                    fix: 'npm i -g npm@6'
                },
                react: {
                    range: '16.7.0',
                    fix: 'npm i react@16.7.0'
                },
                sp: SharePointVersion.SPO
            },
            '1.9.0': {
                node: {
                    range: '^8.0.0 || ^10.0.0',
                    fix: 'Install Node.js v10'
                },
                npm: {
                    range: '^5.0.0 || ^6.0.0',
                    fix: 'npm i -g npm@6'
                },
                react: {
                    range: '16.8.5',
                    fix: 'npm i react@16.8.5'
                },
                sp: SharePointVersion.SPO
            },
            '1.9.1': {
                node: {
                    range: '^10.0.0',
                    fix: 'Install Node.js v10'
                },
                npm: {
                    range: '^5.0.0 || ^6.0.0',
                    fix: 'npm i -g npm@6'
                },
                react: {
                    range: '16.8.5',
                    fix: 'npm i react@16.8.5'
                },
                sp: SharePointVersion.SPO
            },
            '1.10.0': {
                node: {
                    range: '^10.0.0',
                    fix: 'Install Node.js v10'
                },
                npm: {
                    range: '^5.0.0 || ^6.0.0',
                    fix: 'npm i -g npm@6'
                },
                react: {
                    range: '16.8.5',
                    fix: 'npm i react@16.8.5'
                },
                sp: SharePointVersion.SPO
            }
        };
    }
    get name() {
        return commands_1.default.DOCTOR;
    }
    get description() {
        return 'Verifies environment configuration for using the specific version of the SharePoint Framework';
    }
    commandAction(cmd, args, cb) {
        cmd.log(' ');
        cmd.log('Office 365 CLI SharePoint Framework doctor');
        cmd.log('Verifying configuration of your system for working with the SharePoint Framework');
        cmd.log(' ');
        let spfxVersion = '';
        let prerequisites;
        const fixes = [];
        this
            .getSharePointFrameworkVersion(cmd)
            .then((_spfxVersion) => {
            if (!_spfxVersion) {
                cmd.log(this.getStatus(CheckStatus.Failure, `SharePoint Framework`));
                return Promise.reject(`SharePoint Framework not found`);
            }
            spfxVersion = _spfxVersion;
            prerequisites = this.versions[spfxVersion];
            if (!prerequisites) {
                cmd.log(this.getStatus(CheckStatus.Failure, `SharePoint Framework v${spfxVersion}`));
                return Promise.reject(`spfx doctor doesn't support SPFx v${spfxVersion} at this moment`);
            }
            cmd.log(this.getStatus(CheckStatus.Success, `SharePoint Framework v${spfxVersion}`));
            return Promise.resolve();
        })
            .then(_ => this.checkSharePointCompatibility(spfxVersion, prerequisites, args, fixes, cmd))
            .then(_ => this.checkNodeVersion(prerequisites, fixes, cmd))
            .then(_ => this.checkNpmVersion(prerequisites, fixes, cmd))
            .then(_ => this.checkYo(fixes, cmd))
            .then(_ => this.checkGulp(fixes, cmd))
            .then(_ => this.checkReact(prerequisites, fixes, cmd))
            .then(_ => this.checkTypeScript(fixes, cmd))
            .then(_ => {
            if (fixes.length > 0) {
                cmd.log(' ');
                cmd.log('Recommended fixes:');
                cmd.log(' ');
                fixes.forEach(f => cmd.log(`- ${f}`));
                cmd.log(' ');
            }
            cb();
        })
            .catch((error) => {
            cmd.log(' ');
            if (fixes.length > 0) {
                cmd.log('Recommended fixes:');
                cmd.log(' ');
                fixes.forEach(f => cmd.log(`- ${f}`));
                cmd.log(' ');
            }
            cb(new Command_1.CommandError(error));
        });
    }
    checkSharePointCompatibility(spfxVersion, prerequisites, args, fixes, cmd) {
        return new Promise((resolve, reject) => {
            if (args.options.env) {
                const sp = this.spVersionStringToEnum(args.options.env);
                if ((prerequisites.sp & sp) === sp) {
                    cmd.log(this.getStatus(CheckStatus.Success, `Supported in ${SharePointVersion[sp]}`));
                    resolve();
                }
                else {
                    cmd.log(this.getStatus(CheckStatus.Failure, `Not supported in ${SharePointVersion[sp]}`));
                    fixes.push(`Use SharePoint Framework v${(sp === SharePointVersion.SP2016 ? '1.1' : '1.4.1')}`);
                    reject(`SharePoint Framework v${spfxVersion} is not supported in ${SharePointVersion[sp]}`);
                }
            }
            else {
                resolve();
            }
        });
    }
    checkNodeVersion(prerequisites, fixes, cmd) {
        return Promise
            .resolve(this.getNodeVersion())
            .then((nodeVersion) => {
            this.checkStatus('Node', nodeVersion, prerequisites.node, OptionalOrRequired.Required, fixes, cmd);
        });
    }
    checkNpmVersion(prerequisites, fixes, cmd) {
        return this
            .getNpmVersion()
            .then((npmVersion) => {
            this.checkStatus('npm', npmVersion, prerequisites.npm, OptionalOrRequired.Required, fixes, cmd);
        }, (error) => {
            cmd.log(this.getStatus(CheckStatus.Failure, error));
            return Promise.reject(error);
        });
    }
    checkYo(fixes, cmd) {
        return this
            .getPackageVersion('yo', PackageSearchMode.GlobalOnly, HandlePromise.Continue, cmd)
            .then((yoVersion) => {
            if (yoVersion) {
                cmd.log(this.getStatus(CheckStatus.Success, `yo v${yoVersion}`));
            }
            else {
                cmd.log(this.getStatus(CheckStatus.Failure, `yo not found`));
                fixes.push('npm i -g yo');
            }
        });
    }
    checkGulp(fixes, cmd) {
        return this
            .getPackageVersion('gulp', PackageSearchMode.GlobalOnly, HandlePromise.Continue, cmd)
            .then((gulpVersion) => {
            if (gulpVersion) {
                cmd.log(this.getStatus(CheckStatus.Success, `gulp v${gulpVersion}`));
            }
            else {
                cmd.log(this.getStatus(CheckStatus.Failure, `gulp not found`));
                fixes.push('npm i -g gulp');
            }
        });
    }
    checkReact(prerequisites, fixes, cmd) {
        return this
            .getPackageVersion('react', PackageSearchMode.LocalOnly, HandlePromise.Continue, cmd)
            .then((reactVersion) => {
            this.checkStatus('react', reactVersion, prerequisites.react, OptionalOrRequired.Optional, fixes, cmd);
        });
    }
    checkTypeScript(fixes, cmd) {
        return this
            .getPackageVersion('typescript', PackageSearchMode.LocalOnly, HandlePromise.Continue, cmd)
            .then((typeScriptVersion) => {
            if (typeScriptVersion) {
                cmd.log(this.getStatus(CheckStatus.Failure, `typescript v${typeScriptVersion} installed in the project`));
                fixes.push('npm un typescript');
            }
            else {
                cmd.log(this.getStatus(CheckStatus.Success, `bundled typescript used`));
            }
        });
    }
    spVersionStringToEnum(sp) {
        return SharePointVersion[sp.toUpperCase()];
    }
    getSharePointFrameworkVersion(cmd) {
        return new Promise((resolve, reject) => {
            if (this.debug) {
                cmd.log('Detecting SharePoint Framework version based on @microsoft/sp-core-library local...');
            }
            this
                .getPackageVersion('@microsoft/sp-core-library', PackageSearchMode.LocalOnly, HandlePromise.Fail, cmd)
                .then((version) => {
                if (this.debug) {
                    cmd.log(`Found @microsoft/sp-core-library@${version}`);
                }
                return Promise.resolve(version);
            })
                .catch(() => {
                if (this.debug) {
                    cmd.log(`@microsoft/sp-core-library not found. Search for @microsoft/generator-sharepoint local or global...`);
                }
                return this.getPackageVersion('@microsoft/generator-sharepoint', PackageSearchMode.LocalAndGlobal, HandlePromise.Fail, cmd);
            })
                .then((version) => {
                resolve(version);
            })
                .catch((error) => {
                if (this.debug) {
                    cmd.log('@microsoft/generator-sharepoint not found');
                }
                if (error && error.indexOf('ENOENT') > -1) {
                    reject('npm not found');
                }
                else {
                    resolve('');
                }
            });
        });
    }
    getPackageVersion(packageName, searchMode, handlePromise, cmd) {
        return new Promise((resolve, reject) => {
            const args = ['ls', packageName, '--depth=0', '--json'];
            if (searchMode === PackageSearchMode.GlobalOnly) {
                args.push('-g');
            }
            this
                .getPackageVersionFromNpm(args, cmd)
                .then((version) => {
                return Promise.resolve(version);
            })
                .catch(() => {
                if (searchMode === PackageSearchMode.LocalAndGlobal) {
                    args.push('-g');
                    return this.getPackageVersionFromNpm(args, cmd);
                }
                else {
                    return Promise.resolve('');
                }
            })
                .then((version) => {
                if (version) {
                    resolve(version);
                }
                else {
                    if (handlePromise === HandlePromise.Continue) {
                        resolve('');
                    }
                    else {
                        reject();
                    }
                }
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    getPackageVersionFromNpm(args, cmd) {
        return new Promise((resolve, reject) => {
            const packageName = args[1];
            if (this.debug) {
                cmd.log(`Executing npm: ${args.join(' ')}...`);
            }
            child_process.execFile(/^win/.test(process.platform) ? 'npm.cmd' : 'npm', args, (err, stdout, stderr) => {
                if (err) {
                    reject(err.message);
                }
                const responseString = stdout;
                try {
                    const packageInfo = JSON.parse(responseString);
                    if (packageInfo.dependencies &&
                        packageInfo.dependencies[packageName]) {
                        resolve(packageInfo.dependencies[packageName].version);
                    }
                    else {
                        reject('Package not found');
                    }
                }
                catch (ex) {
                    return reject(ex);
                }
            });
        });
    }
    getNodeVersion() {
        return process.version.substr(1);
    }
    getNpmVersion() {
        return new Promise((resolve, reject) => {
            child_process.execFile(/^win/.test(process.platform) ? 'npm.cmd' : 'npm', ['-v'], (err, stdout, stderr) => {
                if (err) {
                    return reject('npm not found');
                }
                resolve(stdout.trim());
            });
        });
    }
    checkStatus(what, versionFound, versionCheck, optionalOrRequired, fixes, cmd) {
        if (!versionFound) {
            // TODO: we might need this code in the future if SPFx introduces required
            // prerequisites with a specific version
            // if (optionalOrRequired === OptionalOrRequired.Required) {
            //   cmd.log(this.getStatus(CheckStatus.Failure, `${what} not found, v${versionCheck.range} required`));
            //   fixes.push(versionCheck.fix);
            // }
        }
        else {
            if (semver_1.satisfies(versionFound, versionCheck.range)) {
                cmd.log(this.getStatus(CheckStatus.Success, `${what} v${versionFound}`));
            }
            else {
                cmd.log(this.getStatus(CheckStatus.Failure, `${what} v${versionFound} found, v${versionCheck.range} required`));
                fixes.push(versionCheck.fix);
            }
        }
    }
    getStatus(result, message) {
        const primarySupported = process.platform !== 'win32' ||
            process.env.CI === 'true' ||
            process.env.TERM === 'xterm-256color';
        const success = primarySupported ? '✔' : '√';
        const failure = primarySupported ? '✖' : '×';
        return `${result === CheckStatus.Success ? vorpal.chalk.green(success) : vorpal.chalk.red(failure)} ${message}`;
    }
    options() {
        const options = [
            {
                option: '-e, --env [env]',
                description: 'Version of SharePoint for which to check compatibility: sp2016|sp2019|spo',
                autocomplete: ['sp2016', 'sp2019', 'spo']
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    types() {
        return {
            string: ['e', 'env']
        };
    }
    validate() {
        return (args) => {
            if (args.options.env) {
                const sp = this.spVersionStringToEnum(args.options.env);
                if (!sp) {
                    return `${args.options.env} is not a valid SharePoint version. Valid versions are sp2016, sp2019 or spo`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.DOCTOR).helpInformation());
        log(`  ${chalk.yellow('Important:')} checks ran by this command are based on what is officially
    supported by Microsoft. It's possible that using different package managers
    or packages versions will work just fine.
      
  Remarks:
  
    This commands helps you to verify if your environment meets all
    prerequisites for building solutions using a particular version of the
    SharePoint Framework.

    The command starts by detecting the version of SharePoint Framework that
    you want to use. First, it looks at the current project. If you didn't run
    the command in the context of a SharePoint Framework project, the command
    will try to determine the SharePoint Framework version based on the
    SharePoint Framework Yeoman generator that you have installed either in the
    current directory or globally.

    Based on the determined version of the SharePoint Framework, the command
    will look at other dependencies such as Node.js, npm, Yeoman, Gulp, React
    and TypeScript to verify if their meet the requirements of that particular
    version of the SharePoint Framework.

    If you miss any required tools or use a version that doesn't meet the
    SharePoint Framework requirements, the command will give you a list of
    recommendation how to address these issues.

    Next to verifying the readiness of your environment to use a particular
    version of the SharePoint Framework, you can also check if the version
    of the SharePoint Framework that you use is compatible with the specific
    version of SharePoint. Supported versions are ${chalk.grey('sp2016')}, ${chalk.grey('sp2019')} and ${chalk.grey('spo')}.
    
  Examples:
  
    Verify if your environment meets the requirements to work with
    the SharePoint Framework
      ${this.getCommandName()}

    Verify if your environment meets the requirements to work with
    the SharePoint Framework and also if the version of the SharePoint Framework
    that you're using is compatible with SharePoint 2019
      ${this.getCommandName()} --env sp2019
`);
    }
}
module.exports = new SpfxDoctorCommand();
//# sourceMappingURL=spfx-doctor.js.map