"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const Utils_1 = require("../../../../Utils");
const request_1 = require("../../../../request");
const GraphCommand_1 = require("../../../base/GraphCommand");
const vorpal = require('../../../../vorpal-init');
class TeamsMemberSettingsSetCommand extends GraphCommand_1.default {
    get name() {
        return `${commands_1.default.TEAMS_MEMBERSETTINGS_SET}`;
    }
    get description() {
        return 'Updates member settings of a Microsoft Teams team';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        TeamsMemberSettingsSetCommand.props.forEach(p => {
            telemetryProps[p] = args.options[p];
        });
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const body = {
            memberSettings: {}
        };
        TeamsMemberSettingsSetCommand.props.forEach(p => {
            if (typeof args.options[p] !== 'undefined') {
                body.memberSettings[p] = args.options[p] === 'true';
            }
        });
        const requestOptions = {
            url: `${this.resource}/v1.0/teams/${encodeURIComponent(args.options.teamId)}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            body: body,
            json: true
        };
        request_1.default
            .patch(requestOptions)
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --teamId <teamId>',
                description: 'The ID of the Teams team for which to update settings'
            },
            {
                option: '--allowAddRemoveApps [allowAddRemoveApps]',
                description: 'Set to true to allow members to add and remove apps and to false to disallow it'
            },
            {
                option: '--allowCreateUpdateChannels [allowCreateUpdateChannels]',
                description: 'Set to true to allow members to create and update channels and to false to disallow it'
            },
            {
                option: '--allowCreateUpdateRemoveConnectors [allowCreateUpdateRemoveConnectors]',
                description: 'Set to true to allow members to create, update and remove connectors and to false to disallow it'
            },
            {
                option: '--allowCreateUpdateRemoveTabs [allowCreateUpdateRemoveTabs]',
                description: 'Set to true to allow members to create, update and remove tabs and to false to disallow it'
            },
            {
                option: '--allowDeleteChannels [allowDeleteChannels]',
                description: 'Set to true to allow members to create and update channels and to false to disallow it'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.teamId) {
                return 'Required parameter teamId missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.teamId)) {
                return `${args.options.teamId} is not a valid GUID`;
            }
            let isValid = true;
            let value, property = '';
            TeamsMemberSettingsSetCommand.props.every(p => {
                property = p;
                value = args.options[p];
                isValid = typeof value === 'undefined' ||
                    value === 'true' ||
                    value === 'false';
                return isValid;
            });
            if (!isValid) {
                return `Value ${value} for option ${property} is not a valid boolean`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Allow members to create and edit channels
      ${this.name} --teamId '00000000-0000-0000-0000-000000000000' --allowCreateUpdateChannels true

    Disallow members to add and remove apps
      ${this.name} --teamId '00000000-0000-0000-0000-000000000000' --allowAddRemoveApps false
`);
    }
}
TeamsMemberSettingsSetCommand.props = [
    'allowAddRemoveApps',
    'allowCreateUpdateChannels',
    'allowCreateUpdateRemoveConnectors',
    'allowCreateUpdateRemoveTabs',
    'allowDeleteChannels'
];
module.exports = new TeamsMemberSettingsSetCommand();
//# sourceMappingURL=membersettings-set.js.map