"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const Utils_1 = require("../../../../Utils");
const commands_1 = require("../../commands");
const GraphCommand_1 = require("../../../base/GraphCommand");
const vorpal = require('../../../../vorpal-init');
class TeamsArchiveCommand extends GraphCommand_1.default {
    get name() {
        return `${commands_1.default.TEAMS_TEAM_ARCHIVE}`;
    }
    get description() {
        return 'Archives specified Microsoft Teams team';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.shouldSetSpoSiteReadOnlyForMembers = args.options.shouldSetSpoSiteReadOnlyForMembers === true;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const siteReadOnlyForMembers = args.options.shouldSetSpoSiteReadOnlyForMembers === true;
        const requestOptions = {
            url: `${this.resource}/v1.0/teams/${encodeURIComponent(args.options.teamId)}/archive`,
            headers: {
                'content-type': 'application/json;odata=nometadata',
                'accept': 'application/json;odata.metadata=none'
            },
            json: true,
            body: {
                shouldSetSpoSiteReadOnlyForMembers: siteReadOnlyForMembers
            }
        };
        request_1.default
            .post(requestOptions)
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (res) => this.handleRejectedODataJsonPromise(res, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --teamId <teamId>',
                description: 'The ID of the Microsoft Teams team to archive'
            },
            {
                option: '--shouldSetSpoSiteReadOnlyForMembers',
                description: 'Sets the permissions for team members to read-only on the SharePoint Online site associated with the team'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.teamId) {
                return 'Required parameter teamId missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.teamId)) {
                return `${args.options.teamId} is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    Using this command, global admins and Microsoft Teams service admins can
    access teams that they are not a member of.

    When a team is archived, users can no longer send or like messages on any
    channel in the team, edit the team\'s name, description, or other settings,
    or in general make most changes to the team. Membership changes to the team
    continue to be allowed.

  Examples:
    
    Archive the specified Microsoft Teams team
      ${commands_1.default.TEAMS_TEAM_ARCHIVE} --teamId 6f6fd3f7-9ba5-4488-bbe6-a789004d0d55
    
    Archive the specified Microsoft Teams team and set permissions for team
    members to read-only on the SharePoint Online site associated with the team
      ${commands_1.default.TEAMS_TEAM_ARCHIVE} --teamId 6f6fd3f7-9ba5-4488-bbe6-a789004d0d55 --shouldSetSpoSiteReadOnlyForMembers
    `);
    }
}
module.exports = new TeamsArchiveCommand();
//# sourceMappingURL=team-archive.js.map