"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const Utils_1 = require("../../../../Utils");
const GraphCommand_1 = require("../../../base/GraphCommand");
const request_1 = require("../../../../request");
const vorpal = require('../../../../vorpal-init');
class TeamsTeamAddCommand extends GraphCommand_1.default {
    get name() {
        return `${commands_1.default.TEAMS_TEAM_ADD}`;
    }
    get description() {
        return 'Adds a new Microsoft Teams team';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.groupId = typeof args.options.groupId !== 'undefined';
        telemetryProps.name = typeof args.options.name !== 'undefined';
        telemetryProps.description = typeof args.options.description !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        (() => {
            return args.options.groupId ? this.createTeamForGroup(args) :
                this.createTeam(args);
        })()
            .then((res) => {
            // get the teams id from the response header.
            const teamsRspHdrRegEx = /teams?\('([^']+)'\)/i.exec(res.headers.location);
            if (teamsRspHdrRegEx !== null && teamsRspHdrRegEx.length > 0) {
                cmd.log(teamsRspHdrRegEx[1]);
            }
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => {
            this.handleRejectedODataJsonPromise(err, cmd, cb);
        });
    }
    createTeam(args) {
        const requestOptions = {
            url: `${this.resource}/beta/teams`,
            resolveWithFullResponse: true,
            headers: {
                accept: 'application/json;odata.metadata=none',
                'content-type': 'application/json;odata.metadata=none'
            },
            body: {
                'template@odata.bind': 'https://graph.microsoft.com/beta/teamsTemplates/standard',
                displayName: args.options.name,
                description: args.options.description
            },
            json: true
        };
        return request_1.default.post(requestOptions);
    }
    createTeamForGroup(args) {
        const requestOptions = {
            url: `${this.resource}/beta/groups/${args.options.groupId}/team`,
            resolveWithFullResponse: true,
            headers: {
                accept: 'application/json;odata.metadata=none',
                'content-type': 'application/json;odata.metadata=none'
            },
            body: {},
            json: true
        };
        return request_1.default.put(requestOptions);
    }
    options() {
        const options = [
            {
                option: '-n, --name [name]',
                description: 'Display name for the Microsoft Teams team. Required, when groupId is not specified.'
            },
            {
                option: '-d, --description [description]',
                description: 'Description for the Microsoft Teams team. Required, when groupId is not specified.'
            },
            {
                option: '-i, --groupId [groupId]',
                description: 'The ID of the Office 365 group to add a Microsoft Teams team to'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.groupId) {
                if (!args.options.name) {
                    return `Required parameter name missing`;
                }
                if (!args.options.description) {
                    return `Required parameter description missing`;
                }
            }
            else {
                if (args.options.name) {
                    return `Specify either groupId or name but not both`;
                }
                if (args.options.description) {
                    return `Specifying description with groupId is not supported`;
                }
                if (!Utils_1.default.isValidGuid(args.options.groupId)) {
                    return `${args.options.groupId} is not a valid GUID`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    ${chalk.yellow('Attention:')} This command is based on an API that is currently in preview
    and is subject to change once the API reached general availability.

  Examples:
  
    Add a new Microsoft Teams team by creating a group 
      ${this.name} --name 'Architecture' --description 'Architecture Discussion'

    Add a new Microsoft Teams team to an existing Office 365 group 
      ${this.name} --groupId 6d551ed5-a606-4e7d-b5d7-36063ce562cc
  `);
    }
}
module.exports = new TeamsTeamAddCommand();
//# sourceMappingURL=team-add.js.map