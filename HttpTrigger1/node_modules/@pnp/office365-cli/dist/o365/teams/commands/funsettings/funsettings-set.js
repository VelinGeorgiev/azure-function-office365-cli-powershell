"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Utils_1 = require("../../../../Utils");
const commands_1 = require("../../commands");
const GraphCommand_1 = require("../../../base/GraphCommand");
const request_1 = require("../../../../request");
const vorpal = require('../../../../vorpal-init');
class TeamsFunSettingsSetCommand extends GraphCommand_1.default {
    get name() {
        return `${commands_1.default.TEAMS_FUNSETTINGS_SET}`;
    }
    get description() {
        return 'Updates fun settings of a Microsoft Teams team';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        TeamsFunSettingsSetCommand.booleanProps.forEach(p => {
            telemetryProps[p] = args.options[p];
        });
        telemetryProps.giphyContentRating = args.options.giphyContentRating;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const body = {
            funSettings: {}
        };
        TeamsFunSettingsSetCommand.booleanProps.forEach(p => {
            if (typeof args.options[p] !== 'undefined') {
                body.funSettings[p] = args.options[p] === 'true';
            }
        });
        if (args.options.giphyContentRating) {
            body.funSettings.giphyContentRating = args.options.giphyContentRating;
        }
        const requestOptions = {
            url: `${this.resource}/v1.0/teams/${encodeURIComponent(args.options.teamId)}`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            body: body,
            json: true
        };
        request_1.default
            .patch(requestOptions)
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    ;
    options() {
        const options = [
            {
                option: '-i, --teamId <teamId>',
                description: 'The ID of the Teams team for which to update settings'
            },
            {
                option: '--allowGiphy [allowGiphy]',
                description: 'Set to true to allow giphy and to false to disable it'
            },
            {
                option: '--giphyContentRating [giphyContentRating]',
                description: 'Settings to set content rating for giphy. Allowed values Strict|Moderate'
            },
            {
                option: '--allowStickersAndMemes [allowStickersAndMemes]',
                description: 'Set to true to allow stickers and memes and to false to disable them'
            },
            {
                option: '--allowCustomMemes [allowCustomMemes]',
                description: 'Set to true to allow custom memes and to false to disable them'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.teamId) {
                return 'Required parameter teamId missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.teamId)) {
                return `${args.options.teamId} is not a valid GUID`;
            }
            let isValid = true;
            let value, property = '';
            TeamsFunSettingsSetCommand.booleanProps.every(p => {
                property = p;
                value = args.options[p];
                isValid = typeof value === 'undefined' ||
                    value === 'true' ||
                    value === 'false';
                return isValid;
            });
            if (!isValid) {
                return `Value ${value} for option ${property} is not a valid boolean`;
            }
            if (args.options.giphyContentRating) {
                const giphyContentRating = args.options.giphyContentRating.toLowerCase();
                if (giphyContentRating !== 'strict' && giphyContentRating !== 'moderate') {
                    return `giphyContentRating value ${value} is not valid.  Please specify Strict or Moderate.`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:

    Allow giphy usage within a given Microsoft Teams team, setting the content
    rating for giphy to Moderate
      ${this.name} --teamId 83cece1e-938d-44a1-8b86-918cf6151957 --allowGiphy true --giphyContentRating Moderate
    
    Disable usage of giphy within the given Microsoft Teams team
      ${this.name} --teamId 83cece1e-938d-44a1-8b86-918cf6151957 --allowGiphy false

    Allow usage of stickers and memes within a given Microsoft Teams team
      ${this.name} --teamId 83cece1e-938d-44a1-8b86-918cf6151957 --allowStickersAndMemes true

    Disable usage custom memes within a given Microsoft Teams team
      ${this.name} --teamId 83cece1e-938d-44a1-8b86-918cf6151957 --allowCustomMemes false
`);
    }
}
TeamsFunSettingsSetCommand.booleanProps = [
    'allowGiphy',
    'allowStickersAndMemes',
    'allowCustomMemes'
];
module.exports = new TeamsFunSettingsSetCommand();
//# sourceMappingURL=funsettings-set.js.map