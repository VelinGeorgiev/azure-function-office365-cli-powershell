"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const GraphCommand_1 = require("../../../base/GraphCommand");
const Utils_1 = require("../../../../Utils");
const request_1 = require("../../../../request");
const vorpal = require('../../../../vorpal-init');
class TeamsChannelSetCommand extends GraphCommand_1.default {
    get name() {
        return `${commands_1.default.TEAMS_CHANNEL_SET}`;
    }
    get description() {
        return 'Updates properties of the specified channel in the given Microsoft Teams team';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.newChannelName = typeof args.options.newChannelName !== 'undefined';
        telemetryProps.description = typeof args.options.description !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const requestOptions = {
            url: `${this.resource}/v1.0/teams/${encodeURIComponent(args.options.teamId)}/channels?$filter=displayName eq '${encodeURIComponent(args.options.channelName)}'`,
            headers: {
                accept: 'application/json;odata.metadata=none'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            const channelItem = res.value[0];
            if (!channelItem) {
                return Promise.reject(`The specified channel does not exist in the Microsoft Teams team`);
            }
            const channelId = res.value[0].id;
            const body = this.mapRequestBody(args.options);
            const requestOptions = {
                url: `${this.resource}/v1.0/teams/${encodeURIComponent(args.options.teamId)}/channels/${channelId}`,
                headers: {
                    'accept': 'application/json;odata.metadata=none'
                },
                json: true,
                body: body
            };
            return request_1.default.patch(requestOptions);
        })
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --teamId <teamId>',
                description: 'The ID of the team where the channel to update is located'
            },
            {
                option: '--channelName <channelName>',
                description: 'The name of the channel to update'
            },
            {
                option: '--newChannelName [newChannelName]',
                description: 'The new name of the channel'
            },
            {
                option: '--description [description]',
                description: 'The description of the channel'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.teamId) {
                return 'Required parameter teamId missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.teamId)) {
                return `${args.options.teamId} is not a valid GUID`;
            }
            if (!args.options.channelName) {
                return 'Required parameter channelName missing';
            }
            if (args.options.channelName.toLowerCase() === "general") {
                return 'General channel cannot be updated';
            }
            return true;
        };
    }
    mapRequestBody(options) {
        const requestBody = {};
        if (options.newChannelName) {
            requestBody.displayName = options.newChannelName;
        }
        if (options.description) {
            requestBody.description = options.description;
        }
        return requestBody;
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:

    Set new description and display name for the specified channel in the given
    Microsoft Teams team
      ${this.name} --teamId "00000000-0000-0000-0000-000000000000" --channelName Reviews --newChannelName Projects --description "Channel for new projects"

    Set new display name for the specified channel in the given Microsoft Teams
    team
      ${this.name} --teamId "00000000-0000-0000-0000-000000000000" --channelName Reviews --newChannelName Projects
`);
    }
}
module.exports = new TeamsChannelSetCommand();
//# sourceMappingURL=channel-set.js.map