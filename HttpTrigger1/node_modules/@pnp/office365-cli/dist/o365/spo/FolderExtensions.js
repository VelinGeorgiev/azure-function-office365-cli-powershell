"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../request");
const Utils_1 = require("../../Utils");
const url = require("url");
/**
 * Folder methods that are shared among multiple commands.
 */
class FolderExtensions {
    constructor(cmd, debug) {
        this.cmd = cmd;
        this.debug = debug;
    }
    /**
     * Ensures the folder path exists
     * @param webFullUrl web full url e.g. https://contoso.sharepoint.com/sites/site1
     * @param folderToEnsure web relative or server relative folder path e.g. /Documents/MyFolder or /sites/site1/Documents/MyFolder
     * @param siteAccessToken a valid access token for the site specified in the webFullUrl param
     */
    ensureFolder(webFullUrl, folderToEnsure) {
        const webUrl = url.parse(webFullUrl);
        if (!webUrl.protocol || !webUrl.hostname) {
            return Promise.reject('webFullUrl is not a valid URL');
        }
        if (!folderToEnsure) {
            return Promise.reject('folderToEnsure cannot be empty');
        }
        // remove last '/' of webFullUrl if exists
        const webFullUrlLastCharPos = webFullUrl.length - 1;
        if (webFullUrl.length > 1 &&
            webFullUrl[webFullUrlLastCharPos] === '/') {
            webFullUrl = webFullUrl.substring(0, webFullUrlLastCharPos);
        }
        folderToEnsure = Utils_1.default.getWebRelativePath(webFullUrl, folderToEnsure);
        if (this.debug) {
            this.cmd.log(`folderToEnsure`);
            this.cmd.log(folderToEnsure);
            this.cmd.log('');
        }
        let nextFolder = '';
        let prevFolder = '';
        let folderIndex = 0;
        // build array of folders e.g. ["Shared%20Documents","22","54","55"]
        let folders = folderToEnsure.substring(1).split('/');
        if (this.debug) {
            this.cmd.log('folders to process');
            this.cmd.log(JSON.stringify(folders));
            this.cmd.log('');
        }
        // recursive function
        const checkOrAddFolder = (resolve, reject) => {
            if (folderIndex === folders.length) {
                if (this.debug) {
                    this.cmd.log(`All sub-folders exist`);
                }
                return resolve();
            }
            // append the next sub-folder to the folder path and check if it exists
            prevFolder = nextFolder;
            nextFolder += `/${folders[folderIndex]}`;
            const folderServerRelativeUrl = Utils_1.default.getServerRelativePath(webFullUrl, nextFolder);
            const requestOptions = {
                url: `${webFullUrl}/_api/web/GetFolderByServerRelativeUrl('${encodeURIComponent(folderServerRelativeUrl)}')`,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                }
            };
            request_1.default
                .get(requestOptions)
                .then(() => {
                folderIndex++;
                checkOrAddFolder(resolve, reject);
            })
                .catch(() => {
                const prevFolderServerRelativeUrl = Utils_1.default.getServerRelativePath(webFullUrl, prevFolder);
                const requestOptions = {
                    url: `${webFullUrl}/_api/web/GetFolderByServerRelativePath(DecodedUrl=@a1)/AddSubFolderUsingPath(DecodedUrl=@a2)?@a1=%27${encodeURIComponent(prevFolderServerRelativeUrl)}%27&@a2=%27${encodeURIComponent(folders[folderIndex])}%27`,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    json: true
                };
                return request_1.default.post(requestOptions)
                    .then(() => {
                    folderIndex++;
                    checkOrAddFolder(resolve, reject);
                })
                    .catch((err) => {
                    if (this.debug) {
                        this.cmd.log(`Could not create sub-folder ${folderServerRelativeUrl}`);
                    }
                    reject(err);
                });
            });
        };
        return new Promise(checkOrAddFolder);
    }
}
exports.FolderExtensions = FolderExtensions;
//# sourceMappingURL=FolderExtensions.js.map