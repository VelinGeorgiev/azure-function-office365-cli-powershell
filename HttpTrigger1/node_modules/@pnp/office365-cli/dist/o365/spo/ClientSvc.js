"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../request");
const Utils_1 = require("../../Utils");
const config_1 = require("../../config");
const base_permissions_1 = require("./base-permissions");
;
/**
 * Commonly used Client Svc calls.
 */
class ClientSvc {
    constructor(cmd, debug) {
        this.cmd = cmd;
        this.debug = debug;
        this.cmd = cmd;
        this.debug = debug;
    }
    /**
     * Requests web object identity for the current web.
     * That request is something similar to _contextinfo in REST.
     * The response data looks like:
     * _ObjectIdentity_=<GUID>|<GUID>:site:<GUID>:web:<GUID>
     * _ObjectType_=SP.Web
     * ServerRelativeUrl=/sites/contoso
     * @param webUrl web url
     * @param formDigestValue formDigestValue
     */
    getCurrentWebIdentity(webUrl, formDigestValue) {
        const requestOptions = {
            url: `${webUrl}/_vti_bin/client.svc/ProcessQuery`,
            headers: {
                'X-RequestDigest': formDigestValue
            },
            body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><Query Id="1" ObjectPathId="5"><Query SelectAllProperties="false"><Properties><Property Name="ServerRelativeUrl" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Property Id="5" ParentId="3" Name="Web" /><StaticProperty Id="3" TypeId="{3747adcd-a3c3-41b9-bfab-4a64dd2f1e0a}" Name="Current" /></ObjectPaths></Request>`
        };
        return new Promise((resolve, reject) => {
            request_1.default.post(requestOptions).then((res) => {
                const json = JSON.parse(res);
                const contents = json.find(x => { return x.ErrorInfo; });
                if (contents && contents.ErrorInfo) {
                    return reject(contents.ErrorInfo.ErrorMessage || 'ClientSvc unknown error');
                }
                const identityObject = json.find(x => { return x._ObjectIdentity_; });
                if (identityObject) {
                    return resolve({
                        objectIdentity: identityObject._ObjectIdentity_,
                        serverRelativeUrl: identityObject.ServerRelativeUrl
                    });
                }
                reject('Cannot proceed. _ObjectIdentity_ not found'); // this is not supposed to happen
            }, (err) => { reject(err); });
        });
    }
    /**
     * Gets EffectiveBasePermissions for web return type is "_ObjectType_\":\"SP.Web\".
     * @param webObjectIdentity ObjectIdentity. Has format _ObjectIdentity_=<GUID>|<GUID>:site:<GUID>:web:<GUID>
     * @param webUrl web url
     * @param siteAccessToken site access token
     * @param formDigestValue formDigestValue
     */
    getEffectiveBasePermissions(webObjectIdentity, webUrl, formDigestValue) {
        const basePermissionsResult = new base_permissions_1.BasePermissions();
        const requestOptions = {
            url: `${webUrl}/_vti_bin/client.svc/ProcessQuery`,
            headers: {
                'X-RequestDigest': formDigestValue
            },
            body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><Query Id="11" ObjectPathId="5"><Query SelectAllProperties="false"><Properties><Property Name="EffectiveBasePermissions" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Identity Id="5" Name="${webObjectIdentity}" /></ObjectPaths></Request>`
        };
        return new Promise((resolve, reject) => {
            request_1.default.post(requestOptions).then((res) => {
                if (this.debug) {
                    this.cmd.log('Attempt to get the web EffectiveBasePermissions');
                }
                const json = JSON.parse(res);
                const contents = json.find(x => { return x.ErrorInfo; });
                if (contents && contents.ErrorInfo) {
                    return reject(contents.ErrorInfo.ErrorMessage || 'ClientSvc unknown error');
                }
                const permissionsObj = json.find(x => { return x.EffectiveBasePermissions; });
                if (permissionsObj) {
                    basePermissionsResult.high = permissionsObj.EffectiveBasePermissions.High;
                    basePermissionsResult.low = permissionsObj.EffectiveBasePermissions.Low;
                    return resolve(basePermissionsResult);
                }
                reject('Cannot proceed. EffectiveBasePermissions not found'); // this is not supposed to happen
            }, (err) => { reject(err); });
        });
    }
    /**
      * Gets folder by server relative url (GetFolderByServerRelativeUrl in REST)
      * The response data looks like:
      * _ObjectIdentity_=<GUID>|<GUID>:site:<GUID>:web:<GUID>:folder:<GUID>
      * _ObjectType_=SP.Folder
      * @param webObjectIdentity ObjectIdentity. Has format _ObjectIdentity_=<GUID>|<GUID>:site:<GUID>:web:<GUID>
      * @param webUrl web url
      * @param siteRelativeUrl site relative url e.g. /Shared Documents/Folder1
      * @param formDigestValue formDigestValue
      */
    getFolderIdentity(webObjectIdentity, webUrl, siteRelativeUrl, formDigestValue) {
        const serverRelativePath = Utils_1.default.getServerRelativePath(webUrl, siteRelativeUrl);
        const requestOptions = {
            url: `${webUrl}/_vti_bin/client.svc/ProcessQuery`,
            headers: {
                'X-RequestDigest': formDigestValue
            },
            body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="10" ObjectPathId="9" /><ObjectIdentityQuery Id="11" ObjectPathId="9" /><Query Id="12" ObjectPathId="9"><Query SelectAllProperties="false"><Properties><Property Name="Properties" SelectAll="true"><Query SelectAllProperties="false"><Properties /></Query></Property></Properties></Query></Query></Actions><ObjectPaths><Method Id="9" ParentId="5" Name="GetFolderByServerRelativeUrl"><Parameters><Parameter Type="String">${serverRelativePath}</Parameter></Parameters></Method><Identity Id="5" Name="${webObjectIdentity}" /></ObjectPaths></Request>`
        };
        return new Promise((resolve, reject) => {
            return request_1.default.post(requestOptions).then((res) => {
                const json = JSON.parse(res);
                const contents = json.find(x => { return x.ErrorInfo; });
                if (contents && contents.ErrorInfo) {
                    return reject(contents.ErrorInfo.ErrorMessage || 'ClientSvc unknown error');
                }
                const objectIdentity = json.find(x => { return x._ObjectIdentity_; });
                if (objectIdentity) {
                    return resolve({
                        objectIdentity: objectIdentity._ObjectIdentity_,
                        serverRelativeUrl: serverRelativePath
                    });
                }
                reject('Cannot proceed. Folder _ObjectIdentity_ not found'); // this is not suppose to happen
            }, (err) => { reject(err); });
        });
    }
}
exports.ClientSvc = ClientSvc;
//# sourceMappingURL=ClientSvc.js.map