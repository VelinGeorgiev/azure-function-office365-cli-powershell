"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoCustomActionClearCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.CUSTOMACTION_CLEAR}`;
    }
    get description() {
        return 'Deletes all custom actions in the collection';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.scope = args.options.scope || 'All';
        telemetryProps.confirm = (!(!args.options.confirm)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const clearCustomActions = () => {
            (() => {
                if (args.options.scope && args.options.scope.toLowerCase() !== "all") {
                    return this.clearScopedCustomActions(args.options);
                }
                return this.clearAllScopes(args.options);
            })()
                .then(() => {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
                cb();
            }, (err) => this.handleRejectedPromise(err, cmd, cb));
        };
        if (args.options.confirm) {
            clearCustomActions();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to clear all the user custom actions with scope ${vorpal.chalk.yellow(args.options.scope || 'All')}?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    clearCustomActions();
                }
            });
        }
    }
    clearScopedCustomActions(options) {
        const requestOptions = {
            url: `${options.url}/_api/${options.scope}/UserCustomActions/clear`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        return request_1.default.post(requestOptions);
    }
    /**
     * Clear request with `web` scope is send first.
     * Another clear request is send with `site` scope after.
     */
    clearAllScopes(options) {
        return new Promise((resolve, reject) => {
            options.scope = "Web";
            this
                .clearScopedCustomActions(options)
                .then(() => {
                options.scope = "Site";
                return this.clearScopedCustomActions(options);
            })
                .then(() => {
                return resolve();
            }, (err) => {
                reject(err);
            });
        });
    }
    options() {
        const options = [
            {
                option: '-u, --url <url>',
                description: 'Url of the site or site collection to clear the custom actions from'
            },
            {
                option: '-s, --scope [scope]',
                description: 'Scope of the custom action. Allowed values Site|Web|All. Default All',
                autocomplete: ['Site', 'Web', 'All']
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming removing all custom actions'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.url) {
                return 'Missing required option url';
            }
            const isValidUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.url);
            if (typeof isValidUrl === 'string') {
                return isValidUrl;
            }
            if (args.options.scope &&
                args.options.scope !== 'Site' &&
                args.options.scope !== 'Web' &&
                args.options.scope !== 'All') {
                return `${args.options.scope} is not a valid custom action scope. Allowed values are Site|Web|All`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.CUSTOMACTION_CLEAR).helpInformation());
        log(`  Examples:
  
    Clears all user custom actions for both site and site collection
    ${chalk.grey('https://contoso.sharepoint.com/sites/test')}. Skips the confirmation prompt
    message.
      ${commands_1.default.CUSTOMACTION_CLEAR} -u https://contoso.sharepoint.com/sites/test --confirm

    Clears all user custom actions for site
    ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_CLEAR} -u https://contoso.sharepoint.com/sites/test -s Web

    Clears all user custom actions for site collection
    ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_CLEAR} --url https://contoso.sharepoint.com/sites/test --scope Site
    `);
    }
}
module.exports = new SpoCustomActionClearCommand();
//# sourceMappingURL=customaction-clear.js.map