"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoTermSetGetCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.TERM_SET_GET;
    }
    get description() {
        return 'Gets information about the specified taxonomy term set';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.id = typeof args.options.id !== 'undefined';
        telemetryProps.name = typeof args.options.name !== 'undefined';
        telemetryProps.termGroupId = typeof args.options.termGroupId !== 'undefined';
        telemetryProps.termGroupName = typeof args.options.termGroupName !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let spoAdminUrl = '';
        this
            .getSpoAdminUrl(cmd, this.debug)
            .then((_spoAdminUrl) => {
            spoAdminUrl = _spoAdminUrl;
            return this.getRequestDigest(spoAdminUrl);
        })
            .then((res) => {
            if (this.verbose) {
                cmd.log(`Retrieving taxonomy term set...`);
            }
            const termGroupQuery = args.options.termGroupId ? `<Method Id="62" ParentId="60" Name="GetById"><Parameters><Parameter Type="Guid">{${args.options.termGroupId}}</Parameter></Parameters></Method>` : `<Method Id="62" ParentId="60" Name="GetByName"><Parameters><Parameter Type="String">${Utils_1.default.escapeXml(args.options.termGroupName)}</Parameter></Parameters></Method>`;
            const termSetQuery = args.options.id ? `<Method Id="67" ParentId="65" Name="GetById"><Parameters><Parameter Type="Guid">{${args.options.id}}</Parameter></Parameters></Method>` : `<Method Id="67" ParentId="65" Name="GetByName"><Parameters><Parameter Type="String">${Utils_1.default.escapeXml(args.options.name)}</Parameter></Parameters></Method>`;
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="55" ObjectPathId="54" /><ObjectIdentityQuery Id="56" ObjectPathId="54" /><ObjectPath Id="58" ObjectPathId="57" /><ObjectIdentityQuery Id="59" ObjectPathId="57" /><ObjectPath Id="61" ObjectPathId="60" /><ObjectPath Id="63" ObjectPathId="62" /><ObjectIdentityQuery Id="64" ObjectPathId="62" /><ObjectPath Id="66" ObjectPathId="65" /><ObjectPath Id="68" ObjectPathId="67" /><ObjectIdentityQuery Id="69" ObjectPathId="67" /><Query Id="70" ObjectPathId="67"><Query SelectAllProperties="true"><Properties><Property Name="Name" ScalarProperty="true" /><Property Name="Id" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><StaticMethod Id="54" Name="GetTaxonomySession" TypeId="{981cbc68-9edc-4f8d-872f-71146fcbb84f}" /><Method Id="57" ParentId="54" Name="GetDefaultSiteCollectionTermStore" /><Property Id="60" ParentId="57" Name="Groups" />${termGroupQuery}<Property Id="65" ParentId="62" Name="TermSets" />${termSetQuery}</ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            const termSet = json[json.length - 1];
            delete termSet._ObjectIdentity_;
            delete termSet._ObjectType_;
            termSet.CreatedDate = new Date(Number(termSet.CreatedDate.replace('/Date(', '').replace(')/', ''))).toISOString();
            termSet.Id = termSet.Id.replace('/Guid(', '').replace(')/', '');
            termSet.LastModifiedDate = new Date(Number(termSet.LastModifiedDate.replace('/Date(', '').replace(')/', ''))).toISOString();
            cmd.log(termSet);
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --id [id]',
                description: 'ID of the term set to retrieve. Specify name or id but not both'
            },
            {
                option: '-n, --name [name]',
                description: 'Name of the term set to retrieve. Specify name or id but not both'
            },
            {
                option: '--termGroupId [termGroupId]',
                description: 'ID of the term group to which the term set belongs. Specify termGroupId or termGroupName but not both'
            },
            {
                option: '--termGroupName [termGroupName]',
                description: 'Name of the term group to which the term set belongs. Specify termGroupId or termGroupName but not both'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.id && !args.options.name) {
                return 'Specify either id or name';
            }
            if (args.options.id && args.options.name) {
                return 'Specify either id or name but not both';
            }
            if (args.options.id) {
                if (!Utils_1.default.isValidGuid(args.options.id)) {
                    return `${args.options.id} is not a valid GUID`;
                }
            }
            if (!args.options.termGroupId && !args.options.termGroupName) {
                return 'Specify termGroupId or termGroupName';
            }
            if (args.options.termGroupId && args.options.termGroupName) {
                return 'Specify termGroupId or termGroupName but not both';
            }
            if (args.options.termGroupId) {
                if (!Utils_1.default.isValidGuid(args.options.termGroupId)) {
                    return `${args.options.termGroupId} is not a valid GUID`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.TERM_SET_GET).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
    
  Examples:
  
    Get information about a taxonomy term set using its ID
      ${commands_1.default.TERM_SET_GET} --id 0e8f395e-ff58-4d45-9ff7-e331ab728beb --termGroupName PnPTermSets

    Get information about a taxonomy term set using its name
      ${commands_1.default.TERM_SET_GET} --name PnPTermSets --termGroupId 0e8f395e-ff58-4d45-9ff7-e331ab728beb
`);
    }
}
module.exports = new SpoTermSetGetCommand();
//# sourceMappingURL=term-set-get.js.map