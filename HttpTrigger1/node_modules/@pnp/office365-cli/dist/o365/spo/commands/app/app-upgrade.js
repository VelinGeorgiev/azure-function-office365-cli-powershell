"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoAppUpgradeCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.APP_UPGRADE;
    }
    get description() {
        return 'Upgrades app in the specified site';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.scope = args.options.scope || 'tenant';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const scope = (args.options.scope) ? args.options.scope.toLowerCase() : 'tenant';
        if (this.verbose) {
            cmd.log(`Upgrading app '${args.options.id}' in site '${args.options.siteUrl}'...`);
        }
        const requestOptions = {
            url: `${args.options.siteUrl}/_api/web/${scope}appcatalog/AvailableApps/GetById('${encodeURIComponent(args.options.id)}')/upgrade`,
            headers: {
                accept: 'application/json;odata=nometadata'
            }
        };
        request_1.default
            .post(requestOptions)
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (rawRes) => this.handleRejectedODataPromise(rawRes, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --id <id>',
                description: 'ID of the app to upgrade'
            },
            {
                option: '-s, --siteUrl <siteUrl>',
                description: 'Absolute URL of the site to upgrade the app in'
            },
            {
                option: '--scope [scope]',
                description: 'Scope of the app catalog: tenant|sitecollection. Default tenant',
                autocomplete: ['tenant', 'sitecollection']
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (args.options.scope) {
                const testScope = args.options.scope.toLowerCase();
                if (!(testScope === 'tenant' || testScope === 'sitecollection')) {
                    return `Scope must be either 'tenant' or 'sitecollection' if specified`;
                }
            }
            if (!args.options.id) {
                return 'Required parameter id missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
            if (!args.options.siteUrl) {
                return 'Required parameter siteUrl missing';
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.siteUrl);
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.APP_UPGRADE).helpInformation());
        log(`  Remarks:
  
    If the app with the specified ID doesn't exist in the app catalog,
    the command will fail with an error.
 
  Examples:
  
    Upgrade the app with ID ${chalk.grey('b2307a39-e878-458b-bc90-03bc578531d6')}
    in the ${chalk.grey('https://contoso.sharepoint.com')} site.
      ${commands_1.default.APP_UPGRADE} --id b2307a39-e878-458b-bc90-03bc578531d6 --siteUrl https://contoso.sharepoint.com

    Upgrade the app with ID ${chalk.grey('b2307a39-e878-458b-bc90-03bc578531d6')}
    in the ${chalk.grey('https://contoso.sharepoint.com')} site from site collection app catalog.
      ${commands_1.default.APP_INSTALL} --id b2307a39-e878-458b-bc90-03bc578531d6 --siteUrl https://contoso.sharepoint.com --scope sitecollection

  More information:
  
    Application Lifecycle Management (ALM) APIs
      https://docs.microsoft.com/en-us/sharepoint/dev/apis/alm-api-for-spfx-add-ins
`);
    }
}
module.exports = new SpoAppUpgradeCommand();
//# sourceMappingURL=app-upgrade.js.map