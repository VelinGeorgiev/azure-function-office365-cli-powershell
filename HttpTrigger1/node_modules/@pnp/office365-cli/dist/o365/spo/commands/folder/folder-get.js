"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoFolderGetCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.FOLDER_GET;
    }
    get description() {
        return 'Gets information about the specified folder';
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Retrieving folder from site ${args.options.webUrl}...`);
        }
        const serverRelativeUrl = Utils_1.default.getServerRelativePath(args.options.webUrl, args.options.folderUrl);
        const requestUrl = `${args.options.webUrl}/_api/web/GetFolderByServerRelativeUrl('${encodeURIComponent(serverRelativeUrl)}')`;
        const requestOptions = {
            url: requestUrl,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((folder) => {
            cmd.log(folder);
            cb();
        }, (err) => {
            if (err.statusCode && err.statusCode === 500) {
                cb(new Command_1.CommandError('Please check the folder URL. Folder might not exist on the specified URL'));
                return;
            }
            this.handleRejectedODataJsonPromise(err, cmd, cb);
        });
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site where the folder is located'
            },
            {
                option: '-f, --folderUrl <folderUrl>',
                description: 'Site-relative URL of the folder'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            if (!args.options.folderUrl) {
                return 'Required parameter folderUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:
  
    If no folder exists at the specified URL, you will get a
    ${chalk.grey(`Please check the folder URL. Folder might not exist on the specified URL`)}
    error.
        
  Examples:
  
    Get folder properties for folder with site-relative url
    ${chalk.grey('/Shared Documents')} located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.FOLDER_GET} --webUrl https://contoso.sharepoint.com/sites/project-x --folderUrl '/Shared Documents'
    `);
    }
}
module.exports = new SpoFolderGetCommand();
//# sourceMappingURL=folder-get.js.map