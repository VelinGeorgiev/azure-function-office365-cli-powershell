"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoListWebhookListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.LIST_WEBHOOK_LIST;
    }
    get description() {
        return 'Lists all webhooks for the specified list';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.id = (!(!args.options.id)).toString();
        telemetryProps.listId = (!(!args.options.listId)).toString();
        telemetryProps.listTitle = (!(!args.options.listTitle)).toString();
        telemetryProps.title = (!(!args.options.title)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        if (args.options.title && this.verbose) {
            cmd.log(vorpal.chalk.yellow(`Option 'title' is deprecated. Please use 'listTitle' instead`));
        }
        if (args.options.id && this.verbose) {
            cmd.log(vorpal.chalk.yellow(`Option 'id' is deprecated. Please use 'listId' instead`));
        }
        if (this.verbose) {
            const list = args.options.id ? encodeURIComponent(args.options.id) : (args.options.listId ? encodeURIComponent(args.options.listId) : (args.options.title ? encodeURIComponent(args.options.title) : encodeURIComponent(args.options.listTitle)));
            cmd.log(`Retrieving webhook information for list ${list} in site at ${args.options.webUrl}...`);
        }
        let requestUrl = '';
        if (args.options.id) {
            requestUrl = `${args.options.webUrl}/_api/web/lists(guid'${encodeURIComponent(args.options.id)}')/Subscriptions`;
        }
        else if (args.options.listId) {
            requestUrl = `${args.options.webUrl}/_api/web/lists(guid'${encodeURIComponent(args.options.listId)}')/Subscriptions`;
        }
        else if (args.options.listTitle) {
            requestUrl = `${args.options.webUrl}/_api/web/lists/GetByTitle('${encodeURIComponent(args.options.listTitle)}')/Subscriptions`;
        }
        else {
            requestUrl = `${args.options.webUrl}/_api/web/lists/GetByTitle('${encodeURIComponent(args.options.title)}')/Subscriptions`;
        }
        const requestOptions = {
            url: requestUrl,
            method: 'GET',
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res.value && res.value.length > 0) {
                if (args.options.output === 'json') {
                    cmd.log(res.value);
                }
                else {
                    cmd.log(res.value.map(e => {
                        return {
                            id: e.id,
                            clientState: e.clientState || '',
                            expirationDateTime: e.expirationDateTime,
                            resource: e.resource
                        };
                    }));
                }
            }
            else {
                if (this.verbose) {
                    cmd.log('No webhooks found');
                }
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: `URL of the site where the list to retrieve webhooks for is located`
            },
            {
                option: '-i, --listId [listId]',
                description: `ID of the list to retrieve all webhooks for. Specify either listId or listTitle but not both`
            },
            {
                option: '-t, --listTitle [listTitle]',
                description: `Title of the list to retrieve all webhooks for. Specify either listId or listTitle but not both`
            },
            {
                option: '--id [id]',
                description: `(deprecated. Use 'listId' instead) ID of the list to retrieve all webhooks for. Specify either id or title but not both`
            },
            {
                option: '--title [title]',
                description: `(deprecated. Use 'listTitle' instead) Title of the list to retrieve all webhooks for. Specify either id or title but not both`
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (args.options.id) {
                if (!Utils_1.default.isValidGuid(args.options.id)) {
                    return `${args.options.id} is not a valid GUID`;
                }
            }
            if (args.options.listId) {
                if (!Utils_1.default.isValidGuid(args.options.listId)) {
                    return `${args.options.listId} is not a valid GUID`;
                }
            }
            if (args.options.id && args.options.title) {
                return 'Specify id or title, but not both';
            }
            if (args.options.listId && args.options.listTitle) {
                return 'Specify listId or listTitle, but not both';
            }
            if (!args.options.id && !args.options.title) {
                if (!args.options.listId && !args.options.listTitle) {
                    return 'Specify listId or listTitle, one is required';
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    List all webhooks for a list with ID ${chalk.grey('0cd891ef-afce-4e55-b836-fce03286cccf')}
    located in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_WEBHOOK_LIST} --webUrl https://contoso.sharepoint.com/sites/project-x --listId 0cd891ef-afce-4e55-b836-fce03286cccf

    List all webhooks for a list with title ${chalk.grey('Documents')} located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_WEBHOOK_LIST} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle Documents
      `);
    }
}
module.exports = new SpoListWebhookListCommand();
//# sourceMappingURL=list-webhook-list.js.map