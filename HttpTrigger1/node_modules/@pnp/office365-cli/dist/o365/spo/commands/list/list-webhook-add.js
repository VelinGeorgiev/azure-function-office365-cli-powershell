"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
const expirationDateTimeMaxDays = 180;
const maxExpirationDateTime = new Date();
// 180 days from now is the maximum expiration date for a webhook
maxExpirationDateTime.setDate(maxExpirationDateTime.getDate() + expirationDateTimeMaxDays);
class SpoListWebhookAddCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.LIST_WEBHOOK_ADD;
    }
    get description() {
        return 'Adds a new webhook to the specified list';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = (!(!args.options.listId)).toString();
        telemetryProps.listTitle = (!(!args.options.listTitle)).toString();
        telemetryProps.expirationDateTime = (!(!args.options.expirationDateTime)).toString();
        telemetryProps.clientState = (!(!args.options.clientState)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Adding webhook to list ${args.options.listId ? encodeURIComponent(args.options.listId) : encodeURIComponent(args.options.listTitle)} located at site ${args.options.webUrl}...`);
        }
        let requestUrl = '';
        if (args.options.listId) {
            requestUrl = `${args.options.webUrl}/_api/web/lists(guid'${encodeURIComponent(args.options.listId)}')/Subscriptions')`;
        }
        else {
            requestUrl = `${args.options.webUrl}/_api/web/lists/GetByTitle('${encodeURIComponent(args.options.listTitle)}')/Subscriptions')`;
        }
        const requestBody = {};
        requestBody.resource = args.options.listId ? args.options.listId : args.options.listTitle;
        requestBody.notificationUrl = args.options.notificationUrl;
        // If no expiration date has been provided we will default to the
        // maximum expiration date of 180 days from now 
        requestBody.expirationDateTime = args.options.expirationDateTime
            ? new Date(args.options.expirationDateTime).toISOString()
            : maxExpirationDateTime.toISOString();
        if (args.options.clientState) {
            requestBody.clientState = args.options.clientState;
        }
        const requestOptions = {
            url: requestUrl,
            method: 'POST',
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            body: requestBody,
            json: true
        };
        request_1.default
            .post(requestOptions)
            .then((res) => {
            cmd.log(res);
            cb();
        }, (err) => {
            this.handleRejectedODataJsonPromise(err, cmd, cb);
        });
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the list to add the webhook to is located'
            },
            {
                option: '-l, --listId [listId]',
                description: 'ID of the list to which the webhook which should be added. Specify either listId or listTitle but not both'
            },
            {
                option: '-t, --listTitle [listTitle]',
                description: 'Title of the list to which the webhook which should be added. Specify either listId or listTitle but not both'
            },
            {
                option: '-n, --notificationUrl <notificationUrl>',
                description: 'The notification url'
            },
            {
                option: '-e, --expirationDateTime [expirationDateTime]',
                description: 'The expiration date. Will be set to max (6 months from today) if not provided.'
            },
            {
                option: '-c, --clientState [clientState]',
                description: 'A client state information that will be passed through notifications.'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (args.options.listId) {
                if (!Utils_1.default.isValidGuid(args.options.listId)) {
                    return `${args.options.listId} is not a valid GUID`;
                }
            }
            if (args.options.listId && args.options.listTitle) {
                return 'Specify listId or listTitle, but not both';
            }
            if (!args.options.listId && !args.options.listTitle) {
                return 'Specify listId or listTitle, one is required';
            }
            if (!args.options.notificationUrl) {
                return 'Required parameter notificationUrl missing';
            }
            const parsedDateTime = Date.parse(args.options.expirationDateTime);
            if (args.options.expirationDateTime && !(!parsedDateTime) !== true) {
                return `Provide the date in one of the following formats:
      'YYYY-MM-DD'
      'YYYY-MM-DDThh:mm'
      'YYYY-MM-DDThh:mmZ'
      'YYYY-MM-DDThh:mmÂ±hh:mm'`;
            }
            if (parsedDateTime < Date.now() || new Date(parsedDateTime) >= maxExpirationDateTime) {
                return `Provide an expiration date which is a date time in the future and within 6 months from now`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Add a web hook to the list ${chalk.grey('Documents')} located in site 
    ${chalk.grey('https://contoso.sharepoint.com/sites/ninja')} with the notification url 
    ${chalk.grey('https://contoso-functions.azurewebsites.net/webhook')} and the default expiration date
    ${commands_1.default.LIST_WEBHOOK_ADD} --webUrl https://contoso.sharepoint.com/sites/ninja --listTitle Documents --notificationUrl https://contoso-functions.azurewebsites.net/webhook

    Add a web hook to the list ${chalk.grey('Documents')} located in site 
    ${chalk.grey('https://contoso.sharepoint.com/sites/ninja')} with the notification url 
    ${chalk.grey('https://contoso-functions.azurewebsites.net/webhook')} and an expiration date of ${chalk.grey('January 21st, 2019')}
    ${commands_1.default.LIST_WEBHOOK_ADD} --webUrl https://contoso.sharepoint.com/sites/ninja --listTitle Documents --notificationUrl https://contoso-functions.azurewebsites.net/webhook --expirationDateTime 2019-01-21
    
    Add a web hook to the list ${chalk.grey('Documents')} located in site 
    ${chalk.grey('https://contoso.sharepoint.com/sites/ninja')} with the notification url 
    ${chalk.grey('https://contoso-functions.azurewebsites.net/webhook')}, a very specific expiration date
    of ${chalk.grey('6:15 PM on March 2nd, 2019')} and a client state
    ${commands_1.default.LIST_WEBHOOK_ADD} --webUrl https://contoso.sharepoint.com/sites/ninja --listTitle Documents --notificationUrl https://contoso-functions.azurewebsites.net/webhook --expirationDateTime '2019-03-02T18:15' --clientState "Hello State!"
      `);
    }
}
module.exports = new SpoListWebhookAddCommand();
//# sourceMappingURL=list-webhook-add.js.map