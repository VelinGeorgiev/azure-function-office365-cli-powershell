"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const Command_1 = require("../../../../Command");
const vorpal = require('../../../../vorpal-init');
class SiteClassicListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.SITE_CLASSIC_LIST;
    }
    get description() {
        return 'Lists sites of the given type';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.webTemplate = args.options.webTemplate;
        telemetryProps.filter = (!(!args.options.filter)).toString();
        telemetryProps.includeOneDriveSites = args.options.includeOneDriveSites;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const webTemplate = args.options.webTemplate || '';
        const includeOneDriveSites = args.options.includeOneDriveSites || false;
        let spoAdminUrl = '';
        this
            .getSpoAdminUrl(cmd, this.debug)
            .then((_spoAdminUrl) => {
            spoAdminUrl = _spoAdminUrl;
            return this.getRequestDigest(spoAdminUrl);
        })
            .then((res) => {
            if (this.verbose) {
                cmd.log(`Retrieving list of site collections...`);
            }
            const personalSite = includeOneDriveSites === false ? '0' : '1';
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="2" ObjectPathId="1" /><ObjectPath Id="4" ObjectPathId="3" /><Query Id="5" ObjectPathId="3"><Query SelectAllProperties="true"><Properties /></Query><ChildItemQuery SelectAllProperties="true"><Properties /></ChildItemQuery></Query></Actions><ObjectPaths><Constructor Id="1" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /><Method Id="3" ParentId="1" Name="GetSitePropertiesFromSharePointByFilters"><Parameters><Parameter TypeId="{b92aeee2-c92c-4b67-abcc-024e471bc140}"><Property Name="Filter" Type="String">${Utils_1.default.escapeXml(args.options.filter || '')}</Property><Property Name="IncludeDetail" Type="Boolean">false</Property><Property Name="IncludePersonalSite" Type="Enum">${personalSite}</Property><Property Name="StartIndex" Type="String">0</Property><Property Name="Template" Type="String">${webTemplate}</Property></Parameter></Parameters></Method></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            else {
                const sites = json[json.length - 1];
                if (args.options.output === 'json') {
                    cmd.log(sites._Child_Items_);
                }
                else {
                    cmd.log(sites._Child_Items_.map(s => {
                        return {
                            Title: s.Title,
                            Url: s.Url
                        };
                    }).sort((a, b) => {
                        const urlA = a.Url.toUpperCase();
                        const urlB = b.Url.toUpperCase();
                        if (urlA < urlB) {
                            return -1;
                        }
                        if (urlA > urlB) {
                            return 1;
                        }
                        return 0;
                    }));
                }
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-t, --webTemplate [webTemplate]',
                description: 'type of classic sites to list.'
            },
            {
                option: '-f, --filter [filter]',
                description: 'filter to apply when retrieving sites'
            },
            {
                option: '--includeOneDriveSites',
                description: 'Set, if you also want to retrieve OneDrive sites'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
   
  Remarks:

    Using the ${chalk.blue('-t, --webTemplate')} option you can specify which sites you want
    to retrieve. For example, to get sites with the ${chalk.grey('STS#0')} as their web template,
    use ${chalk.grey("--webTemplate STS#0")} as the option.

    Using the ${chalk.blue('-f, --filter')} option you can specify which sites you want
    to retrieve. For example, to get sites with ${chalk.grey('project')} in their URL, use
    ${chalk.grey("Url -like 'project'")} as the filter.

    Using the ${chalk.blue('--includeOneDriveSites')} option you can specify whether you want
    to retrieve OneDrive sites or not. For example, to retrieve OneDrive sites,
    add ${chalk.grey('--includeOneDriveSites')} as an option.
  
  Examples:
  
    List all sites in the tenant you're logged in to
      ${commands_1.default.SITE_CLASSIC_LIST}

      List all sites (including OneDrive sites) in the tenant you're logged in to
      ${commands_1.default.SITE_CLASSIC_LIST} --includeOneDriveSites    

    List all classic team sites in the tenant you're logged in to
      ${commands_1.default.SITE_CLASSIC_LIST} --webTemplate STS#0

    List all classic project sites that contain 'project' in the URL
      ${commands_1.default.SITE_CLASSIC_LIST} --webTemplate PROJECTSITE#0 --filter "Url -like 'project'"
`);
    }
}
module.exports = new SiteClassicListCommand();
//# sourceMappingURL=site-classic-list.js.map