"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoSiteScriptAddCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.SITESCRIPT_ADD}`;
    }
    get description() {
        return 'Adds site script for use with site designs';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.description = (!(!args.options.description)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let spoUrl = '';
        this
            .getSpoUrl(cmd, this.debug)
            .then((_spoUrl) => {
            spoUrl = _spoUrl;
            return this.getRequestDigest(spoUrl);
        })
            .then((res) => {
            const requestOptions = {
                url: `${spoUrl}/_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.CreateSiteScript(Title=@title, Description=@description)?@title='${encodeURIComponent(args.options.title)}'&@description='${encodeURIComponent(args.options.description || '')}'`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue,
                    'content-type': 'application/json;charset=utf-8',
                    accept: 'application/json;odata=nometadata'
                },
                body: JSON.parse(args.options.content),
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            cmd.log(res);
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-t, --title <title>',
                description: 'Site script title'
            },
            {
                option: '-c, --content <content>',
                description: 'JSON string containing the site script'
            },
            {
                option: '-d, --description [description]',
                description: 'Site script description'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.title) {
                return 'Required parameter title missing';
            }
            if (!args.options.content) {
                return 'Required parameter content missing';
            }
            try {
                JSON.parse(args.options.content);
            }
            catch (e) {
                return `Specified content value is not a valid JSON string. Error: ${e}`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    Each time you execute the ${chalk.blue(this.name)} command, it will create
    a new site script with a unique ID. Before creating a site script, be sure
    that another script with the same name doesn't already exist.

  Examples:
  
    Create new site script for use with site designs. Script contents are stored
    in the ${chalk.grey('$script')} variable
      ${this.name} --title "Contoso" --description "Contoso theme script" --content $script

  More information:

    SharePoint site design and site script overview
      https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/site-design-overview
`);
    }
}
module.exports = new SpoSiteScriptAddCommand();
//# sourceMappingURL=sitescript-add.js.map