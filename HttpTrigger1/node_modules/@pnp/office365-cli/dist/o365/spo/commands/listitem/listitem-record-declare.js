"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const ClientSvc_1 = require("../../ClientSvc");
const vorpal = require("../../../../vorpal-init");
class SpoListItemRecordDeclareCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.LISTITEM_RECORD_DECLARE;
    }
    get description() {
        return "Declares the specified list item as a record";
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = typeof args.options.listId !== 'undefined';
        telemetryProps.listTitle = typeof args.options.listTitle !== 'undefined';
        telemetryProps.date = typeof args.options.date !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const clientSvc = new ClientSvc_1.ClientSvc(cmd, this.debug);
        let formDigestValue = '';
        let webIdentity = '';
        let listId = '';
        const listRestUrl = args.options.listId
            ? `${args.options.webUrl}/_api/web/lists(guid'${encodeURIComponent(args.options.listId)}')`
            : `${args.options.webUrl}/_api/web/lists/getByTitle('${encodeURIComponent(args.options.listTitle)}')`;
        this
            .getRequestDigest(args.options.webUrl)
            .then((contextResponse) => {
            formDigestValue = contextResponse.FormDigestValue;
            return clientSvc.getCurrentWebIdentity(args.options.webUrl, formDigestValue);
        })
            .then((webIdentityResp) => {
            webIdentity = webIdentityResp.objectIdentity;
            if (args.options.listId) {
                return Promise.resolve({ Id: args.options.listId });
            }
            const requestOptions = {
                url: `${listRestUrl}?$select=Id`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })
            .then((res) => {
            listId = res.Id;
            const requestBody = this.getDeclareRecordRequestBody(webIdentity, listId, args.options.id, args.options.date || '');
            const requestOptions = {
                url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'Content-Type': 'text/xml',
                    'X-RequestDigest': formDigestValue
                },
                body: requestBody
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
            }
            else {
                const result = json[json.length - 1];
                cmd.log(result);
                cb();
            }
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    getDeclareRecordRequestBody(webIdentity, listId, id, date) {
        let requestBody = '';
        if (date.length === 10) {
            requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><StaticMethod TypeId="{ea8e1356-5910-4e69-bc05-d0c30ed657fc}" Name="DeclareItemAsRecordWithDeclarationDate" Id="48"><Parameters><Parameter ObjectPathId="21" /><Parameter Type="DateTime">${date}</Parameter></Parameters></StaticMethod></Actions><ObjectPaths><Identity Id="21" Name="${webIdentity}:list:${listId}:item:${id},1" /></ObjectPaths></Request>`;
        }
        else {
            requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><StaticMethod TypeId="{ea8e1356-5910-4e69-bc05-d0c30ed657fc}" Name="DeclareItemAsRecord" Id="37"><Parameters><Parameter ObjectPathId="12" /></Parameters></StaticMethod></Actions><ObjectPaths><Identity Id="12" Name="${webIdentity}:list:${listId}:item:${id},1" /></ObjectPaths></Request>`;
        }
        return requestBody;
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site where the list is located'
            },
            {
                option: '-l, --listId [listId]',
                description: 'The ID of the list where the item is located. Specify listId or listTitle but not both'
            },
            {
                option: '-t, --listTitle [listTitle]',
                description: 'The title of the list where the item is located. Specify listId or listTitle but not both'
            },
            {
                option: '-i, --id <id>',
                description: 'The ID of the list item to declare as record'
            },
            {
                option: '-d, --date [date]',
                description: 'Record declaration date in ISO format, eg. 2019-12-31'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.listId && !args.options.listTitle) {
                return `Specify listId or listTitle`;
            }
            if (args.options.listId && args.options.listTitle) {
                return `Specify listId or listTitle but not both`;
            }
            if (args.options.listId && !Utils_1.default.isValidGuid(args.options.listId)) {
                return `${args.options.listId} in option listId is not a valid GUID`;
            }
            if (!args.options.id) {
                return `Specify id for item to declare as a record`;
            }
            const id = parseInt(args.options.id);
            if (isNaN(id)) {
                return `${args.options.id} is not a number`;
            }
            if (id < 1) {
                return `Item ID must be a positive number`;
            }
            if (args.options.date && !Utils_1.default.isValidISODate(args.options.date)) {
                return `${args.options.date} in option date is not in ISO format (yyyy-mm-dd)`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Declare a document with id ${chalk.grey("1")} as a record in list with title ${chalk.grey("Demo List")}
    located in site ${chalk.grey("https://contoso.sharepoint.com/sites/project-x")}
      ${commands_1.default.LISTITEM_RECORD_DECLARE} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle "Demo List" --id 1

    Declare a document with id ${chalk.grey("1")} as a record in list with id
    ${chalk.grey("ea8e1109-2013-1a69-bc05-1403201257fc")} located in site
    ${chalk.grey("https://contoso.sharepoint.com/sites/project-x")}
      ${commands_1.default.LISTITEM_RECORD_DECLARE} --webUrl https://contoso.sharepoint.com/sites/project-x --listId ea8e1109-2013-1a69-bc05-1403201257fc --id 1
  
    Declare a document with id ${chalk.grey("1")} as a record with record declaration date
    ${chalk.grey("March 14, 2012")} in list with title ${chalk.grey("Demo List")} located in site
    ${chalk.grey("https://contoso.sharepoint.com/sites/project-x")}
      ${commands_1.default.LISTITEM_RECORD_DECLARE} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle "Demo List" --id 1 --date 2012-03-14

    Declare a document with id ${chalk.grey("1")} as a record with record declaration date
    ${chalk.grey("September 3, 2013")} in list with id ${chalk.grey("ea8e1356-5910-abc9-bc05-2408198057fc")}
    located in site ${chalk.grey("https://contoso.sharepoint.com/sites/project-x")}
      ${commands_1.default.LISTITEM_RECORD_DECLARE} --webUrl https://contoso.sharepoint.com/sites/project-x --listId ea8e1356-5910-abc9-bc05-2408198057fc --id 1 --date 2013-09-03
   `);
    }
}
module.exports = new SpoListItemRecordDeclareCommand();
//# sourceMappingURL=listitem-record-declare.js.map