"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoListLabelSetCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.LIST_LABEL_SET;
    }
    get description() {
        return 'Sets classification label on the specified list';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = (!(!args.options.listId)).toString();
        telemetryProps.listTitle = (!(!args.options.listTitle)).toString();
        telemetryProps.listUrl = (!(!args.options.listUrl)).toString();
        telemetryProps.syncToItems = args.options.syncToItems || false;
        telemetryProps.blockDelete = args.options.blockDelete || false;
        telemetryProps.blockEdit = args.options.blockEdit || false;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        (() => {
            let listRestUrl = '';
            if (args.options.listUrl) {
                const listServerRelativeUrl = Utils_1.default.getServerRelativePath(args.options.webUrl, args.options.listUrl);
                return Promise.resolve(listServerRelativeUrl);
            }
            else if (args.options.listId) {
                listRestUrl = `lists(guid'${encodeURIComponent(args.options.listId)}')/`;
            }
            else {
                listRestUrl = `lists/getByTitle('${encodeURIComponent(args.options.listTitle)}')/`;
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/${listRestUrl}?$expand=RootFolder&$select=RootFolder`,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default
                .get(requestOptions)
                .then((listInstance) => {
                return Promise.resolve(listInstance.RootFolder.ServerRelativeUrl);
            });
        })()
            .then((listServerRelativeUrl) => {
            const listAbsoluteUrl = Utils_1.default.getAbsoluteUrl(args.options.webUrl, listServerRelativeUrl);
            const requestUrl = `${args.options.webUrl}/_api/SP_CompliancePolicy_SPPolicyStoreProxy_SetListComplianceTag`;
            const requestOptions = {
                url: requestUrl,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                body: {
                    listUrl: listAbsoluteUrl,
                    complianceTagValue: args.options.label,
                    blockDelete: args.options.blockDelete || false,
                    blockEdit: args.options.blockEdit || false,
                    syncToItems: args.options.syncToItems || false
                },
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site where the list is located'
            },
            {
                option: '--label <label>',
                description: 'The label to set on the list'
            },
            {
                option: '-t, --listTitle [listTitle]',
                description: 'The title of the list on which to set the label. Specify only one of listTitle, listId or listUrl'
            },
            {
                option: '-l, --listId [listId]',
                description: 'The ID of the list on which to set the label. Specify only one of listTitle, listId or listUrl'
            },
            {
                option: '--listUrl [listUrl]',
                description: 'Server- or web-relative URL of the list on which to set the label. Specify only one of listTitle, listId or listUrl'
            },
            {
                option: '--syncToItems',
                description: 'Specify, to set the label on all items in the list'
            },
            {
                option: '--blockDelete',
                description: 'Specify, to disallow deleting items in the list'
            },
            {
                option: '--blockEdit',
                description: 'Specify, to disallow editing items in the list'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.label) {
                return 'Required parameter label missing';
            }
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            if (!args.options.listId && !args.options.listTitle && !args.options.listUrl) {
                return `Specify listId or listTitle or listUrl.`;
            }
            if (args.options.listId && !Utils_1.default.isValidGuid(args.options.listId)) {
                return `${args.options.listId} is not a valid GUID`;
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Sets classification label "Confidential" for list ${chalk.grey('Shared Documents')}
    located in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_LABEL_SET} --webUrl https://contoso.sharepoint.com/sites/project-x --listUrl 'Shared Documents' --label 'Confidential'

    Sets classification label "Confidential" and disables editing and deleting
    items on the list and all existing items for list ${chalk.grey('Documents')}
    located in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_LABEL_SET} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle 'Documents' --label 'Confidential' --blockEdit --blockDelete --syncToItems
`);
    }
}
module.exports = new SpoListLabelSetCommand();
//# sourceMappingURL=list-label-set.js.map