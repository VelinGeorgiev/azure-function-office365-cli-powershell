"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoListViewRemoveCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.LIST_VIEW_REMOVE;
    }
    get description() {
        return 'Deletes the specified view from the list';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = typeof args.options.listId !== 'undefined';
        telemetryProps.listTitle = typeof args.options.listTitle !== 'undefined';
        telemetryProps.viewId = typeof args.options.viewId !== 'undefined';
        telemetryProps.viewTitle = typeof args.options.viewTitle !== 'undefined';
        telemetryProps.confirm = (!(!args.options.confirm)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const removeViewFromList = () => {
            if (this.verbose) {
                const list = args.options.listId ? encodeURIComponent(args.options.listId) : encodeURIComponent(args.options.listTitle);
                cmd.log(`Removing view ${args.options.viewId || args.options.viewTitle} from list ${list} in site at ${args.options.webUrl}...`);
            }
            let requestUrl = '';
            const listSelector = args.options.listId ? `(guid'${encodeURIComponent(args.options.listId)}')` : `/GetByTitle('${encodeURIComponent(args.options.listTitle)}')`;
            const viewSelector = args.options.viewId ? `(guid'${encodeURIComponent(args.options.viewId)}')` : `/GetByTitle('${encodeURIComponent(args.options.viewTitle)}')`;
            requestUrl = `${args.options.webUrl}/_api/web/lists${listSelector}/views${viewSelector}`;
            const requestOptions = {
                url: requestUrl,
                headers: {
                    'X-HTTP-Method': 'DELETE',
                    'If-Match': '*',
                    'accept': 'application/json;odata=nometadata'
                },
                json: true
            };
            request_1.default
                .post(requestOptions)
                .then(() => {
                // REST post call doesn't return anything
                cb();
            }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
        };
        if (args.options.confirm) {
            removeViewFromList();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to remove the view ${args.options.viewId || args.options.viewTitle} from the list ${args.options.listId || args.options.listTitle} in site ${args.options.webUrl}?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeViewFromList();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the list is located'
            },
            {
                option: '--listId [listId]',
                description: 'ID of the list from which to remove the view. Specify listId or listTitle but not both'
            },
            {
                option: '--listTitle [listTitle]',
                description: 'Title of the list from which to remove the view. Specify listId or listTitle but not both'
            },
            {
                option: '--viewId [viewId]',
                description: 'ID of the view to remove. Specify viewId or viewTitle but not both'
            },
            {
                option: '--viewTitle [viewTitle]',
                description: 'ID of the view to remove. Specify viewId or viewTitle but not both'
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming removing the view from the list'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (args.options.listId) {
                if (!Utils_1.default.isValidGuid(args.options.listId)) {
                    return `${args.options.listId} is not a valid GUID`;
                }
            }
            if (args.options.viewId) {
                if (!Utils_1.default.isValidGuid(args.options.viewId)) {
                    return `${args.options.viewId} is not a valid GUID`;
                }
            }
            if (args.options.listId && args.options.listTitle) {
                return 'Specify listId or listTitle, but not both';
            }
            if (!args.options.listId && !args.options.listTitle) {
                return 'Specify listId or listTitle, one is required';
            }
            if (args.options.viewId && args.options.viewTitle) {
                return 'Specify viewId or viewTitle, but not both';
            }
            if (!args.options.viewId && !args.options.viewTitle) {
                return 'Specify viewId or viewTitle, one is required';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Remove view with ID ${chalk.grey('cc27a922-8224-4296-90a5-ebbc54da2e81')} from the list
    with ID ${chalk.grey('0cd891ef-afce-4e55-b836-fce03286cccf')} located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_VIEW_REMOVE} --webUrl https://contoso.sharepoint.com/sites/project-x --listId 0cd891ef-afce-4e55-b836-fce03286cccf --viewId cc27a922-8224-4296-90a5-ebbc54da2e81
    
    Remove view with ID ${chalk.grey('cc27a922-8224-4296-90a5-ebbc54da2e81')} from the list
    with title ${chalk.grey('Documents')} located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_VIEW_REMOVE} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle Documents --viewId cc27a922-8224-4296-90a5-ebbc54da2e81
    
    Remove view with title ${chalk.grey('MyView')} from a list with title ${chalk.grey('Documents')}
    located in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_VIEW_REMOVE} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle Documents --viewTitle MyView
    
    Remove view with ID ${chalk.grey('cc27a922-8224-4296-90a5-ebbc54da2e81')} from a list
    with title ${chalk.grey('Documents')} located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')} without being asked
    for confirmation
      ${commands_1.default.LIST_VIEW_REMOVE} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle Documents --viewId cc27a922-8224-4296-90a5-ebbc54da2e81 --confirm
      `);
    }
}
module.exports = new SpoListViewRemoveCommand();
//# sourceMappingURL=list-view-remove.js.map