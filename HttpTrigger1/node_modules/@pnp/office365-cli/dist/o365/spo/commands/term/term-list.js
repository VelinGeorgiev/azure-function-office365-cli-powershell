"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoTermListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.TERM_LIST;
    }
    get description() {
        return 'Lists taxonomy terms from the given term set';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.termGroupId = typeof args.options.termGroupId !== 'undefined';
        telemetryProps.termGroupName = typeof args.options.termGroupName !== 'undefined';
        telemetryProps.termSetId = typeof args.options.termSetId !== 'undefined';
        telemetryProps.termSetName = typeof args.options.termSetName !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let spoAdminUrl = '';
        this
            .getSpoAdminUrl(cmd, this.debug)
            .then((_spoAdminUrl) => {
            spoAdminUrl = _spoAdminUrl;
            return this.getRequestDigest(spoAdminUrl);
        })
            .then((res) => {
            if (this.verbose) {
                cmd.log(`Retrieving taxonomy term sets...`);
            }
            const termGroupQuery = args.options.termGroupId ? `<Method Id="77" ParentId="75" Name="GetById"><Parameters><Parameter Type="Guid">{${args.options.termGroupId}}</Parameter></Parameters></Method>` : `<Method Id="77" ParentId="75" Name="GetByName"><Parameters><Parameter Type="String">${Utils_1.default.escapeXml(args.options.termGroupName)}</Parameter></Parameters></Method>`;
            const termSetQuery = args.options.termSetId ? `<Method Id="82" ParentId="80" Name="GetById"><Parameters><Parameter Type="Guid">{${args.options.termSetId}}</Parameter></Parameters></Method>` : `<Method Id="82" ParentId="80" Name="GetByName"><Parameters><Parameter Type="String">${Utils_1.default.escapeXml(args.options.termSetName)}</Parameter></Parameters></Method>`;
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="70" ObjectPathId="69" /><ObjectIdentityQuery Id="71" ObjectPathId="69" /><ObjectPath Id="73" ObjectPathId="72" /><ObjectIdentityQuery Id="74" ObjectPathId="72" /><ObjectPath Id="76" ObjectPathId="75" /><ObjectPath Id="78" ObjectPathId="77" /><ObjectIdentityQuery Id="79" ObjectPathId="77" /><ObjectPath Id="81" ObjectPathId="80" /><ObjectPath Id="83" ObjectPathId="82" /><ObjectIdentityQuery Id="84" ObjectPathId="82" /><ObjectPath Id="86" ObjectPathId="85" /><Query Id="87" ObjectPathId="85"><Query SelectAllProperties="false"><Properties /></Query><ChildItemQuery SelectAllProperties="true"><Properties><Property Name="Name" ScalarProperty="true" /><Property Name="Id" ScalarProperty="true" /></Properties></ChildItemQuery></Query></Actions><ObjectPaths><StaticMethod Id="69" Name="GetTaxonomySession" TypeId="{981cbc68-9edc-4f8d-872f-71146fcbb84f}" /><Method Id="72" ParentId="69" Name="GetDefaultSiteCollectionTermStore" /><Property Id="75" ParentId="72" Name="Groups" />${termGroupQuery}<Property Id="80" ParentId="77" Name="TermSets" />${termSetQuery}<Property Id="85" ParentId="82" Name="Terms" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            const result = json[json.length - 1];
            if (result._Child_Items_ && result._Child_Items_.length > 0) {
                if (args.options.output === 'json') {
                    cmd.log(result._Child_Items_.map(t => {
                        t.CreatedDate = new Date(Number(t.CreatedDate.replace('/Date(', '').replace(')/', ''))).toISOString();
                        t.Id = t.Id.replace('/Guid(', '').replace(')/', '');
                        t.LastModifiedDate = new Date(Number(t.LastModifiedDate.replace('/Date(', '').replace(')/', ''))).toISOString();
                        return t;
                    }));
                }
                else {
                    cmd.log(result._Child_Items_.map(t => {
                        return {
                            Id: t.Id.replace('/Guid(', '').replace(')/', ''),
                            Name: t.Name
                        };
                    }));
                }
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '--termGroupId [termGroupId]',
                description: 'ID of the term group where the term set is located. Specify termGroupId or termGroupName but not both'
            },
            {
                option: '--termGroupName [termGroupName]',
                description: 'Name of the term group where the term set is located. Specify termGroupId or termGroupName but not both'
            },
            {
                option: '--termSetId [termSetId]',
                description: 'ID of the term set for which to retrieve terms. Specify termSetId or termSetName but not both'
            },
            {
                option: '--termSetName [termSetName]',
                description: 'Name of the term set for which to retrieve terms. Specify termSetId or termSetName but not both'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.termGroupId && !args.options.termGroupName) {
                return 'Specify either termGroupId or termGroupName';
            }
            if (args.options.termGroupId && args.options.termGroupName) {
                return 'Specify either termGroupId or termGroupName but not both';
            }
            if (args.options.termGroupId) {
                if (!Utils_1.default.isValidGuid(args.options.termGroupId)) {
                    return `${args.options.termGroupId} is not a valid GUID`;
                }
            }
            if (!args.options.termSetId && !args.options.termSetName) {
                return 'Specify either termSetId or termSetName';
            }
            if (args.options.termSetId && args.options.termSetName) {
                return 'Specify either termSetId or termSetName but not both';
            }
            if (args.options.termSetId) {
                if (!Utils_1.default.isValidGuid(args.options.termSetId)) {
                    return `${args.options.termSetId} is not a valid GUID`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.TERM_LIST).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
    
  Examples:
  
    List taxonomy terms from the term group and term set with the given name
      ${commands_1.default.TERM_LIST} --termGroupName PnPTermSets --termSetName PnP-Organizations

    List taxonomy terms from the term group and term set with the given ID
      ${commands_1.default.TERM_LIST} --termGroupId 0e8f395e-ff58-4d45-9ff7-e331ab728beb --termSetId 0e8f395e-ff58-4d45-9ff7-e331ab728bec
`);
    }
}
module.exports = new SpoTermListCommand();
//# sourceMappingURL=term-list.js.map