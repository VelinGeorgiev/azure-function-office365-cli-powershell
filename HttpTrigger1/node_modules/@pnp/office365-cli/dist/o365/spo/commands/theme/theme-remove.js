"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoThemeRemoveCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.THEME_REMOVE;
    }
    get description() {
        return 'Removes existing theme';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.confirm = (!(!args.options.confirm)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const removeTheme = () => {
            this
                .getSpoAdminUrl(cmd, this.debug)
                .then((spoAdminUrl) => {
                if (this.verbose) {
                    cmd.log(`Removing theme from tenant...`);
                }
                const requestOptions = {
                    url: `${spoAdminUrl}/_api/thememanager/DeleteTenantTheme`,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    body: {
                        name: args.options.name,
                    },
                    json: true
                };
                return request_1.default.post(requestOptions);
            })
                .then(() => {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
                cb();
            }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
        };
        if (args.options.confirm) {
            removeTheme();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to remove the theme`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeTheme();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '-n, --name <name>',
                description: 'Name of the theme to remove'
            },
            {
                option: '--confirm',
                description: 'Do not prompt for confirmation before removing theme'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.name) {
                return 'Required parameter name missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
  
  Examples:

    Remove theme. Will prompt for confirmation before removing the theme
      ${commands_1.default.THEME_REMOVE} --name Contoso-Blue
  
    Remove theme without prompting for confirmation
      ${commands_1.default.THEME_REMOVE} --name Contoso-Blue --confirm

  More information:

    SharePoint site theming
      https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/site-theming/sharepoint-site-theming-overview
      `);
    }
}
module.exports = new SpoThemeRemoveCommand();
//# sourceMappingURL=theme-remove.js.map