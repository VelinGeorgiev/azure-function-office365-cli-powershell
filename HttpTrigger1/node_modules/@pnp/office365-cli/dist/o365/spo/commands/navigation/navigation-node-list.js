"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoNavigationNodeListCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.NAVIGATION_NODE_LIST}`;
    }
    get description() {
        return 'Lists nodes from the specified site navigation';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.location = args.options.location;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Retrieving navigation nodes...`);
        }
        const requestOptions = {
            url: `${args.options.webUrl}/_api/web/navigation/${args.options.location.toLowerCase()}`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            cmd.log(res.value.map(n => {
                return {
                    Id: n.Id,
                    Title: n.Title,
                    Url: n.Url
                };
            }));
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'Absolute URL of the site for which to retrieve navigation'
            },
            {
                option: '-l, --location <location>',
                description: 'Navigation type to retrieve. Available options: QuickLaunch|TopNavigationBar',
                autocomplete: ['QuickLaunch', 'TopNavigationBar']
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required option webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.location) {
                return 'Required option location missing';
            }
            else {
                if (args.options.location !== 'QuickLaunch' &&
                    args.options.location !== 'TopNavigationBar') {
                    return `${args.options.location} is not a valid value for the location option. Allowed values are QuickLaunch|TopNavigationBar`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(commands_1.default.NAVIGATION_NODE_LIST).helpInformation());
        log(`  Examples:
  
    Retrieve nodes from the top navigation
      ${commands_1.default.NAVIGATION_NODE_LIST} --webUrl https://contoso.sharepoint.com/sites/team-a --location TopNavigationBar

    Retrieve nodes from the quick launch
      ${commands_1.default.NAVIGATION_NODE_LIST} --webUrl https://contoso.sharepoint.com/sites/team-a --location QuickLaunch
`);
    }
}
module.exports = new SpoNavigationNodeListCommand();
//# sourceMappingURL=navigation-node-list.js.map