"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoCdnSetCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.CDN_SET;
    }
    get description() {
        return 'Enable or disable the specified Office 365 CDN';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.cdnType = args.options.type || 'Public';
        telemetryProps.enabled = args.options.enabled === 'true';
        telemetryProps.noDefaultOrigins = (!(!args.options.noDefaultOrigins)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const cdnTypeString = args.options.type || 'Public';
        const enabled = args.options.enabled === 'true';
        let cdnType = 0;
        let spoAdminUrl = '';
        switch (cdnTypeString) {
            case "Private": {
                cdnType = 1;
                break;
            }
            case "Both": {
                cdnType = 2;
                break;
            }
            default: {
                cdnType = 0;
                break;
            }
        }
        this
            .getSpoAdminUrl(cmd, this.debug)
            .then((_spoAdminUrl) => {
            spoAdminUrl = _spoAdminUrl;
            return this.getRequestDigest(spoAdminUrl);
        })
            .then((res) => {
            let requestBody = '';
            if (cdnType === 2) {
                if (args.options.noDefaultOrigins) {
                    if (this.verbose) {
                        cmd.log(`${(enabled ? 'Enabling' : 'Disabling')} Public and Private CDNs without default origins. Please wait, this might take a moment...`);
                    }
                    requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="12" ObjectPathId="11" /><Method Name="SetTenantCdnEnabled" Id="13" ObjectPathId="11"><Parameters><Parameter Type="Enum">1</Parameter><Parameter Type="Boolean">${enabled}</Parameter></Parameters></Method><Method Name="SetTenantCdnEnabled" Id="14" ObjectPathId="11"><Parameters><Parameter Type="Enum">0</Parameter><Parameter Type="Boolean">${enabled}</Parameter></Parameters></Method></Actions><ObjectPaths><Constructor Id="11" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`;
                }
                else {
                    if (this.verbose) {
                        cmd.log(`${(enabled ? 'Enabling' : 'Disabling')} Public and Private CDNs with default origins. Please wait, this might take a moment...`);
                    }
                    requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="96" ObjectPathId="95" /><Method Name="SetTenantCdnEnabled" Id="97" ObjectPathId="95"><Parameters><Parameter Type="Enum">1</Parameter><Parameter Type="Boolean">${enabled}</Parameter></Parameters></Method><Method Name="SetTenantCdnEnabled" Id="98" ObjectPathId="95"><Parameters><Parameter Type="Enum">0</Parameter><Parameter Type="Boolean">${enabled}</Parameter></Parameters></Method>${(enabled ? '<Method Name="CreateTenantCdnDefaultOrigins" Id="99" ObjectPathId="95"><Parameters><Parameter Type="Enum">1</Parameter></Parameters></Method><Method Name="CreateTenantCdnDefaultOrigins" Id="100" ObjectPathId="95"><Parameters><Parameter Type="Enum">0</Parameter></Parameters></Method>' : '')}</Actions><ObjectPaths><Constructor Id="95" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`;
                }
            }
            else {
                if (args.options.noDefaultOrigins) {
                    if (this.verbose) {
                        cmd.log(`${(enabled ? 'Enabling' : 'Disabling')} ${(cdnType === 1 ? 'Private' : 'Public')} CDN without default origins. Please wait, this might take a moment...`);
                    }
                    requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="19" ObjectPathId="18" /><Method Name="SetTenantCdnEnabled" Id="20" ObjectPathId="18"><Parameters><Parameter Type="Enum">${cdnType}</Parameter><Parameter Type="Boolean">${enabled}</Parameter></Parameters></Method></Actions><ObjectPaths><Constructor Id="18" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`;
                }
                else {
                    if (this.verbose) {
                        cmd.log(`${(enabled ? 'Enabling' : 'Disabling')} ${(cdnType === 1 ? 'Private' : 'Public')} CDN. Please wait, this might take a moment...`);
                    }
                    if (enabled) {
                        requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="19" ObjectPathId="18" /><Method Name="SetTenantCdnEnabled" Id="20" ObjectPathId="18"><Parameters><Parameter Type="Enum">${cdnType}</Parameter><Parameter Type="Boolean">${enabled}</Parameter></Parameters></Method><Method Name="CreateTenantCdnDefaultOrigins" Id="21" ObjectPathId="18"><Parameters><Parameter Type="Enum">${(cdnType === 1 ? 1 : 0)}</Parameter></Parameters></Method></Actions><ObjectPaths><Constructor Id="18" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`;
                    }
                    else {
                        requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="19" ObjectPathId="18" /><Method Name="SetTenantCdnEnabled" Id="20" ObjectPathId="18"><Parameters><Parameter Type="Enum">${cdnType}</Parameter><Parameter Type="Boolean">${enabled}</Parameter></Parameters></Method></Actions><ObjectPaths><Constructor Id="18" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`;
                    }
                }
            }
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: requestBody
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            else {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    validate() {
        return (args) => {
            if (args.options.type) {
                if (args.options.type !== 'Public' && args.options.type !== 'Both' &&
                    args.options.type !== 'Private') {
                    return `${args.options.type} is not a valid CDN type. Allowed values are Public|Private|Both`;
                }
            }
            const enabled = args.options.enabled ? args.options.enabled.toLowerCase() : undefined;
            if (enabled !== 'true' &&
                enabled !== 'false') {
                return `${args.options.enabled} is not a valid boolean value. Allowed values are true|false`;
            }
            return true;
        };
    }
    options() {
        const options = [
            {
                option: '-e, --enabled <enabled>',
                description: 'Set to true to enable CDN or to false to disable it. Valid values are true|false',
                autocomplete: ['true', 'false']
            },
            {
                option: '-t, --type [type]',
                description: 'Type of CDN to manage. Public|Private|Both. Default Public',
                autocomplete: ['Public', 'Private', 'Both']
            },
            {
                option: '--noDefaultOrigins',
                description: 'Disable creation of default origins'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.CDN_SET).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
        
  Remarks:

    Using the ${chalk.blue('-t, --type')} option you can choose whether you want
    to manage the settings of the Public (default), Private CDN or both. If you
    don't use the option, the command will use the Public CDN.

    Using the ${chalk.blue('-e, --enabled')} option you can specify whether the given
    CDN type should be enabled or disabled. Use ${chalk.grey('true')} to enable the specified
    CDN and ${chalk.grey('false')} to disable it.

    Using the ${chalk.blue('-noDefaultOrigins')} option you can specify to skip
    the creation of the default origins.  

  Examples:
  
    Enable the Office 365 Public CDN on the current tenant
      ${commands_1.default.CDN_SET} --type Public --enabled true

    Disable the Office 365 Public CDN on the current tenant
      ${commands_1.default.CDN_SET} --type Public --enabled false

    Enable the Office 365 Private CDN on the current tenant
      ${commands_1.default.CDN_SET} --type Private --enabled true
  
    Enable the Office 365 Private and Public CDN on the current tenant with
    default origins 
      ${commands_1.default.CDN_SET} --type Both --enabled true 

    Enable the Office 365 Private and Public CDN on the current tenant without
    the default origins 
      ${commands_1.default.CDN_SET} --type Both --enabled true --noDefaultOrigins

  More information:

    General availability of Office 365 CDN
      https://dev.office.com/blogs/general-availability-of-office-365-cdn
`);
    }
}
module.exports = new SpoCdnSetCommand();
//# sourceMappingURL=cdn-set.js.map