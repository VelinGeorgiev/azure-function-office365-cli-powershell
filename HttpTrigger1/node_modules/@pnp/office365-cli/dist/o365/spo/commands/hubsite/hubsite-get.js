"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoHubSiteGetCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.HUBSITE_GET}`;
    }
    get description() {
        return 'Gets information about the specified hub site';
    }
    commandAction(cmd, args, cb) {
        this
            .getSpoUrl(cmd, this.debug)
            .then((spoUrl) => {
            const requestOptions = {
                url: `${spoUrl}/_api/hubsites/getbyid('${encodeURIComponent(args.options.id)}')`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })
            .then((res) => {
            cmd.log(res);
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --id <id>',
                description: 'Hub site ID'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.id) {
                return 'Required parameter id missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    ${chalk.yellow('Attention:')} This command is based on a SharePoint API that is currently
    in preview and is subject to change once the API reached general
    availability.

    If the specified ${chalk.grey('id')} doesn't refer to an existing hub site, you will get
    a ${chalk.grey('ResourceNotFoundException')} error.

  Examples:
  
    Get information about the hub site with ID ${chalk.grey('2c1ba4c4-cd9b-4417-832f-92a34bc34b2a')}
      ${this.name} --id 2c1ba4c4-cd9b-4417-832f-92a34bc34b2a

  More information:

    SharePoint hub sites new in Office 365
      https://techcommunity.microsoft.com/t5/SharePoint-Blog/SharePoint-hub-sites-new-in-Office-365/ba-p/109547
`);
    }
}
module.exports = new SpoHubSiteGetCommand();
//# sourceMappingURL=hubsite-get.js.map