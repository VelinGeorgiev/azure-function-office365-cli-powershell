"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoContentTypeRemoveCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.CONTENTTYPE_REMOVE}`;
    }
    get description() {
        return 'Deletes site content type';
    }
    types() {
        return {
            string: ['id', 'i']
        };
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.id = typeof args.options.id !== 'undefined';
        telemetryProps.name = typeof args.options.name !== 'undefined';
        telemetryProps.confirm = (!(!args.options.confirm)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let contentTypeId = '';
        const contentTypeIdentifierLabel = args.options.id ?
            `with id ${args.options.id}` :
            `with name ${args.options.name}`;
        const removeContentType = () => {
            (() => {
                if (this.debug) {
                    cmd.log(`Retrieving information about the content type ${contentTypeIdentifierLabel}...`);
                }
                if (args.options.id) {
                    return Promise.resolve({ "value": [{ "StringId": args.options.id }] });
                }
                if (this.verbose) {
                    cmd.log(`Looking up the ID of content type ${contentTypeIdentifierLabel}...`);
                }
                const requestOptions = {
                    url: `${args.options.webUrl}/_api/web/availableContentTypes?$filter=(Name eq '${encodeURIComponent(args.options.name)}')`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    json: true
                };
                return request_1.default.get(requestOptions);
            })()
                .then((contentTypeIdResult) => {
                if (contentTypeIdResult &&
                    contentTypeIdResult.value &&
                    contentTypeIdResult.value.length > 0) {
                    contentTypeId = contentTypeIdResult.value[0].StringId;
                    //execute delete operation
                    const requestOptions = {
                        url: `${args.options.webUrl}/_api/web/contenttypes('${encodeURIComponent(contentTypeId)}')`,
                        headers: {
                            'X-HTTP-Method': 'DELETE',
                            'If-Match': '*',
                            'accept': 'application/json;odata=nometadata'
                        },
                        json: true
                    };
                    return request_1.default.post(requestOptions);
                }
                else {
                    return Promise.resolve({ "odata.null": true });
                }
            })
                .then((res) => {
                if (res && res["odata.null"] === true) {
                    cb(new Command_1.CommandError(`Content type not found`));
                    return;
                }
                else {
                    if (this.verbose) {
                        cmd.log(vorpal.chalk.green('DONE'));
                    }
                }
                cb();
            }, (err) => {
                this.handleRejectedODataJsonPromise(err, cmd, cb);
            });
        };
        if (args.options.confirm) {
            removeContentType();
        }
        else {
            cmd.prompt({ type: 'confirm', name: 'continue', default: false, message: `Are you sure you want to remove the content type ${args.options.id || args.options.name}?` }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeContentType();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'Absolute URL of the site where the content type is located'
            },
            {
                option: '-i, --id [id]',
                description: 'The ID of the content type to remove'
            },
            {
                option: '-n, --name [name]',
                description: 'The name of the content type to remove'
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming removal of the content type'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.id && !args.options.name) {
                return 'Specify either the id or the name';
            }
            if (args.options.id && args.options.name) {
                return 'Specify either the id or the name but not both';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If the specified content type is in use by a list and cannot be removed, 
    you will be returned the error:
    ${chalk.grey('Another site or list is still using this content type.')}
    SharePoint will not allow a content type to be removed unless any 
    dependent objects are also emptied from the recycle bin including 
    the second-stage recycle bin.

    The content type you wish to remove can be selected by the ID or Name 
    of the content type. Either ID or Name parameter must be specified.

  Examples:
  
    Remove a site content type by ID
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/contoso-sales --id 0x01007926A45D687BA842B947286090B8F67D
    
    Remove a site content type by Name
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/contoso-sales --name 'My Content Type'

    Remove a site content type without prompting for confirmation
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/contoso-sales --name 'My Content Type' --confirm
    `);
    }
}
module.exports = new SpoContentTypeRemoveCommand();
//# sourceMappingURL=contenttype-remove.js.map