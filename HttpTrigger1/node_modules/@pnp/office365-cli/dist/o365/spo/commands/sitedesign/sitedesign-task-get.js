"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoSiteDesignTaskGetCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.SITEDESIGN_TASK_GET}`;
    }
    get description() {
        return 'Gets information about the specified site design scheduled for execution';
    }
    commandAction(cmd, args, cb) {
        this
            .getSpoUrl(cmd, this.debug)
            .then((spoUrl) => {
            const requestOptions = {
                url: `${spoUrl}/_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.GetSiteDesignTask`,
                headers: {
                    accept: 'application/json;odata=nometadata',
                },
                body: {
                    taskId: args.options.taskId
                },
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            if (!res["odata.null"]) {
                cmd.log(res);
            }
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --taskId <taskId>',
                description: 'The ID of the site design task to get information for'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.taskId) {
                return 'Required parameter taskId missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.taskId)) {
                return `${args.options.taskId} is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Get information about the specified site design scheduled for execution
      ${this.name} --taskId 6ec3ca5b-d04b-4381-b169-61378556d76e

  More information:

    SharePoint site design and site script overview
      https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/site-design-overview
`);
    }
}
module.exports = new SpoSiteDesignTaskGetCommand();
//# sourceMappingURL=sitedesign-task-get.js.map