"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const propertybag_base_1 = require("./propertybag-base");
const ClientSvc_1 = require("../../ClientSvc");
const vorpal = require('../../../../vorpal-init');
class SpoPropertyBagSetCommand extends propertybag_base_1.SpoPropertyBagBaseCommand {
    get name() {
        return `${commands_1.default.PROPERTYBAG_SET}`;
    }
    get description() {
        return 'Sets the value of the specified property in the property bag. Adds the property if it does not exist';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.folder = (!(!args.options.folder)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const clientSvcCommons = new ClientSvc_1.ClientSvc(cmd, this.debug);
        let webIdentityResp;
        this
            .getRequestDigest(args.options.webUrl)
            .then((contextResponse) => {
            this.formDigestValue = contextResponse.FormDigestValue;
            return clientSvcCommons.getCurrentWebIdentity(args.options.webUrl, this.formDigestValue);
        })
            .then((identityResp) => {
            webIdentityResp = identityResp;
            // Check if web no script enabled or not
            // Cannot set property bag value if no script is enabled
            return this.isNoScriptSite(identityResp, args.options, clientSvcCommons);
        })
            .then((isNoScriptSite) => {
            if (isNoScriptSite) {
                return Promise.reject('Site has NoScript enabled, and setting property bag values is not supported');
            }
            const opts = args.options;
            if (opts.folder) {
                // get the folder guid instead of the web guid
                return clientSvcCommons.getFolderIdentity(webIdentityResp.objectIdentity, opts.webUrl, opts.folder, this.formDigestValue);
            }
            return new Promise(resolve => { return resolve(webIdentityResp); });
        })
            .then((identityResp) => {
            return this.setProperty(identityResp, args.options, cmd);
        })
            .then((res) => {
            if (this.verbose) {
                cmd.log('DONE');
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    setProperty(identityResp, options, cmd) {
        return propertybag_base_1.SpoPropertyBagBaseCommand.setProperty(options.key, options.value, options.webUrl, this.formDigestValue, identityResp, cmd, this.debug, options.folder);
    }
    isNoScriptSite(webIdentityResp, options, clientSvcCommons) {
        return propertybag_base_1.SpoPropertyBagBaseCommand.isNoScriptSite(options.webUrl, this.formDigestValue, webIdentityResp, clientSvcCommons);
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site in which the property should be set'
            },
            {
                option: '-k, --key <key>',
                description: 'Key of the property to be set. Case-sensitive'
            },
            {
                option: '-v, --value <value>',
                description: 'Value of the property to be set'
            },
            {
                option: '-f, --folder [folder]',
                description: 'Site-relative URL of the folder on which the property should be set',
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl) !== true) {
                return 'Missing required option url';
            }
            if (!args.options.key) {
                return 'Missing required option key';
            }
            if (!args.options.value) {
                return 'Missing required option value';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.PROPERTYBAG_SET).helpInformation());
        log(`  Examples:

    Sets the value of the ${chalk.grey('key1')} property in the property bag of site
    ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_SET} --webUrl https://contoso.sharepoint.com/sites/test --key key1 --value value1

    Sets the value of the ${chalk.grey('key1')} property in the property bag of the root folder
    of site ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_SET} --webUrl https://contoso.sharepoint.com/sites/test --key key1 --value value1 --folder /

    Sets the value of the ${chalk.grey('key1')} property in the property bag of a document
    library located in site ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_SET} --webUrl https://contoso.sharepoint.com/sites/test --key key1 --value value1 --folder '/Shared Documents'
    
    Sets the value of the ${chalk.grey('key1')} property in the property bag of a folder
    in a document library located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_SET} --webUrl https://contoso.sharepoint.com/sites/test --key key1 --value value1 --folder '/Shared Documents/MyFolder'

    Sets the value of the ${chalk.grey('key1')} property in the property bag of a list in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_SET} --webUrl https://contoso.sharepoint.com/sites/test --key key1 --value value1 --folder /Lists/MyList
    `);
    }
}
module.exports = new SpoPropertyBagSetCommand();
//# sourceMappingURL=propertybag-set.js.map