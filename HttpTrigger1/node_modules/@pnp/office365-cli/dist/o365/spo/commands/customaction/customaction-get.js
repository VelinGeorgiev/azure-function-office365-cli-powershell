"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoCustomActionGetCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.CUSTOMACTION_GET}`;
    }
    get description() {
        return 'Gets details for the specified custom action';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.scope = args.options.scope || 'All';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        (() => {
            if (args.options.scope && args.options.scope.toLowerCase() !== "all") {
                return this.getCustomAction(args.options);
            }
            return this.searchAllScopes(args.options);
        })()
            .then((customAction) => {
            if (customAction["odata.null"] === true) {
                if (this.verbose) {
                    cmd.log(`Custom action with id ${args.options.id} not found`);
                }
            }
            else {
                cmd.log({
                    ClientSideComponentId: customAction.ClientSideComponentId,
                    ClientSideComponentProperties: customAction.ClientSideComponentProperties,
                    CommandUIExtension: customAction.CommandUIExtension,
                    Description: customAction.Description,
                    Group: customAction.Group,
                    Id: customAction.Id,
                    ImageUrl: customAction.ImageUrl,
                    Location: customAction.Location,
                    Name: customAction.Name,
                    RegistrationId: customAction.RegistrationId,
                    RegistrationType: customAction.RegistrationType,
                    Rights: JSON.stringify(customAction.Rights),
                    Scope: this.humanizeScope(customAction.Scope),
                    ScriptBlock: customAction.ScriptBlock,
                    ScriptSrc: customAction.ScriptSrc,
                    Sequence: customAction.Sequence,
                    Title: customAction.Title,
                    Url: customAction.Url,
                    VersionOfUserCustomAction: customAction.VersionOfUserCustomAction
                });
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    getCustomAction(options) {
        const requestOptions = {
            url: `${options.url}/_api/${options.scope}/UserCustomActions('${encodeURIComponent(options.id)}')`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        return request_1.default.get(requestOptions);
    }
    /**
     * Get request with `web` scope is send first.
     * If custom action not found then
     * another get request is send with `site` scope.
     */
    searchAllScopes(options) {
        return new Promise((resolve, reject) => {
            options.scope = "Web";
            this
                .getCustomAction(options)
                .then((webResult) => {
                if (webResult["odata.null"] !== true) {
                    return resolve(webResult);
                }
                options.scope = "Site";
                this
                    .getCustomAction(options)
                    .then((siteResult) => {
                    return resolve(siteResult);
                }, (err) => {
                    reject(err);
                });
            }, (err) => {
                reject(err);
            });
        });
    }
    humanizeScope(scope) {
        switch (scope) {
            case 2:
                return "Site";
            case 3:
                return "Web";
        }
        return `${scope}`;
    }
    options() {
        const options = [
            {
                option: '-i, --id <id>',
                description: 'Id (Guid) of the custom action to retrieve'
            },
            {
                option: '-u, --url <url>',
                description: 'Url of the site (collection) to retrieve the custom action from'
            },
            {
                option: '-s, --scope [scope]',
                description: 'Scope of the custom action. Allowed values Site|Web|All. Default All',
                autocomplete: ['Site', 'Web', 'All']
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (Utils_1.default.isValidGuid(args.options.id) === false) {
                return `${args.options.id} is not valid. Custom action id (Guid) expected.`;
            }
            if (SpoCommand_1.default.isValidSharePointUrl(args.options.url) !== true) {
                return 'Missing required option url';
            }
            if (args.options.scope) {
                if (args.options.scope !== 'Site' &&
                    args.options.scope !== 'Web' &&
                    args.options.scope !== 'All') {
                    return `${args.options.scope} is not a valid custom action scope. Allowed values are Site|Web|All`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.CUSTOMACTION_GET).helpInformation());
        log(`  Examples:
  
    Return details about the user custom action with ID ${chalk.grey('058140e3-0e37-44fc-a1d3-79c487d371a3')}
    located in site or site collection ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_GET} -i 058140e3-0e37-44fc-a1d3-79c487d371a3 -u https://contoso.sharepoint.com/sites/test

    Return details about the user custom action with ID ${chalk.grey('058140e3-0e37-44fc-a1d3-79c487d371a3')}
    located in site or site collection ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_GET} --id 058140e3-0e37-44fc-a1d3-79c487d371a3 --url https://contoso.sharepoint.com/sites/test

    Return details about the user custom action with ID ${chalk.grey('058140e3-0e37-44fc-a1d3-79c487d371a3')}
    located in site collection ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_GET} -i 058140e3-0e37-44fc-a1d3-79c487d371a3 -u https://contoso.sharepoint.com/sites/test -s Site

    Return details about the user custom action with ID ${chalk.grey('058140e3-0e37-44fc-a1d3-79c487d371a3')}
    located in site ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_GET} --id 058140e3-0e37-44fc-a1d3-79c487d371a3 --url https://contoso.sharepoint.com/sites/test --scope Web

  More information:

    UserCustomAction REST API resources:
      https://msdn.microsoft.com/en-us/library/office/dn531432.aspx#bk_UserCustomAction
      `);
    }
}
module.exports = new SpoCustomActionGetCommand();
//# sourceMappingURL=customaction-get.js.map