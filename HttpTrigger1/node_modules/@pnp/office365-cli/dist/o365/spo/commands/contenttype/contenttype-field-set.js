"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoContentTypeFieldSetCommand extends SpoCommand_1.default {
    constructor() {
        super();
        this.requestDigest = '';
        this.siteId = '';
        this.webId = '';
        this.fieldLink = null;
    }
    get name() {
        return `${commands_1.default.CONTENTTYPE_FIELD_SET}`;
    }
    get description() {
        return 'Adds or updates a site column reference in a site content type';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.hidden = args.options.hidden;
        telemetryProps.required = args.options.required;
        return telemetryProps;
    }
    types() {
        return {
            string: ['contentTypeId', 'c']
        };
    }
    commandAction(cmd, args, cb) {
        let schemaXmlWithResourceTokens = '';
        if (this.verbose) {
            cmd.log(`Retrieving field link for field ${args.options.fieldId}...`);
        }
        const requestOptions = {
            url: `${args.options.webUrl}/_api/web/contenttypes('${encodeURIComponent(args.options.contentTypeId)}')/fieldlinks('${args.options.fieldId}')`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res["odata.null"] !== true) {
                if (this.verbose) {
                    cmd.log('Field link found');
                }
                this.fieldLink = res;
                return Promise.resolve(undefined);
            }
            if (this.verbose) {
                cmd.log('Field link not found. Creating...');
                cmd.log(`Retrieving information about site column ${args.options.fieldId}...`);
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/fields('${args.options.fieldId}')?$select=SchemaXmlWithResourceTokens`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })
            .then((res) => {
            if (!res) {
                return Promise.resolve();
            }
            schemaXmlWithResourceTokens = res.SchemaXmlWithResourceTokens;
            return this.createFieldLink(cmd, args, schemaXmlWithResourceTokens);
        })
            .then(() => {
            if (this.fieldLink) {
                return Promise.resolve(undefined);
            }
            if (this.verbose) {
                cmd.log(`Retrieving information about field link for field ${args.options.fieldId}...`);
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/contenttypes('${encodeURIComponent(args.options.contentTypeId)}')/fieldlinks('${args.options.fieldId}')`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })
            .then((res) => {
            if (res && res["odata.null"] !== true) {
                this.fieldLink = res;
            }
            if (!this.fieldLink) {
                return Promise.reject(`Couldn't find field link for field ${args.options.fieldId}`);
            }
            let updateHidden = false;
            let updateRequired = false;
            if (typeof args.options.hidden !== 'undefined' &&
                this.fieldLink.Hidden !== (args.options.hidden === 'true')) {
                updateHidden = true;
            }
            if (typeof args.options.required !== 'undefined' &&
                this.fieldLink.Required !== (args.options.required === 'true')) {
                updateRequired = true;
            }
            if (!updateHidden && !updateRequired) {
                if (this.verbose) {
                    cmd.log('Field link already up-to-date');
                }
                return Promise.reject('DONE');
            }
            if (this.siteId) {
                return Promise.resolve(undefined);
            }
            if (this.verbose) {
                cmd.log(`Retrieving site collection id...`);
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/site?$select=Id`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })
            .then((res) => {
            if (res) {
                this.siteId = res.Id;
            }
            if (this.webId) {
                return Promise.resolve(undefined);
            }
            if (this.verbose) {
                cmd.log(`Retrieving site id...`);
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web?$select=Id`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })
            .then((res) => {
            if (res) {
                this.webId = res.Id;
            }
            if (this.verbose) {
                cmd.log(`Updating field link...`);
            }
            const requiredProperty = typeof args.options.required !== 'undefined' &&
                this.fieldLink.Required !== (args.options.required === 'true') ? `<SetProperty Id="122" ObjectPathId="121" Name="Required"><Parameter Type="Boolean">${args.options.required}</Parameter></SetProperty>` : '';
            const hiddenProperty = typeof args.options.hidden !== 'undefined' &&
                this.fieldLink.Hidden !== (args.options.hidden === 'true') ? `<SetProperty Id="123" ObjectPathId="121" Name="Hidden"><Parameter Type="Boolean">${args.options.hidden}</Parameter></SetProperty>` : '';
            const requestOptions = {
                url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': this.requestDigest
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions>${requiredProperty}${hiddenProperty}<Method Name="Update" Id="124" ObjectPathId="19"><Parameters><Parameter Type="Boolean">true</Parameter></Parameters></Method></Actions><ObjectPaths><Identity Id="121" Name="716a7b9e-3012-0000-22fb-84acfcc67d04|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${this.siteId}:web:${this.webId}:contenttype:${Utils_1.default.escapeXml(args.options.contentTypeId)}:fl:${this.fieldLink.Id}" /><Identity Id="19" Name="716a7b9e-3012-0000-22fb-84acfcc67d04|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${this.siteId}:web:${this.webId}:contenttype:${Utils_1.default.escapeXml(args.options.contentTypeId)}" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
            }
            else {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
                cb();
            }
        }, (error) => {
            if (error === 'DONE') {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
                cb();
            }
            else {
                this.handleRejectedODataJsonPromise(error, cmd, cb);
            }
        });
    }
    createFieldLink(cmd, args, schemaXmlWithResourceTokens) {
        return new Promise((resolve, reject) => {
            let requiresUpdate = false;
            const match = /(<Field[^>]+>)(.*)/.exec(schemaXmlWithResourceTokens);
            let xField = match[1];
            const allowDeletion = /AllowDeletion="([^"]+)"/.exec(xField);
            if (!allowDeletion) {
                requiresUpdate = true;
                xField = xField.replace('>', ' AllowDeletion="TRUE">') + match[2];
            }
            else {
                if (allowDeletion[1] !== 'TRUE') {
                    requiresUpdate = true;
                    xField = xField.replace(allowDeletion[0], 'AllowDeletion="TRUE"') + match[2];
                }
            }
            this
                .updateField(xField, requiresUpdate, cmd, args)
                .then(() => {
                if (this.verbose) {
                    cmd.log(`Retrieving site collection id...`);
                }
                const requestOptions = {
                    url: `${args.options.webUrl}/_api/site?$select=Id`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    json: true
                };
                return request_1.default.get(requestOptions);
            })
                .then((res) => {
                this.siteId = res.Id;
                if (this.verbose) {
                    cmd.log(`Retrieving site id...`);
                }
                const requestOptions = {
                    url: `${args.options.webUrl}/_api/web?$select=Id`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    json: true
                };
                return request_1.default.get(requestOptions);
            })
                .then((res) => {
                this.webId = res.Id;
                return this.ensureRequestDigest(args.options.webUrl, cmd);
            })
                .then(() => {
                const requestOptions = {
                    url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': this.requestDigest
                    },
                    body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="5" ObjectPathId="4" /><ObjectIdentityQuery Id="6" ObjectPathId="4" /><Method Name="Update" Id="7" ObjectPathId="1"><Parameters><Parameter Type="Boolean">true</Parameter></Parameters></Method></Actions><ObjectPaths><Identity Id="2" Name="d6667b9e-50fb-0000-2693-032ae7a0df25|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${this.siteId}:web:${this.webId}:field:${args.options.fieldId}" /><Method Id="4" ParentId="3" Name="Add"><Parameters><Parameter TypeId="{63fb2c92-8f65-4bbb-a658-b6cd294403f4}"><Property Name="Field" ObjectPathId="2" /></Parameter></Parameters></Method><Identity Id="1" Name="d6667b9e-80f4-0000-2693-05528ff416bf|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${this.siteId}:web:${this.webId}:contenttype:${Utils_1.default.escapeXml(args.options.contentTypeId)}" /><Property Id="3" ParentId="1" Name="FieldLinks" /></ObjectPaths></Request>`
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    reject(response.ErrorInfo.ErrorMessage);
                }
                else {
                    resolve();
                }
            }, (error) => {
                reject(error);
            });
        });
    }
    updateField(schemaXml, requiresUpdate, cmd, args) {
        return new Promise((resolve, reject) => {
            if (!requiresUpdate) {
                if (this.verbose) {
                    cmd.log(`Schema of field ${args.options.fieldId} is already up-to-date`);
                }
                resolve();
                return;
            }
            this
                .ensureRequestDigest(args.options.webUrl, cmd)
                .then(() => {
                if (this.verbose) {
                    cmd.log(`Updating field schema...`);
                }
                const requestOptions = {
                    url: `${args.options.webUrl}/_api/web/fields('${args.options.fieldId}')`,
                    headers: {
                        accept: 'application/json;odata=nometadata',
                        'content-type': 'application/json;odata=nometadata',
                        'X-HTTP-Method': 'MERGE',
                        'x-requestdigest': this.requestDigest
                    },
                    body: {
                        SchemaXml: schemaXml
                    },
                    json: true
                };
                return request_1.default.post(requestOptions);
            })
                .then(() => {
                resolve();
            }, (error) => {
                reject(error);
            });
        });
    }
    ensureRequestDigest(siteUrl, cmd) {
        return new Promise((resolve, reject) => {
            if (this.requestDigest) {
                if (this.debug) {
                    cmd.log('Request digest already present');
                }
                resolve();
                return;
            }
            if (this.debug) {
                cmd.log('Retrieving request digest...');
            }
            this
                .getRequestDigest(siteUrl)
                .then((res) => {
                this.requestDigest = res.FormDigestValue;
                resolve();
            }, (error) => {
                reject(error);
            });
        });
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'Absolute URL of the site where the content type is located'
            },
            {
                option: '-c, --contentTypeId <contentTypeId>',
                description: 'ID of the content type on which the field reference should be set'
            },
            {
                option: '-f, --fieldId <fieldId>',
                description: 'ID of the field to which the reference should be set'
            },
            {
                option: '-r, --required [required]',
                description: 'Set to true, if the field should be required or to false if it should be optional'
            },
            {
                option: '-h, --hidden [hidden]',
                description: 'Set to true, if the field should be hidden or to false if it should be visible'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return `Missing required option webUrl`;
            }
            if (!args.options.contentTypeId) {
                return 'Missing required option contentTypeId';
            }
            if (!args.options.fieldId) {
                return 'Missing required option fieldId';
            }
            if (!Utils_1.default.isValidGuid(args.options.fieldId)) {
                return `${args.options.fieldId} is not a valid GUID`;
            }
            if (typeof args.options.required !== 'undefined') {
                if (args.options.required !== 'true' &&
                    args.options.required !== 'false') {
                    return `${args.options.required} is not a valid boolean value. Allowed values are true|false`;
                }
            }
            if (typeof args.options.hidden !== 'undefined') {
                if (args.options.hidden !== 'true' &&
                    args.options.hidden !== 'false') {
                    return `${args.options.hidden} is not a valid boolean value. Allowed values are true|false`;
                }
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.CONTENTTYPE_FIELD_SET).helpInformation());
        log(`  Remarks:

    If the field reference already exists, the command will update its ${chalk.grey(`required`)}
    and ${chalk.grey(`hidden`)} properties as specified in the command.

  Examples:
  
    Add the specified site column to the specified content type as an optional
    and visible field
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/portal --contentTypeId 0x01007926A45D687BA842B947286090B8F67D --fieldId ebe7e498-44ff-43da-a7e5-99b444f656a5

    Add the specified site column to the specified content type as a required
    field
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/portal --contentTypeId 0x01007926A45D687BA842B947286090B8F67D --fieldId ebe7e498-44ff-43da-a7e5-99b444f656a5 --required true

    Update the existing site column reference in the specified content type
    to optional
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/portal --contentTypeId 0x01007926A45D687BA842B947286090B8F67D --fieldId ebe7e498-44ff-43da-a7e5-99b444f656a5 --required false
`);
    }
}
module.exports = new SpoContentTypeFieldSetCommand();
//# sourceMappingURL=contenttype-field-set.js.map