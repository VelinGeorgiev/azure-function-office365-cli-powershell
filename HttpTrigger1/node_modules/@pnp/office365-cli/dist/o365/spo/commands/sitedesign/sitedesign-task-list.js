"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoSiteDesignTaskListCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.SITEDESIGN_TASK_LIST}`;
    }
    get description() {
        return 'Lists site designs scheduled for execution on the specified site';
    }
    commandAction(cmd, args, cb) {
        const requestOptions = {
            url: `${args.options.webUrl}/_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.GetSiteDesignTasks`,
            headers: {
                accept: 'application/json;odata=nometadata',
            },
            json: true
        };
        request_1.default.post(requestOptions)
            .then((res) => {
            if (args.options.output === 'json') {
                cmd.log(res.value);
            }
            else {
                cmd.log(res.value.map(d => {
                    return {
                        ID: d.ID,
                        SiteDesignID: d.SiteDesignID,
                        LogonName: d.LogonName
                    };
                }));
            }
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site for which to list site designs scheduled for execution'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    List site designs scheduled for execution on the specified site
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/team-a

  More information:

    SharePoint site design and site script overview
      https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/site-design-overview
`);
    }
}
module.exports = new SpoSiteDesignTaskListCommand();
//# sourceMappingURL=sitedesign-task-list.js.map