"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoSiteDesignRightsRevokeCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.SITEDESIGN_RIGHTS_REVOKE}`;
    }
    get description() {
        return 'Revokes access from a site design for one or more principals';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.confirm = args.options.confirm || false;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const revokePermissions = () => {
            let spoUrl = '';
            this
                .getSpoUrl(cmd, this.debug)
                .then((_spoUrl) => {
                spoUrl = _spoUrl;
                return this.getRequestDigest(spoUrl);
            })
                .then((res) => {
                const requestOptions = {
                    url: `${spoUrl}/_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.RevokeSiteDesignRights`,
                    headers: {
                        'X-RequestDigest': res.FormDigestValue,
                        'content-type': 'application/json;charset=utf-8',
                        accept: 'application/json;odata=nometadata'
                    },
                    body: {
                        id: args.options.id,
                        principalNames: args.options.principals.split(',').map(p => p.trim())
                    },
                    json: true
                };
                return request_1.default.post(requestOptions);
            })
                .then(() => {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
                cb();
            }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
        };
        if (args.options.confirm) {
            revokePermissions();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to revoke access to site design ${args.options.id} from the specified users?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    revokePermissions();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '-i, --id <id>',
                description: 'The ID of the site design to revoke rights from'
            },
            {
                option: '-p, --principals <principals>',
                description: 'Comma-separated list of principals to revoke view rights from. Principals can be users or mail-enabled security groups in the form of "alias" or "alias@<domain name>.com"'
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming removing the site design'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.id) {
                return 'Required parameter id missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
            if (!args.options.principals) {
                return 'Required parameter principals missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If the specified ${chalk.grey('id')} doesn't refer to an existing site design, you will get
    a ${chalk.grey('File not found')} error.

    If all principals have rights revoked on the site design, the site design
    becomes viewable to everyone.

    If you try to revoke access for a user that doesn't have access granted
    to the specified site design you will get a
    ${chalk.grey('The specified user or domain group was not found')} error.

  Examples:

    Revoke access to the site design with ID
    ${chalk.grey('2c1ba4c4-cd9b-4417-832f-92a34bc34b2a')} from user with alias ${chalk.grey('PattiF')}.
    Will prompt for confirmation before revoking the access
      ${this.name} --id 2c1ba4c4-cd9b-4417-832f-92a34bc34b2a --principals PattiF

    Revoke access to the site design with ID
    ${chalk.grey('2c1ba4c4-cd9b-4417-832f-92a34bc34b2a')} from users with aliases ${chalk.grey('PattiF')} and
    ${chalk.grey('AdeleV')} without prompting for confirmation
      ${this.name} --id 2c1ba4c4-cd9b-4417-832f-92a34bc34b2a --principals "PattiF,AdeleV" --confirm

  More information:

    SharePoint site design and site script overview
      https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/site-design-overview
`);
    }
}
module.exports = new SpoSiteDesignRightsRevokeCommand();
//# sourceMappingURL=sitedesign-rights-revoke.js.map