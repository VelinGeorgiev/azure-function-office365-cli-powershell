"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoFieldRemoveCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.FIELD_REMOVE}`;
    }
    get description() {
        return 'Removes the specified list- or site column';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = typeof args.options.listId !== 'undefined';
        telemetryProps.listTitle = typeof args.options.listTitle !== 'undefined';
        telemetryProps.listUrl = typeof args.options.listUrl !== 'undefined';
        telemetryProps.id = typeof args.options.id !== 'undefined';
        telemetryProps.fieldTitle = typeof args.options.fieldTitle !== 'undefined';
        telemetryProps.confirm = (!(!args.options.confirm)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const removeField = () => {
            if (this.verbose) {
                cmd.log(`Removing field in site at ${args.options.webUrl}...`);
            }
            let listRestUrl = '';
            if (args.options.listId) {
                listRestUrl = `lists(guid'${encodeURIComponent(args.options.listId)}')/`;
            }
            else if (args.options.listTitle) {
                listRestUrl = `lists/getByTitle('${encodeURIComponent(args.options.listTitle)}')/`;
            }
            else if (args.options.listUrl) {
                const listServerRelativeUrl = Utils_1.default.getServerRelativePath(args.options.webUrl, args.options.listUrl);
                listRestUrl = `GetList('${encodeURIComponent(listServerRelativeUrl)}')/`;
            }
            let fieldRestUrl = '';
            if (args.options.id) {
                fieldRestUrl = `/getbyid('${encodeURIComponent(args.options.id)}')`;
            }
            else {
                fieldRestUrl = `/getbyinternalnameortitle('${encodeURIComponent(args.options.fieldTitle)}')`;
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/${listRestUrl}fields${fieldRestUrl}`,
                method: 'POST',
                headers: {
                    'X-HTTP-Method': 'DELETE',
                    'If-Match': '*',
                    'accept': 'application/json;odata=nometadata'
                },
                json: true
            };
            request_1.default
                .post(requestOptions)
                .then(() => {
                // REST post call doesn't return anything
                cb();
            }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
        };
        if (args.options.confirm) {
            removeField();
        }
        else {
            let confirmMessage = `Are you sure you want to remove the field ${args.options.id || args.options.fieldTitle} `;
            if (args.options.listId || args.options.listTitle) {
                confirmMessage += `from list ${args.options.listId || args.options.listTitle}?`;
            }
            else {
                confirmMessage += `from site ${args.options.webUrl}?`;
            }
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: confirmMessage,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeField();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'Absolute URL of the site where the field to remove is located'
            },
            {
                option: '-l, --listTitle [listTitle]',
                description: 'Title of the list where the field is located. Specify only one of listTitle, listId or listUrl'
            },
            {
                option: '--listId [listId]',
                description: 'ID of the list where the field is located. Specify only one of listTitle, listId or listUrl'
            },
            {
                option: '--listUrl [listUrl]',
                description: 'Server- or web-relative URL of the list where the field is located. Specify only one of listTitle, listId or listUrl'
            },
            {
                option: '-i, --id [id]',
                description: 'The ID of the field to remove. Specify id or fieldTitle but not both'
            },
            {
                option: '-t, --fieldTitle [fieldTitle]',
                description: 'The display name (case-sensitive) of the field to remove. Specify id or fieldTitle but not both'
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming removing the field'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.id && !args.options.fieldTitle) {
                return 'Specify id or fieldTitle, one is required';
            }
            if (args.options.id && !Utils_1.default.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
            if (args.options.listId && !Utils_1.default.isValidGuid(args.options.listId)) {
                return `${args.options.listId} is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:
  
    If the specified field not exists, you will get an ${chalk.grey('Invalid field name')} error.
        
  Examples:

    Remove the site column with the specified ID, located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/contoso-sales')}
      ${commands_1.default.FIELD_REMOVE} --webUrl https://contoso.sharepoint.com/sites/contoso-sales --id 5ee2dd25-d941-455a-9bdb-7f2c54aed11b
    
    Remove the list column with the specified ID, located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/contoso-sales')}.
    Retrieves the list by its title
      ${commands_1.default.FIELD_REMOVE} --webUrl https://contoso.sharepoint.com/sites/contoso-sales --listTitle Events --id 5ee2dd25-d941-455a-9bdb-7f2c54aed11b

    Remove the list column with the specified display name, located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/contoso-sales')}.
    Retrieves the list by its url
      ${commands_1.default.FIELD_REMOVE} --webUrl https://contoso.sharepoint.com/sites/contoso-sales --listUrl 'Lists/Events' --fieldTitle 'Title'     
      `);
    }
}
module.exports = new SpoFieldRemoveCommand();
//# sourceMappingURL=field-remove.js.map