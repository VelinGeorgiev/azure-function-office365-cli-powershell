"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const ClientSvc_1 = require("../../ClientSvc");
const vorpal = require('../../../../vorpal-init');
class SpoFolderRenameCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.FOLDER_RENAME;
    }
    get description() {
        return 'Renames a folder';
    }
    commandAction(cmd, args, cb) {
        const clientSvc = new ClientSvc_1.ClientSvc(cmd, this.debug);
        let formDigestValue = '';
        this
            .getRequestDigest(args.options.webUrl)
            .then((contextResponse) => {
            formDigestValue = contextResponse.FormDigestValue;
            return clientSvc.getCurrentWebIdentity(args.options.webUrl, formDigestValue);
        })
            .then((webIdentityResp) => {
            return clientSvc.getFolderIdentity(webIdentityResp.objectIdentity, args.options.webUrl, args.options.folderUrl, formDigestValue);
        })
            .then((folderObjectIdentity) => {
            if (this.verbose) {
                cmd.log(`Renaming folder ${args.options.folderUrl} to ${args.options.name}`);
            }
            const serverRelativeUrl = Utils_1.default.getServerRelativePath(args.options.webUrl, args.options.folderUrl);
            const serverRelativeUrlWithoutOldFolder = serverRelativeUrl.substring(0, serverRelativeUrl.lastIndexOf('/'));
            const renamedServerRelativeUrl = `${serverRelativeUrlWithoutOldFolder}/${args.options.name}`;
            const requestOptions = {
                url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': formDigestValue
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><Method Name="MoveTo" Id="32" ObjectPathId="26"><Parameters><Parameter Type="String">${renamedServerRelativeUrl}</Parameter></Parameters></Method></Actions><ObjectPaths><Identity Id="26" Name="${folderObjectIdentity.objectIdentity}" /></ObjectPaths></Request>`
            };
            return new Promise((resolve, reject) => {
                request_1.default.post(requestOptions).then((res) => {
                    const json = JSON.parse(res);
                    const contents = json.find(x => { return x['ErrorInfo']; });
                    if (contents && contents.ErrorInfo) {
                        return reject(contents.ErrorInfo.ErrorMessage || 'ClientSvc unknown error');
                    }
                    return resolve();
                }, (err) => { reject(err); });
            });
        })
            .then(() => {
            if (this.verbose) {
                cmd.log('DONE');
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site where the folder to be renamed is located'
            },
            {
                option: '-f, --folderUrl <folderUrl>',
                description: 'Site-relative URL of the folder (including the folder)'
            },
            {
                option: '-n, --name <name>',
                description: 'New name for the target folder'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.folderUrl) {
                return 'Required parameter folderUrl missing';
            }
            if (!args.options.name) {
                return 'Required parameter name missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Renames a folder with site-relative URL ${chalk.grey('/Shared Documents/My Folder 1')}
    located in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.FOLDER_RENAME} --webUrl https://contoso.sharepoint.com/sites/project-x --folderUrl '/Shared Documents/My Folder 1' --name 'My Folder 2'
    `);
    }
}
module.exports = new SpoFolderRenameCommand();
//# sourceMappingURL=folder-rename.js.map