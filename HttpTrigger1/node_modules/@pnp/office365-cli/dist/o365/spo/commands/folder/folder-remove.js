"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoFolderRemoveCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.FOLDER_REMOVE;
    }
    get description() {
        return 'Deletes the specified folder';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.recycle = (!(!args.options.recycle)).toString();
        telemetryProps.confirm = (!(!args.options.confirm)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const removeFolder = () => {
            if (this.verbose) {
                cmd.log(`Removing folder in site at ${args.options.webUrl}...`);
            }
            const serverRelativeUrl = Utils_1.default.getServerRelativePath(args.options.webUrl, args.options.folderUrl);
            let requestUrl = `${args.options.webUrl}/_api/web/GetFolderByServerRelativeUrl('${encodeURIComponent(serverRelativeUrl)}')`;
            if (args.options.recycle) {
                requestUrl += `/recycle()`;
            }
            const requestOptions = {
                url: requestUrl,
                method: 'POST',
                headers: {
                    'X-HTTP-Method': 'DELETE',
                    'If-Match': '*',
                    'accept': 'application/json;odata=nometadata'
                },
                json: true
            };
            request_1.default
                .post(requestOptions)
                .then(() => {
                if (this.verbose) {
                    cmd.log('DONE');
                }
                cb();
            }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
        };
        if (args.options.confirm) {
            removeFolder();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to ${args.options.recycle ? "recycle" : "remove"} the folder ${args.options.folderUrl} located in site ${args.options.webUrl}?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeFolder();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site where the folder to be deleted is located'
            },
            {
                option: '-f, --folderUrl <folderUrl>',
                description: 'Site-relative URL of the folder to delete'
            },
            {
                option: '--recycle',
                description: 'Recycles the folder instead of actually deleting it'
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming deleting the folder'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.folderUrl) {
                return 'Required parameter folderUrl missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:
  
    The ${chalk.blue(this.name)} command will remove folder only if it is empty.
    If the folder contains any files, deleting the folder will fail.
        
  Examples:

    Removes a folder with site-relative URL ${chalk.grey('/Shared Documents/My Folder')} located
    in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.FOLDER_REMOVE} --webUrl https://contoso.sharepoint.com/sites/project-x --folderUrl '/Shared Documents/My Folder'

    Moves a folder with site-relative URL ${chalk.grey('/Shared Documents/My Folder')} located in
    site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
    to the site recycle bin
      ${commands_1.default.FOLDER_REMOVE} --webUrl https://contoso.sharepoint.com/sites/project-x --folderUrl '/Shared Documents/My Folder' --recycle
    `);
    }
}
module.exports = new SpoFolderRemoveCommand();
//# sourceMappingURL=folder-remove.js.map