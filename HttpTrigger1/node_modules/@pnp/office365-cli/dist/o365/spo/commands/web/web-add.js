"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const base_permissions_1 = require("../../base-permissions");
const vorpal = require('../../../../vorpal-init');
class SpoWebAddCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.WEB_ADD;
    }
    get description() {
        return 'Create new subsite';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.description = (!(!args.options.description)).toString();
        telemetryProps.locale = args.options.locale || '1033';
        telemetryProps.breakInheritance = args.options.breakInheritance || false;
        telemetryProps.inheritNavigation = args.options.inheritNavigation || false;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let siteInfo = null;
        let subsiteFullUrl = '';
        this
            .getRequestDigest(args.options.parentWebUrl)
            .then((res) => {
            const requestOptions = {
                url: `${args.options.parentWebUrl}/_api/web/webinfos/add`,
                headers: {
                    'content-type': 'application/json;odata=nometadata',
                    accept: 'application/json;odata=nometadata',
                    'X-RequestDigest': res.FormDigestValue
                },
                json: true,
                body: {
                    parameters: {
                        Url: args.options.webUrl,
                        Title: args.options.title,
                        Description: args.options.description,
                        Language: args.options.locale,
                        WebTemplate: args.options.webTemplate,
                        UseUniquePermissions: args.options.breakInheritance
                    }
                }
            };
            if (this.verbose) {
                cmd.log(`Creating subsite ${args.options.parentWebUrl}/${args.options.webUrl}...`);
            }
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            siteInfo = res;
            if (!args.options.inheritNavigation) {
                return Promise.reject(SpoWebAddCommand.DONE);
            }
            if (this.verbose) {
                cmd.log("Setting inheriting navigation from the parent site...");
            }
            subsiteFullUrl = `${args.options.parentWebUrl}/${encodeURIComponent(args.options.webUrl)}`;
            const requestOptions = {
                url: `${subsiteFullUrl}/_api/web/effectivebasepermissions`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })
            .then((res) => {
            const permissions = new base_permissions_1.BasePermissions();
            permissions.high = res.High;
            permissions.low = res.Low;
            /// Detects if the site in question has no script enabled or not. 
            /// Detection is done by verifying if the AddAndCustomizePages permission is missing.
            /// 
            /// See https://support.office.com/en-us/article/Turn-scripting-capabilities-on-or-off-1f2c515f-5d7e-448a-9fd7-835da935584f
            /// for the effects of NoScript
            if (!permissions.has(base_permissions_1.PermissionKind.AddAndCustomizePages)) {
                if (this.verbose) {
                    cmd.log("No script is enabled. Skipping the InheritParentNavigation settings.");
                }
                return Promise.reject(SpoWebAddCommand.DONE);
            }
            return this.getRequestDigest(subsiteFullUrl);
        })
            .then((res) => {
            const requestOptions = {
                url: `${subsiteFullUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: `<Request xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}"><Actions><ObjectPath Id="1" ObjectPathId="0" /><ObjectPath Id="3" ObjectPathId="2" /><ObjectPath Id="5" ObjectPathId="4" /><SetProperty Id="6" ObjectPathId="4" Name="UseShared"><Parameter Type="Boolean">true</Parameter></SetProperty></Actions><ObjectPaths><StaticProperty Id="0" TypeId="{3747adcd-a3c3-41b9-bfab-4a64dd2f1e0a}" Name="Current" /><Property Id="2" ParentId="0" Name="Web" /><Property Id="4" ParentId="2" Name="Navigation" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            else {
                cmd.log(siteInfo);
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
            }
            cb();
        }, (err) => {
            if (err === SpoWebAddCommand.DONE) {
                cmd.log(siteInfo);
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
                cb();
                return;
            }
            if (err.error &&
                err.error['odata.error'] &&
                err.error['odata.error'].message) {
                cb(new Command_1.CommandError(err.error['odata.error'].message.value));
            }
            else {
                this.handleRejectedPromise(err, cmd, cb);
            }
        });
    }
    options() {
        const options = [
            {
                option: '-t, --title <title>',
                description: 'Subsite title'
            },
            {
                option: '-d, --description [description]',
                description: 'Subsite description'
            },
            {
                option: '-u, --webUrl <webUrl>',
                description: 'Subsite relative url'
            },
            {
                option: '-w, --webTemplate <webTemplate>',
                description: 'Subsite template, eg. STS#0 (Classic team site)'
            },
            {
                option: '-p, --parentWebUrl <parentWebUrl>',
                description: 'URL of the parent site under which to create the subsite'
            },
            {
                option: '-l, --locale [locale]',
                description: 'Subsite locale LCID, eg. 1033 for en-US. Default 1033'
            },
            {
                option: '--breakInheritance',
                description: 'Set to not inherit permissions from the parent site'
            },
            {
                option: '--inheritNavigation',
                description: 'Set to inherit the navigation from the parent site'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.title) {
                return 'Required option title missing';
            }
            if (!args.options.webUrl) {
                return 'Required option webUrl missing';
            }
            if (!args.options.webTemplate) {
                return 'Required option webTemplate missing';
            }
            if (!args.options.parentWebUrl) {
                return 'Required option parentWebUrl missing';
            }
            else {
                const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.parentWebUrl);
                if (isValidSharePointUrl !== true) {
                    return isValidSharePointUrl;
                }
            }
            if (args.options.locale) {
                const locale = parseInt(args.options.locale);
                if (isNaN(locale)) {
                    return `${args.options.locale} is not a valid locale number`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
    
      Create subsite using the ${chalk.grey('Team site')} template in the ${chalk.grey('en-US')} locale
        ${commands_1.default.WEB_ADD} --title Subsite --description Subsite --webUrl subsite --webTemplate STS#0 --parentWebUrl https://contoso.sharepoint.com --locale 1033

      Create subsite with unique permissions using the default ${chalk.grey('en-US')} locale
        ${commands_1.default.WEB_ADD} --title Subsite --webUrl subsite --webTemplate STS#0 --parentWebUrl https://contoso.sharepoint.com --breakInheritance

      Create subsite with the same navigation as the parent site
        ${commands_1.default.WEB_ADD} --title Subsite --webUrl subsite --webTemplate STS#0 --parentWebUrl https://contoso.sharepoint.com --inheritNavigation
  `);
    }
}
// used to early break promises chain
SpoWebAddCommand.DONE = 'DONE';
module.exports = new SpoWebAddCommand();
//# sourceMappingURL=web-add.js.map