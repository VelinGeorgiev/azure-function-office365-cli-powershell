"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const propertybag_base_1 = require("./propertybag-base");
const Utils_1 = require("../../../../Utils");
const ClientSvc_1 = require("../../ClientSvc");
const vorpal = require('../../../../vorpal-init');
class SpoPropertyBagRemoveCommand extends propertybag_base_1.SpoPropertyBagBaseCommand {
    get name() {
        return `${commands_1.default.PROPERTYBAG_REMOVE}`;
    }
    get description() {
        return 'Removes specified property from the property bag';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.folder = (!(!args.options.folder)).toString();
        telemetryProps.confirm = args.options.confirm === true;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const removeProperty = () => {
            const clientSvcCommons = new ClientSvc_1.ClientSvc(cmd, this.debug);
            this
                .getRequestDigest(args.options.webUrl)
                .then((contextResponse) => {
                this.formDigestValue = contextResponse.FormDigestValue;
                return clientSvcCommons.getCurrentWebIdentity(args.options.webUrl, this.formDigestValue);
            })
                .then((identityResp) => {
                const opts = args.options;
                if (opts.folder) {
                    // get the folder guid instead of the web guid
                    return clientSvcCommons.getFolderIdentity(identityResp.objectIdentity, opts.webUrl, opts.folder, this.formDigestValue);
                }
                return new Promise(resolve => { return resolve(identityResp); });
            })
                .then((identityResp) => {
                return this.removeProperty(identityResp, args.options);
            })
                .then((res) => {
                if (this.verbose) {
                    cmd.log('DONE');
                }
                cb();
            }, (err) => this.handleRejectedPromise(err, cmd, cb));
        };
        if (args.options.confirm) {
            removeProperty();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to remove the ${args.options.key} property?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeProperty();
                }
            });
        }
    }
    removeProperty(identityResp, options) {
        let objectType = 'AllProperties';
        if (options.folder) {
            objectType = 'Properties';
        }
        const requestOptions = {
            url: `${options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
            headers: {
                'X-RequestDigest': this.formDigestValue
            },
            body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><Method Name="SetFieldValue" Id="206" ObjectPathId="205"><Parameters><Parameter Type="String">${Utils_1.default.escapeXml(options.key)}</Parameter><Parameter Type="Null" /></Parameters></Method><Method Name="Update" Id="207" ObjectPathId="198" /></Actions><ObjectPaths><Property Id="205" ParentId="198" Name="${objectType}" /><Identity Id="198" Name="${identityResp.objectIdentity}" /></ObjectPaths></Request>`
        };
        return new Promise((resolve, reject) => {
            request_1.default.post(requestOptions).then((res) => {
                const json = JSON.parse(res);
                const contents = json.find(x => { return x['ErrorInfo']; });
                if (contents && contents.ErrorInfo) {
                    reject(contents.ErrorInfo.ErrorMessage || 'ClientSvc unknown error');
                }
                else {
                    resolve(res);
                }
            }, (err) => { reject(err); });
        });
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site from which the property should be removed'
            },
            {
                option: '-k, --key <key>',
                description: 'Key of the property to be removed. Case-sensitive'
            },
            {
                option: '-f, --folder [folder]',
                description: 'Site-relative URL of the folder from which to remove the property bag value',
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming removal of property bag value'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl) !== true) {
                return 'Missing required option url';
            }
            if (!args.options.key) {
                return 'Missing required option key';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.PROPERTYBAG_REMOVE).helpInformation());
        log(`  Examples:

    Removes the value of the ${chalk.grey('key1')} property from the property bag located in site ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_REMOVE} --webUrl https://contoso.sharepoint.com/sites/test --key key1

    Removes the value of the ${chalk.grey('key1')} property from the property bag located in site root folder ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_REMOVE} --webUrl https://contoso.sharepoint.com/sites/test --key key1 --folder / --confirm

    Removes the value of the ${chalk.grey('key1')} property from the property bag located in site document library ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_REMOVE} --webUrl https://contoso.sharepoint.com/sites/test --key key1 --folder '/Shared Documents'
    
    Removes property bag value located in folder in site document library ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_REMOVE} --webUrl https://contoso.sharepoint.com/sites/test --key key1 --folder '/Shared Documents/MyFolder'

    Removes the value of the ${chalk.grey('key1')} property from the property bag located in site list ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_REMOVE} --webUrl https://contoso.sharepoint.com/sites/test --key key1 --folder /Lists/MyList
    `);
    }
}
module.exports = new SpoPropertyBagRemoveCommand();
//# sourceMappingURL=propertybag-remove.js.map