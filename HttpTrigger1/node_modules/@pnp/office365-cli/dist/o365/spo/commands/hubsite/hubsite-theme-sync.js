"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoHubSiteThemeSyncCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.HUBSITE_THEME_SYNC}`;
    }
    get description() {
        return 'Applies any theme updates from the parent hub site.';
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log('Syncing hub site theme...');
        }
        const requestOptions = {
            url: `${args.options.webUrl}/_api/web/SyncHubSiteTheme`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .post(requestOptions)
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site to apply theme updates from the hub site to'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    ${chalk.yellow('Attention:')} This command is based on a SharePoint API that is currently
    in preview and is subject to change once the API reached general
    availability.

  Examples:
  
    Applies any theme updates from the parent hub site to the site with URL
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/project-x

  More information:

    SharePoint hub sites new in Office 365
      https://techcommunity.microsoft.com/t5/SharePoint-Blog/SharePoint-hub-sites-new-in-Office-365/ba-p/109547
`);
    }
}
module.exports = new SpoHubSiteThemeSyncCommand();
//# sourceMappingURL=hubsite-theme-sync.js.map