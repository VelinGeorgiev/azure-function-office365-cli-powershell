"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const clientsidepages_1 = require("./clientsidepages");
const util_1 = require("util");
const Page_1 = require("./Page");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoPageTextAddCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.PAGE_TEXT_ADD}`;
    }
    get description() {
        return 'Adds text to a modern page';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.section = typeof args.options.section !== 'undefined';
        telemetryProps.column = typeof args.options.column !== 'undefined';
        telemetryProps.order = typeof args.options.order !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let requestDigest = '';
        let pageName = args.options.pageName;
        if (args.options.pageName.indexOf('.aspx') < 0) {
            pageName += '.aspx';
        }
        if (this.verbose) {
            cmd.log(`Retrieving request digest...`);
        }
        this
            .getRequestDigest(args.options.webUrl)
            .then((res) => {
            // Keep the reference of request digest for subsequent requests
            requestDigest = res.FormDigestValue;
            if (this.verbose) {
                cmd.log(`Retrieving modern page ${pageName}...`);
            }
            // Get Client Side Page
            return Page_1.Page.getPage(pageName, args.options.webUrl, cmd, this.debug, this.verbose);
        })
            .then((page) => {
            const section = (args.options.section || 1) - 1;
            const column = (args.options.column || 1) - 1;
            // Make sure the section is in range
            if (section >= page.sections.length) {
                throw new Error(`Invalid section '${section + 1}'`);
            }
            // Make sure the column is in range
            if (column >= page.sections[section].columns.length) {
                throw new Error(`Invalid column '${column + 1}'`);
            }
            const text = new clientsidepages_1.ClientSideText(args.options.text);
            if (typeof args.options.order === 'undefined') {
                page.sections[section].columns[column].addControl(text);
            }
            else {
                const order = args.options.order - 1;
                page.sections[section].columns[column].insertControl(text, order);
            }
            // Save the Client Side Page with updated information
            return this.saveClientSidePage(page, cmd, args, pageName, requestDigest);
        })
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        })
            .catch((err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    saveClientSidePage(clientSidePage, cmd, args, pageName, requestDigest) {
        const updatedContent = clientSidePage.toHtml();
        if (this.debug) {
            cmd.log('Updated canvas content: ');
            cmd.log(updatedContent);
            cmd.log('');
        }
        const requestOptions = {
            url: `${args.options
                .webUrl}/_api/web/getfilebyserverrelativeurl('${Utils_1.default.getServerRelativeSiteUrl(args.options.webUrl)}/sitepages/${pageName}')/ListItemAllFields`,
            headers: {
                'X-RequestDigest': requestDigest,
                'content-type': 'application/json;odata=nometadata',
                'X-HTTP-Method': 'MERGE',
                'IF-MATCH': '*',
                accept: 'application/json;odata=nometadata'
            },
            body: {
                CanvasContent1: updatedContent
            },
            json: true
        };
        return request_1.default.post(requestOptions);
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the page to add the text to is located'
            },
            {
                option: '-n, --pageName <pageName>',
                description: 'Name of the page to which add the text'
            },
            {
                option: '-t, --text <text>',
                description: 'Text to add to the page'
            },
            {
                option: '--section [section]',
                description: 'Number of the section to which the text should be added (1 or higher)'
            },
            {
                option: '--column [column]',
                description: 'Number of the column in which the text should be added (1 or higher)'
            },
            {
                option: '--order [order]',
                description: 'Order of the text in the column'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            if (!args.options.pageName) {
                return 'Required option pageName is missing';
            }
            if (!args.options.text) {
                return 'Required option text is missing';
            }
            if (args.options.section && (!util_1.isNumber(args.options.section) || args.options.section < 1)) {
                return 'The value of parameter section must be 1 or higher';
            }
            if (args.options.column && (!util_1.isNumber(args.options.column) || args.options.column < 1)) {
                return 'The value of parameter column must be 1 or higher';
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If the specified ${chalk.grey('pageName')} doesn't refer to an existing modern page,
    you will get a ${chalk.grey("File doesn't exists")} error.

  Examples:

    Add text to a modern page in the first available location on the page
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/a-team --pageName page.aspx --text 'Hello world'

    Add text to a modern page in the third column of the second section
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/a-team --pageName page.aspx --text 'Hello world' --section 2 --column 3

    Add text at the beginning of the default column on a modern page
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/a-team --pageName page.aspx --text 'Hello world' --order 1
      `);
    }
}
module.exports = new SpoPageTextAddCommand();
//# sourceMappingURL=page-text-add.js.map