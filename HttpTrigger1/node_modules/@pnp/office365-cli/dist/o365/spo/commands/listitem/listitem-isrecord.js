"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const Auth_1 = require("../../../../Auth");
const ClientSvc_1 = require("../../ClientSvc");
const vorpal = require('../../../../vorpal-init');
class SpoListItemIsRecordCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.LISTITEM_ISRECORD;
    }
    get description() {
        return 'Checks if the specified list item is a record';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = typeof args.options.listId !== 'undefined';
        telemetryProps.listTitle = typeof args.options.listTitle !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const clientSvcCommons = new ClientSvc_1.ClientSvc(cmd, this.debug);
        const resource = Auth_1.Auth.getResourceFromUrl(args.options.webUrl);
        const listIdArgument = args.options.listId || '';
        const listTitleArgument = args.options.listTitle || '';
        const listRestUrl = (args.options.listId ?
            `${args.options.webUrl}/_api/web/lists(guid'${encodeURIComponent(listIdArgument)}')`
            : `${args.options.webUrl}/_api/web/lists/getByTitle('${encodeURIComponent(listTitleArgument)}')`);
        let formDigestValue = '';
        let listId = '';
        if (this.debug) {
            cmd.log(`Retrieving access token for ${resource}...`);
        }
        (() => {
            if (typeof args.options.listId !== 'undefined') {
                if (this.verbose) {
                    cmd.log(`List Id passed in as an argument.`);
                }
                return Promise.resolve({ Id: args.options.listId });
            }
            if (this.verbose) {
                cmd.log(`Getting list id...`);
            }
            const requestOptions = {
                url: `${listRestUrl}?$select=Id`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })()
            .then((res) => {
            listId = res.Id;
            if (this.debug) {
                cmd.log(`Getting request digest for request`);
            }
            return this.getRequestDigest(args.options.webUrl);
        })
            .then((res) => {
            formDigestValue = res.FormDigestValue;
            return clientSvcCommons.getCurrentWebIdentity(args.options.webUrl, formDigestValue);
        })
            .then((webIdentityResp) => {
            if (this.verbose) {
                cmd.log(`Checking if list item is a record in list ${args.options.listId || args.options.listTitle} in site ${args.options.webUrl}...`);
            }
            const requestBody = this.getIsRecordRequestBody(webIdentityResp.objectIdentity, listId, args.options.id);
            const requestOptions = {
                url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'Content-Type': 'text/xml',
                    'X-RequestDigest': formDigestValue,
                },
                body: requestBody
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
            }
            else {
                const result = json[json.length - 1];
                cmd.log(result);
                cb();
            }
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    ;
    getIsRecordRequestBody(webIdentity, listId, id) {
        const requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009">
            <Actions>
              <StaticMethod TypeId="{ea8e1356-5910-4e69-bc05-d0c30ed657fc}" Name="IsRecord" Id="1"><Parameters><Parameter ObjectPathId="14" /></Parameters></StaticMethod>
            </Actions>
            <ObjectPaths>
              <Identity Id="14" Name="${webIdentity}:list:${listId}:item:${id},1" />
            </ObjectPaths>
          </Request>`;
        return requestBody;
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site where the list is located'
            },
            {
                option: '-i, --id <id>',
                description: 'The ID of the list item to check if it is a record'
            },
            {
                option: '-l, --listId [listId]',
                description: 'The ID of the list where the item is located. Specify listId or listTitle but not both'
            },
            {
                option: '-t, --listTitle [listTitle]',
                description: 'The title of the list where the item is located. Specify listId or listTitle but not both'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            if (!args.options.id) {
                return 'Required parameter id missing';
            }
            const id = parseInt(args.options.id);
            if (isNaN(id)) {
                return `${args.options.id} is not a valid list item ID`;
            }
            if (id < 1) {
                return `Item ID must be a positive number`;
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.listId && !args.options.listTitle) {
                return `Specify listId or listTitle`;
            }
            if (args.options.listId && args.options.listTitle) {
                return `Specify listId or listTitle but not both`;
            }
            if (args.options.listId &&
                !Utils_1.default.isValidGuid(args.options.listId)) {
                return `${args.options.listId} in option listId is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:

    Check whether the document with id ${chalk.grey(1)} in the list with title
    ${chalk.grey('Documents')}, located in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
    is a record
      ${commands_1.default.LISTITEM_ISRECORD} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle 'Documents' --id 1
    
    Check whether the document with id ${chalk.grey(1)} in list with ID
    ${chalk.grey('0cd891ef-afce-4e55-b836-fce03286cccf')}, located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')} is a record
      ${commands_1.default.LISTITEM_ISRECORD} --webUrl https://contoso.sharepoint.com/sites/project-x --listId 0cd891ef-afce-4e55-b836-fce03286cccf --id 1
      `);
    }
}
module.exports = new SpoListItemIsRecordCommand();
//# sourceMappingURL=listitem-isrecord.js.map