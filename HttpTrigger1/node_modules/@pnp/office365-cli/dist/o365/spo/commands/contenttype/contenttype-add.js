"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoContentTypeAddCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.CONTENTTYPE_ADD}`;
    }
    get description() {
        return 'Adds a new list or site content type';
    }
    types() {
        return {
            string: ['id', 'i']
        };
    }
    commandAction(cmd, args, cb) {
        let parentInfo = '';
        this
            .getParentInfo(args.options.listTitle, args.options.webUrl, cmd)
            .then((parent) => {
            parentInfo = parent;
            if (this.verbose) {
                cmd.log(`Retrieving request digest...`);
            }
            return this.getRequestDigest(args.options.webUrl);
        })
            .then((res) => {
            const description = args.options.description ?
                `<Property Name="Description" Type="String">${Utils_1.default.escapeXml(args.options.description)}</Property>` :
                '<Property Name="Description" Type="Null" />';
            const group = args.options.group ?
                `<Property Name="Group" Type="String">${Utils_1.default.escapeXml(args.options.group)}</Property>` :
                '<Property Name="Group" Type="Null" />';
            const requestOptions = {
                url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="8" ObjectPathId="7" /><ObjectPath Id="10" ObjectPathId="9" /><ObjectIdentityQuery Id="11" ObjectPathId="9" /></Actions><ObjectPaths><Property Id="7" ParentId="5" Name="ContentTypes" /><Method Id="9" ParentId="7" Name="Add"><Parameters><Parameter TypeId="{168f3091-4554-4f14-8866-b20d48e45b54}">${description}${group}<Property Name="Id" Type="String">${Utils_1.default.escapeXml(args.options.id)}</Property><Property Name="Name" Type="String">${Utils_1.default.escapeXml(args.options.name)}</Property><Property Name="ParentContentType" Type="Null" /></Parameter></Parameters></Method>${parentInfo}</ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            else {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    getParentInfo(listTitle, webUrl, cmd) {
        return new Promise((resolve, reject) => {
            if (!listTitle) {
                resolve('<Property Id="5" ParentId="3" Name="Web" /><StaticProperty Id="3" TypeId="{3747adcd-a3c3-41b9-bfab-4a64dd2f1e0a}" Name="Current" />');
                return;
            }
            let siteId = '';
            let webId = '';
            (() => {
                if (this.verbose) {
                    cmd.log(`Retrieving site collection id...`);
                }
                const requestOptions = {
                    url: `${webUrl}/_api/site?$select=Id`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    json: true
                };
                return request_1.default.get(requestOptions);
            })()
                .then((res) => {
                siteId = res.Id;
                if (this.verbose) {
                    cmd.log(`Retrieving site id...`);
                }
                const requestOptions = {
                    url: `${webUrl}/_api/web?$select=Id`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    json: true
                };
                return request_1.default.get(requestOptions);
            })
                .then((res) => {
                webId = res.Id;
                if (this.verbose) {
                    cmd.log(`Retrieving list id...`);
                }
                const requestOptions = {
                    url: `${webUrl}/_api/web/lists/getByTitle('${encodeURIComponent(listTitle)}')?$select=Id`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    json: true
                };
                return request_1.default.get(requestOptions);
            })
                .then((res) => {
                resolve(`<Identity Id="5" Name="1a48869e-c092-0000-1f61-81ec89809537|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${siteId}:web:${webId}:list:${res.Id}" />`);
            }, (error) => {
                reject(error);
            });
        });
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'Absolute URL of the site where the content type should be created'
            },
            {
                option: '-l, --listTitle [listTitle]',
                description: 'Title of the list where the content type should be created (if it should be created as a list content type)'
            },
            {
                option: '-i, --id <id>',
                description: 'The ID of the content type. Determines the parent content type'
            },
            {
                option: '-n, --name <name>',
                description: 'The name of the content type'
            },
            {
                option: '-d, --description [description]',
                description: 'The description of the content type'
            },
            {
                option: '-g, --group [group]',
                description: 'The group with which the content type should be associated'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.id) {
                return 'Required parameter id missing';
            }
            if (!args.options.name) {
                return 'Required parameter name missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If the specified content type already exists, you will get a
    ${chalk.grey('A duplicate content type "Your Content Type" was found.')} error.

    The ID of the content type specifies the parent content type from which this
    content type inherits.

  Examples:
  
    Create a site content type that inherits from the List item content type
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/contoso-sales --name 'PnP Alert' --id 0x01007926A45D687BA842B947286090B8F67D --group 'PnP Content Types'
    
    Create a list content type that inherits from the List item content type
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/contoso-sales --listTitle Alerts --name 'PnP Alert' --id 0x01007926A45D687BA842B947286090B8F67D

  More information:

    Content Type IDs
      https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v%3Doffice.14)
`);
    }
}
module.exports = new SpoContentTypeAddCommand();
//# sourceMappingURL=contenttype-add.js.map