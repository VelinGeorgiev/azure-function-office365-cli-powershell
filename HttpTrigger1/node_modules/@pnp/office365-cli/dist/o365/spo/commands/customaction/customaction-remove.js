"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoCustomActionRemoveCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.CUSTOMACTION_REMOVE}`;
    }
    get description() {
        return 'Removes the specified custom action';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.scope = args.options.scope || 'All';
        telemetryProps.confirm = (!(!args.options.confirm)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const removeCustomAction = () => {
            (() => {
                if (args.options.scope && args.options.scope.toLowerCase() !== "all") {
                    return this.removeScopedCustomAction(args.options);
                }
                return this.searchAllScopes(args.options);
            })()
                .then((customAction) => {
                if (this.verbose) {
                    if (customAction && customAction["odata.null"] === true) {
                        cmd.log(`Custom action with id ${args.options.id} not found`);
                    }
                    else {
                        cmd.log(vorpal.chalk.green('DONE'));
                    }
                }
                cb();
            }, (err) => this.handleRejectedPromise(err, cmd, cb));
        };
        if (args.options.confirm) {
            removeCustomAction();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to remove the ${args.options.id} user custom action?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeCustomAction();
                }
            });
        }
    }
    removeScopedCustomAction(options) {
        const requestOptions = {
            url: `${options.url}/_api/${options.scope}/UserCustomActions('${encodeURIComponent(options.id)}')`,
            headers: {
                accept: 'application/json;odata=nometadata',
                'X-HTTP-Method': 'DELETE'
            },
            json: true
        };
        return request_1.default.post(requestOptions);
    }
    /**
     * Remove request with `web` scope is send first.
     * If custom action not found then
     * another get request is send with `site` scope.
     */
    searchAllScopes(options) {
        return new Promise((resolve, reject) => {
            options.scope = "Web";
            this
                .removeScopedCustomAction(options)
                .then((webResult) => {
                if (webResult === undefined) {
                    return resolve(webResult);
                }
                options.scope = "Site";
                this
                    .removeScopedCustomAction(options)
                    .then((siteResult) => {
                    return resolve(siteResult);
                }, (err) => {
                    reject(err);
                });
            }, (err) => {
                reject(err);
            });
        });
    }
    options() {
        const options = [
            {
                option: '-i, --id <id>',
                description: 'Id (GUID) of the custom action to remove'
            },
            {
                option: '-u, --url <url>',
                description: 'Url of the site or site collection to remove the custom action from'
            },
            {
                option: '-s, --scope [scope]',
                description: 'Scope of the custom action. Allowed values Site|Web|All. Default All',
                autocomplete: ['Site', 'Web', 'All']
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming removal of a user custom action'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (Utils_1.default.isValidGuid(args.options.id) === false) {
                return `${args.options.id} is not valid. Custom action Id (GUID) expected.`;
            }
            if (SpoCommand_1.default.isValidSharePointUrl(args.options.url) !== true) {
                return 'Missing required option url';
            }
            if (args.options.scope) {
                if (args.options.scope !== 'Site' &&
                    args.options.scope !== 'Web' &&
                    args.options.scope !== 'All') {
                    return `${args.options.scope} is not a valid custom action scope. Allowed values are Site|Web|All`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.CUSTOMACTION_REMOVE).helpInformation());
        log(`  Examples:
  
    Removes user custom action with ID ${chalk.grey('058140e3-0e37-44fc-a1d3-79c487d371a3')}
    located in site or site collection ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_REMOVE} -i 058140e3-0e37-44fc-a1d3-79c487d371a3 -u https://contoso.sharepoint.com/sites/test --confirm

    Removes user custom action with ID ${chalk.grey('058140e3-0e37-44fc-a1d3-79c487d371a3')}
    located in site or site collection ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_REMOVE} --id 058140e3-0e37-44fc-a1d3-79c487d371a3 --url https://contoso.sharepoint.com/sites/test

    Removes user custom action with ID ${chalk.grey('058140e3-0e37-44fc-a1d3-79c487d371a3')}
    located in site collection ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_REMOVE} -i 058140e3-0e37-44fc-a1d3-79c487d371a3 -u https://contoso.sharepoint.com/sites/test -s Site

    Removes user custom action with ID ${chalk.grey('058140e3-0e37-44fc-a1d3-79c487d371a3')}
    located in site ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_REMOVE} --id 058140e3-0e37-44fc-a1d3-79c487d371a3 --url https://contoso.sharepoint.com/sites/test --scope Web

  More information:

    UserCustomAction REST API resources:
      https://msdn.microsoft.com/en-us/library/office/dn531432.aspx#bk_UserCustomAction
      `);
    }
}
module.exports = new SpoCustomActionRemoveCommand();
//# sourceMappingURL=customaction-remove.js.map