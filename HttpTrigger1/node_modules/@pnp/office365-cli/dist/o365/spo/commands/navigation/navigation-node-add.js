"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoNavigationNodeAddCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.NAVIGATION_NODE_ADD}`;
    }
    get description() {
        return 'Adds a navigation node to the specified site navigation';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.isExternal = args.options.isExternal;
        telemetryProps.parentNodeId = typeof args.options.parentNodeId !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Adding navigation node...`);
        }
        const nodesCollection = args.options.parentNodeId ?
            `GetNodeById(${args.options.parentNodeId})/Children` :
            args.options.location.toLowerCase();
        const requestOptions = {
            url: `${args.options.webUrl}/_api/web/navigation/${nodesCollection}`,
            headers: {
                accept: 'application/json;odata=nometadata',
                'content-type': 'application/json;odata=nometadata'
            },
            body: {
                Title: args.options.title,
                Url: args.options.url,
                IsExternal: args.options.isExternal === true
            },
            json: true
        };
        request_1.default
            .post(requestOptions)
            .then((res) => {
            cmd.log(res);
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'Absolute URL of the site to which navigation should be modified'
            },
            {
                option: '-l, --location <location>',
                description: 'Navigation type where the node should be added. Available options: QuickLaunch|TopNavigationBar',
                autocomplete: ['QuickLaunch', 'TopNavigationBar']
            },
            {
                option: '-t, --title <title>',
                description: 'Navigation node title'
            },
            {
                option: '--url <url>',
                description: 'Navigation node URL'
            },
            {
                option: '--parentNodeId [parentNodeId]',
                description: 'ID of the node below which the node should be added'
            },
            {
                option: '--isExternal',
                description: 'Set, if the navigation node points to an external URL'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required option webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (args.options.parentNodeId) {
                if (isNaN(args.options.parentNodeId)) {
                    return `${args.options.parentNodeId} is not a number`;
                }
            }
            else {
                if (!args.options.location) {
                    return 'Required option location missing';
                }
                else {
                    if (args.options.location !== 'QuickLaunch' &&
                        args.options.location !== 'TopNavigationBar') {
                        return `${args.options.location} is not a valid value for the location option. Allowed values are QuickLaunch|TopNavigationBar`;
                    }
                }
            }
            if (!args.options.title) {
                return 'Required option title missing';
            }
            if (!args.options.url) {
                return 'Required option url missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(commands_1.default.NAVIGATION_NODE_ADD).helpInformation());
        log(`  Examples:
  
    Add a navigation node pointing to a SharePoint page to the top navigation
      ${commands_1.default.NAVIGATION_NODE_ADD} --webUrl https://contoso.sharepoint.com/sites/team-a --location TopNavigationBar --title About --url /sites/team-s/sitepages/about.aspx

    Add a navigation node pointing to an external page to the quick launch
      ${commands_1.default.NAVIGATION_NODE_ADD} --webUrl https://contoso.sharepoint.com/sites/team-a --location QuickLaunch --title "About us" --url https://contoso.com/about-us --isExternal

    Add a navigation node below an existing node
      ${commands_1.default.NAVIGATION_NODE_ADD} --webUrl https://contoso.sharepoint.com/sites/team-a --parentNodeId 2010 --title About --url /sites/team-s/sitepages/about.aspx
`);
    }
}
module.exports = new SpoNavigationNodeAddCommand();
//# sourceMappingURL=navigation-node-add.js.map