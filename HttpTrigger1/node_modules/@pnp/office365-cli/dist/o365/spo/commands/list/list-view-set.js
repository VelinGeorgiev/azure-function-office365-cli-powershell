"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoListViewSetCommand extends SpoCommand_1.default {
    allowUnknownOptions() {
        return true;
    }
    get name() {
        return commands_1.default.LIST_VIEW_SET;
    }
    get description() {
        return 'Updates existing list view';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = typeof args.options.listId !== 'undefined';
        telemetryProps.listTitle = typeof args.options.listTitle !== 'undefined';
        telemetryProps.viewId = typeof args.options.viewId !== 'undefined';
        telemetryProps.viewTitle = typeof args.options.viewTitle !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const baseRestUrl = `${args.options.webUrl}/_api/web/lists`;
        const listRestUrl = args.options.listId ?
            `(guid'${encodeURIComponent(args.options.listId)}')`
            : `/getByTitle('${encodeURIComponent(args.options.listTitle)}')`;
        const viewRestUrl = `/views/${(args.options.viewId ? `getById('${encodeURIComponent(args.options.viewId)}')` : `getByTitle('${encodeURIComponent(args.options.viewTitle)}')`)}`;
        this
            .getRequestDigest(args.options.webUrl)
            .then((res) => {
            const requestOptions = {
                url: `${baseRestUrl}${listRestUrl}${viewRestUrl}`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue,
                    'content-type': 'application/json;odata=nometadata',
                    accept: 'application/json;odata=nometadata'
                },
                json: true,
                body: this.getPayload(args.options)
            };
            return request_1.default.patch(requestOptions);
        })
            .then(() => {
            // request doesn't return any content
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
    }
    getPayload(options) {
        const payload = {};
        const excludeOptions = [
            'webUrl',
            'listId',
            'listTitle',
            'viewId',
            'viewTitle',
            'debug',
            'verbose',
            'output'
        ];
        Object.keys(options).forEach(key => {
            if (excludeOptions.indexOf(key) === -1) {
                payload[key] = options[key];
            }
        });
        return payload;
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the list is located'
            },
            {
                option: '--listId [listId]',
                description: 'ID of the list where the view is located. Specify listTitle or listId but not both'
            },
            {
                option: '--listTitle [listTitle]',
                description: 'Title of the list where the view is located. Specify listTitle or listId but not both'
            },
            {
                option: '--viewId [viewId]',
                description: 'ID of the view to update. Specify viewTitle or viewId but not both'
            },
            {
                option: '--viewTitle [viewTitle]',
                description: 'Title of the view to update. Specify viewTitle or viewId but not both'
            },
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.listId && !args.options.listTitle) {
                return `Specify listId or listTitle`;
            }
            if (args.options.listId && args.options.listTitle) {
                return `Specify listId or listTitle but not both`;
            }
            if (args.options.listId &&
                !Utils_1.default.isValidGuid(args.options.listId)) {
                return `${args.options.listId} in option listId is not a valid GUID`;
            }
            if (!args.options.viewId && !args.options.viewTitle) {
                return `Specify viewId or viewTitle`;
            }
            if (args.options.viewId && args.options.viewTitle) {
                return `Specify viewId or viewTitle but not both`;
            }
            if (args.options.viewId &&
                !Utils_1.default.isValidGuid(args.options.viewId)) {
                return `${args.options.viewId} in option viewId is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:
  
    Specify properties to update using their names, eg.
    ${chalk.grey("--Title 'New Title' --JSLink jslink.js")}

    When updating list formatting, the value of the CustomFormatter property
    must be XML-escaped, eg. ${chalk.grey('&lt;')} instead of ${chalk.grey('<')}.
        
  Examples:

    Update the title of the list view specified by its name
      ${commands_1.default.LIST_VIEW_SET} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle 'My List' --viewTitle 'All items' --Title 'All events'

    Update the title of the list view specified by its ID
      ${commands_1.default.LIST_VIEW_SET} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle 'My List' --viewId 330f29c5-5c4c-465f-9f4b-7903020ae1ce --Title 'All events'
  
    Update view formatting of the specified list view
      ${commands_1.default.LIST_VIEW_SET} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle 'My List' --viewTitle 'All items' --CustomFormatter '\`{"schema":"https://developer.microsoft.com/json-schemas/sp/view-formatting.schema.json","additionalRowClass": "=if([$DueDate] &lt;= @now, 'sp-field-severity--severeWarning', '')"}\`'
   `);
    }
}
module.exports = new SpoListViewSetCommand();
//# sourceMappingURL=list-view-set.js.map