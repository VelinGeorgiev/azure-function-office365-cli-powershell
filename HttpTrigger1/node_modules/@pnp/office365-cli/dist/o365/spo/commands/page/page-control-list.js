"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Page_1 = require("./Page");
const vorpal = require('../../../../vorpal-init');
class SpoPageControlListCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.PAGE_CONTROL_LIST}`;
    }
    get description() {
        return 'Lists controls on the specific modern page';
    }
    commandAction(cmd, args, cb) {
        Page_1.Page
            .getPage(args.options.name, args.options.webUrl, cmd, this.debug, this.verbose)
            .then((clientSidePage) => {
            let controls = [];
            clientSidePage.sections.forEach(s => {
                s.columns.forEach(c => {
                    controls = controls.concat(c.controls);
                });
            });
            // remove the column property to be able to serialize the array to JSON
            controls.forEach(c => delete c.column);
            // remove the dynamicDataValues and dynamicDataPaths properties if they are null
            controls.forEach(c => {
                if (!c.dynamicDataPaths) {
                    delete c.dynamicDataPaths;
                }
                if (!c.dynamicDataValues) {
                    delete c.dynamicDataValues;
                }
            });
            if (args.options.output === 'json') {
                // drop the information about original classes from clientsidepages.ts
                cmd.log(JSON.parse(JSON.stringify(controls)));
            }
            else {
                cmd.log(controls.map(c => {
                    return {
                        id: c.id,
                        type: SpoPageControlListCommand.getControlTypeDisplayName(c.controlType),
                        title: c.title
                    };
                }));
            }
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    static getControlTypeDisplayName(controlType) {
        switch (controlType) {
            case 0:
                return 'Empty column';
            case 3:
                return 'Client-side web part';
            case 4:
                return 'Client-side text';
            default:
                return '' + controlType;
        }
    }
    options() {
        const options = [
            {
                option: '-n, --name <name>',
                description: 'Name of the page to list controls of'
            },
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the page to retrieve is located'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.name) {
                return 'Required parameter name missing';
            }
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If the specified ${chalk.grey('name')} doesn't refer to an existing modern page, you will get
    a ${chalk.grey('File doesn\'t exists')} error.

  Examples:
  
    List controls on the modern page with name ${chalk.grey('home.aspx')}
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/team-a --name home.aspx
`);
    }
}
module.exports = new SpoPageControlListCommand();
//# sourceMappingURL=page-control-list.js.map