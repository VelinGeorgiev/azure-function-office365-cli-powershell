"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoListViewFieldAddCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.LIST_VIEW_FIELD_ADD;
    }
    get description() {
        return 'Adds the specified field to list view';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = typeof args.options.listId !== 'undefined';
        telemetryProps.listTitle = typeof args.options.listTitle !== 'undefined';
        telemetryProps.viewId = typeof args.options.viewId !== 'undefined';
        telemetryProps.viewTitle = typeof args.options.viewTitle !== 'undefined';
        telemetryProps.fieldId = typeof args.options.fieldId !== 'undefined';
        telemetryProps.fieldTitle = typeof args.options.fieldTitle !== 'undefined';
        telemetryProps.fieldPosition = typeof args.options.fieldPosition !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const listSelector = args.options.listId ? `(guid'${encodeURIComponent(args.options.listId)}')` : `/GetByTitle('${encodeURIComponent(args.options.listTitle)}')`;
        let viewSelector = '';
        let currentField;
        if (this.verbose) {
            cmd.log(`Getting field ${args.options.fieldId || args.options.fieldTitle}...`);
        }
        this
            .getField(args.options, listSelector)
            .then((field) => {
            if (this.verbose) {
                cmd.log(`Adding the field ${args.options.fieldId || args.options.fieldTitle} to the view ${args.options.viewId || args.options.viewTitle}...`);
            }
            currentField = field;
            viewSelector = args.options.viewId ? `('${encodeURIComponent(args.options.viewId)}')` : `/GetByTitle('${encodeURIComponent(args.options.viewTitle)}')`;
            const postRequestUrl = `${args.options.webUrl}/_api/web/lists${listSelector}/views${viewSelector}/viewfields/addviewfield('${field.InternalName}')`;
            const postRequestOptions = {
                url: postRequestUrl,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.post(postRequestOptions);
        })
            .then(() => {
            if (typeof args.options.fieldPosition === 'undefined') {
                if (this.debug) {
                    cmd.log(`No field position.`);
                }
                return Promise.resolve();
            }
            if (this.debug) {
                cmd.log(`moveField request...`);
                cmd.log(args.options.fieldPosition);
            }
            if (this.verbose) {
                cmd.log(`Moving the field ${args.options.fieldId || args.options.fieldTitle} to the position ${args.options.fieldPosition} from view ${args.options.viewId || args.options.viewTitle}...`);
            }
            const moveRequestUrl = `${args.options.webUrl}/_api/web/lists${listSelector}/views${viewSelector}/viewfields/moveviewfieldto`;
            const moveRequestOptions = {
                url: moveRequestUrl,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                body: { 'field': currentField.InternalName, 'index': args.options.fieldPosition },
                json: true
            };
            return request_1.default.post(moveRequestOptions);
        })
            .then(() => {
            // REST post call doesn't return anything
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    getField(options, listSelector) {
        const fieldSelector = options.fieldId ? `/getbyid('${encodeURIComponent(options.fieldId)}')` : `/getbyinternalnameortitle('${encodeURIComponent(options.fieldTitle)}')`;
        const getRequestUrl = `${options.webUrl}/_api/web/lists${listSelector}/fields${fieldSelector}`;
        const requestOptions = {
            url: getRequestUrl,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            json: true
        };
        return request_1.default.get(requestOptions);
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the list is located'
            },
            {
                option: '--listId [listId]',
                description: 'ID of the list where the view is located. Specify `listTitle` or `listId` but not both'
            },
            {
                option: '--listTitle [listTitle]',
                description: 'Title of the list where the view is located. Specify `listTitle` or `listId` but not both'
            },
            {
                option: '--viewId [viewId]',
                description: 'ID of the view to update. Specify `viewTitle` or `viewId` but not both'
            },
            {
                option: '--viewTitle [viewTitle]',
                description: 'Title of the view to update. Specify `viewTitle` or `viewId` but not both'
            },
            {
                option: '--fieldId [fieldId]',
                description: 'ID of the field to add. Specify `fieldId` or `fieldTitle` but not both'
            },
            {
                option: '--fieldTitle [fieldTitle]',
                description: 'The case-sensitive internal name or display name of the field to add. Specify `fieldId` or `fieldTitle` but not both'
            },
            {
                option: '--fieldPosition [fieldPosition]',
                description: 'The zero-based index of the position for the field'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (args.options.listId) {
                if (!Utils_1.default.isValidGuid(args.options.listId)) {
                    return `${args.options.listId} is not a valid GUID`;
                }
            }
            if (args.options.viewId) {
                if (!Utils_1.default.isValidGuid(args.options.viewId)) {
                    return `${args.options.viewId} is not a valid GUID`;
                }
            }
            if (args.options.fieldId) {
                if (!Utils_1.default.isValidGuid(args.options.fieldId)) {
                    return `${args.options.fieldId} is not a valid GUID`;
                }
            }
            if (args.options.fieldPosition) {
                const position = parseInt(args.options.fieldPosition);
                if (isNaN(position)) {
                    return `${args.options.fieldPosition} is not a number`;
                }
            }
            if (args.options.listId && args.options.listTitle) {
                return 'Specify listId or listTitle, but not both';
            }
            if (!args.options.listId && !args.options.listTitle) {
                return 'Specify listId or listTitle, one is required';
            }
            if (args.options.viewId && args.options.viewTitle) {
                return 'Specify viewId or viewTitle, but not both';
            }
            if (!args.options.viewId && !args.options.viewTitle) {
                return 'Specify viewId or viewTitle, one is required';
            }
            if (args.options.fieldId && args.options.fieldTitle) {
                return 'Specify fieldId or fieldTitle, but not both';
            }
            if (!args.options.fieldId && !args.options.fieldTitle) {
                return 'Specify fieldId or fieldTitle, one is required';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Add field with ID ${chalk.grey('330f29c5-5c4c-465f-9f4b-7903020ae1ce')} to view
    with ID ${chalk.grey('3d760127-982c-405e-9c93-e1f76e1a1110')} of the list with ID
    ${chalk.grey('1f187321-f086-4d3d-8523-517e94cc9df9')} located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_VIEW_FIELD_ADD} --webUrl https://contoso.sharepoint.com/sites/project-x --fieldId 330f29c5-5c4c-465f-9f4b-7903020ae1ce --listId 1f187321-f086-4d3d-8523-517e94cc9df9 --viewId 3d760127-982c-405e-9c93-e1f76e1a1110

    Add field with title ${chalk.grey('Custom field')} to view with title ${chalk.grey('All Documents')}
    of the list with title ${chalk.grey('Documents')} located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_VIEW_FIELD_ADD} --webUrl https://contoso.sharepoint.com/sites/project-x --fieldTitle 'Custom field' --listTitle Documents --viewTitle 'All Documents'
    
    Add field with title ${chalk.grey('Custom field')} at the position ${chalk.grey('0')} to view with title
    ${chalk.grey('All Documents')} of the list with title ${chalk.grey('Documents')} located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_VIEW_FIELD_ADD} --webUrl https://contoso.sharepoint.com/sites/project-x --fieldTitle 'Custom field' --listTitle Documents --viewTitle 'All Documents' --fieldPosition 0
      `);
    }
}
module.exports = new SpoListViewFieldAddCommand();
//# sourceMappingURL=list-view-field-add.js.map