"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const uuidv4 = require('uuid/v4');
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoTermGroupAddCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.TERM_GROUP_ADD;
    }
    get description() {
        return 'Adds taxonomy term group';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.description = typeof args.options.id !== 'undefined';
        telemetryProps.id = typeof args.options.id !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let formDigest = '';
        let termGroup;
        let spoAdminUrl = '';
        this
            .getSpoAdminUrl(cmd, this.debug)
            .then((_spoAdminUrl) => {
            spoAdminUrl = _spoAdminUrl;
            return this.getRequestDigest(spoAdminUrl);
        })
            .then((res) => {
            formDigest = res.FormDigestValue;
            if (this.verbose) {
                cmd.log(`Getting taxonomy term store...`);
            }
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="4" ObjectPathId="3" /><ObjectIdentityQuery Id="5" ObjectPathId="3" /><ObjectPath Id="7" ObjectPathId="6" /><ObjectIdentityQuery Id="8" ObjectPathId="6" /><Query Id="9" ObjectPathId="6"><Query SelectAllProperties="true"><Properties /></Query></Query></Actions><ObjectPaths><StaticMethod Id="3" Name="GetTaxonomySession" TypeId="{981cbc68-9edc-4f8d-872f-71146fcbb84f}" /><Method Id="6" ParentId="3" Name="GetDefaultSiteCollectionTermStore" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                return Promise.reject(response.ErrorInfo.ErrorMessage);
            }
            const termStore = json[json.length - 1];
            const termGroupId = args.options.id || uuidv4();
            if (this.verbose) {
                cmd.log(`Adding taxonomy term group...`);
            }
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': formDigest
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="14" ObjectPathId="13" /><ObjectIdentityQuery Id="15" ObjectPathId="13" /><Query Id="16" ObjectPathId="13"><Query SelectAllProperties="false"><Properties><Property Name="Name" ScalarProperty="true" /><Property Name="Id" ScalarProperty="true" /><Property Name="Description" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Method Id="13" ParentId="6" Name="CreateGroup"><Parameters><Parameter Type="String">${Utils_1.default.escapeXml(args.options.name)}</Parameter><Parameter Type="Guid">{${termGroupId}}</Parameter></Parameters></Method><Identity Id="6" Name="${termStore._ObjectIdentity_}" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                return Promise.reject(response.ErrorInfo.ErrorMessage);
            }
            termGroup = json[json.length - 1];
            if (!args.options.description) {
                return Promise.resolve(undefined);
            }
            if (this.verbose) {
                cmd.log(`Setting taxonomy term group description...`);
            }
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': formDigest
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><SetProperty Id="51" ObjectPathId="45" Name="Description"><Parameter Type="String">${Utils_1.default.escapeXml(args.options.description)}</Parameter></SetProperty></Actions><ObjectPaths><Identity Id="45" Name="${termGroup._ObjectIdentity_}" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            if (res) {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                    return;
                }
            }
            delete termGroup._ObjectIdentity_;
            delete termGroup._ObjectType_;
            termGroup.Id = termGroup.Id.replace('/Guid(', '').replace(')/', '');
            termGroup.Description = args.options.description || '';
            cmd.log(termGroup);
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-n, --name <name>',
                description: 'Name of the term group to add'
            },
            {
                option: '-i, --id [id]',
                description: 'ID of the term group to add'
            },
            {
                option: '-d, --description [description]',
                description: 'Description of the term group to add'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.name) {
                return 'Required option name missing';
            }
            if (args.options.id) {
                if (!Utils_1.default.isValidGuid(args.options.id)) {
                    return `${args.options.id} is not a valid GUID`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.TERM_GROUP_ADD).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
  
  Examples:
  
    Add a new taxonomy term group with the specified name
      ${commands_1.default.TERM_GROUP_ADD} --name PnPTermSets

    Add a new taxonomy term group with the specified name and id
      ${commands_1.default.TERM_GROUP_ADD} --name PnPTermSets --id 0e8f395e-ff58-4d45-9ff7-e331ab728beb

    Add a new taxonomy term group with the specified name and description
      ${commands_1.default.TERM_GROUP_ADD} --name PnPTermSets --description 'Term sets for PnP'
`);
    }
}
module.exports = new SpoTermGroupAddCommand();
//# sourceMappingURL=term-group-add.js.map