"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoCdnPolicySetCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.CDN_POLICY_SET;
    }
    get description() {
        return 'Sets CDN policy value for the current SharePoint Online tenant';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.cdnType = args.options.type || 'Public';
        telemetryProps.policy = args.options.policy;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const cdnTypeString = args.options.type || 'Public';
        const cdnType = cdnTypeString === 'Private' ? 1 : 0;
        let spoAdminUrl = '';
        let tenantId = '';
        this
            .getTenantId(cmd, this.debug)
            .then((_tenantId) => {
            tenantId = _tenantId;
            return this.getSpoAdminUrl(cmd, this.debug);
        })
            .then((_spoAdminUrl) => {
            spoAdminUrl = _spoAdminUrl;
            return this.getRequestDigest(spoAdminUrl);
        })
            .then((res) => {
            if (this.verbose) {
                cmd.log(`Configuring policy on the ${(cdnType === 1 ? 'Private' : 'Public')} CDN. Please wait, this might take a moment...`);
            }
            let policyId = -1;
            switch (args.options.policy) {
                case "IncludeFileExtensions":
                    policyId = 0;
                    break;
                case "ExcludeRestrictedSiteClassifications":
                    policyId = 1;
                    break;
            }
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><Method Name="SetTenantCdnPolicy" Id="12" ObjectPathId="8"><Parameters><Parameter Type="Enum">${cdnType}</Parameter><Parameter Type="Enum">${policyId}</Parameter><Parameter Type="String">${Utils_1.default.escapeXml(args.options.value)}</Parameter></Parameters></Method></Actions><ObjectPaths><Identity Id="8" Name="${tenantId}" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            else {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-t, --type [type]',
                description: 'Type of CDN to manage. Public|Private. Default Public',
                autocomplete: ['Public', 'Private']
            },
            {
                option: '-p, --policy <policy>',
                description: 'CDN policy to configure. IncludeFileExtensions|ExcludeRestrictedSiteClassifications',
                autocomplete: ['IncludeFileExtensions', 'ExcludeRestrictedSiteClassifications']
            },
            {
                option: '-v, --value <value>',
                description: 'Value for the policy to configure'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (args.options.type) {
                if (args.options.type !== 'Public' &&
                    args.options.type !== 'Private') {
                    return `${args.options.type} is not a valid CDN type. Allowed values are Public|Private`;
                }
            }
            if (!args.options.policy ||
                (args.options.policy !== 'IncludeFileExtensions' &&
                    args.options.policy !== 'ExcludeRestrictedSiteClassifications')) {
                return `${args.options.policy} is not a valid CDN policy. Allowed values are IncludeFileExtensions|ExcludeRestrictedSiteClassifications`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.CDN_POLICY_SET).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
        
  Remarks:

    Using the ${chalk.blue('-t, --type')} option you can choose whether you want to manage the settings of
    the Public (default) or Private CDN. If you don't use the option, the command will use the Public CDN.

  Examples:
  
    Set the list of extensions supported by the Public CDN
      ${commands_1.default.CDN_POLICY_SET} --type Public --policy IncludeFileExtensions --value CSS,EOT,GIF,ICO,JPEG,JPG,JS,MAP,PNG,SVG,TTF,WOFF,JSON

  More information:

    General availability of Office 365 CDN
      https://dev.office.com/blogs/general-availability-of-office-365-cdn
`);
    }
}
module.exports = new SpoCdnPolicySetCommand();
//# sourceMappingURL=cdn-policy-set.js.map