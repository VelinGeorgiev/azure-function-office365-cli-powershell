"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const Page_1 = require("./Page");
const vorpal = require('../../../../vorpal-init');
class SpoPageControlGetCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.PAGE_CONTROL_GET}`;
    }
    get description() {
        return 'Gets information about the specific control on a modern page';
    }
    commandAction(cmd, args, cb) {
        Page_1.Page
            .getPage(args.options.name, args.options.webUrl, cmd, this.debug, this.verbose)
            .then((clientSidePage) => {
            const control = clientSidePage.findControlById(args.options.id);
            if (control) {
                const isJSONOutput = args.options.output === 'json';
                cmd.log(JSON.parse(JSON.stringify(Page_1.Page.getControlsInformation(control, isJSONOutput))));
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
            }
            else {
                if (this.verbose) {
                    cmd.log(`Control with ID ${args.options.id} not found on page ${args.options.name}`);
                }
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --id <id>',
                description: 'ID of the control to retrieve information for'
            },
            {
                option: '-n, --name <name>',
                description: 'Name of the page where the control is located'
            },
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the page to retrieve is located'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.id) {
                return 'Required parameter id missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
            if (!args.options.name) {
                return 'Required parameter name missing';
            }
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If the specified ${chalk.grey('name')} doesn't refer to an existing modern page, you will get
    a ${chalk.grey('File doesn\'t exists')} error.

  Examples:
  
    Get information about the control with ID
    ${chalk.grey('3ede60d3-dc2c-438b-b5bf-cc40bb2351e1')} placed on a modern page
    with name ${chalk.grey('home.aspx')}
      ${this.name} --id 3ede60d3-dc2c-438b-b5bf-cc40bb2351e1 --webUrl https://contoso.sharepoint.com/sites/team-a --name home.aspx
`);
    }
}
module.exports = new SpoPageControlGetCommand();
//# sourceMappingURL=page-control-get.js.map