"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoFileListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.FILE_LIST;
    }
    get description() {
        return 'Lists all available files in the specified folder and site';
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Retrieving all files in folder ${args.options.folder} at site ${args.options.webUrl}...`);
        }
        let requestUrl = `${args.options.webUrl}/_api/web/GetFolderByServerRelativeUrl('${encodeURIComponent(args.options.folder)}')/Files`;
        if (args.options.output !== 'json') {
            requestUrl += '?$select=UniqueId,Name,ServerRelativeUrl';
        }
        const requestOptions = {
            url: requestUrl,
            method: 'GET',
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((fileProperties) => {
            cmd.log(fileProperties.value);
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site where the folder from which to retrieve files is located'
            },
            {
                option: '-f, --folder <folder>',
                description: 'The server- or site-relative URL of the folder from which to retrieve files'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required option webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.folder) {
                return 'Required option folder missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Return all files from folder ${chalk.grey('Shared Documents')} located in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.FILE_LIST} --webUrl https://contoso.sharepoint.com/sites/project-x --folder 'Shared Documents'
      `);
    }
}
module.exports = new SpoFileListCommand();
//# sourceMappingURL=file-list.js.map