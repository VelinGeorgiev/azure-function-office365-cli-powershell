"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoWebAddCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.WEB_REMOVE;
    }
    get description() {
        return 'Delete specified subsite';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.confirm = (!(!args.options.confirm)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const removeWeb = () => {
            const requestOptions = {
                url: `${encodeURI(args.options.webUrl)}/_api/web`,
                headers: {
                    accept: 'application/json;odata=nometadata',
                    'X-HTTP-Method': 'DELETE'
                },
                json: true
            };
            if (this.verbose) {
                cmd.log(`Deleting subsite ${args.options.webUrl} ...`);
            }
            request_1.default
                .post(requestOptions)
                .then(() => {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
                cb();
            }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
        };
        if (args.options.confirm) {
            removeWeb();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to remove the subsite ${args.options.webUrl}`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeWeb();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the subsite to remove'
            },
            {
                option: '--confirm',
                description: 'Do not prompt for confirmation before deleting the subsite'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required option webUrl missing';
            }
            const isValidUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (typeof isValidUrl === 'string') {
                return isValidUrl;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Delete subsite without prompting for confirmation
      ${commands_1.default.WEB_REMOVE} --webUrl https://contoso.sharepoint.com/subsite --confirm
  `);
    }
}
module.exports = new SpoWebAddCommand();
//# sourceMappingURL=web-remove.js.map