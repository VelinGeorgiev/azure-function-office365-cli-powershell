"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../commands");
const request_1 = require("../../../request");
const SpoCommand_1 = require("../../base/SpoCommand");
const Utils_1 = require("../../../Utils");
const util_1 = require("util");
const vorpal = require('../../../vorpal-init');
class SpoSearchCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.SEARCH;
    }
    get description() {
        return 'Executes a search query';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.selectproperties = typeof args.options.selectProperties !== 'undefined';
        telemetryProps.allResults = args.options.allResults;
        telemetryProps.rowLimit = args.options.rowLimit;
        telemetryProps.sourceId = typeof args.options.sourceId !== 'undefined';
        telemetryProps.trimDuplicates = args.options.trimDuplicates;
        telemetryProps.enableStemming = args.options.enableStemming;
        telemetryProps.culture = args.options.culture;
        telemetryProps.refinementFilters = typeof args.options.refinementFilters !== 'undefined';
        telemetryProps.queryTemplate = typeof args.options.queryTemplate !== 'undefined';
        telemetryProps.sortList = typeof args.options.sortList !== 'undefined';
        telemetryProps.rankingModelId = typeof args.options.rankingModelId !== 'undefined';
        telemetryProps.startRow = typeof args.options.startRow !== 'undefined';
        telemetryProps.properties = typeof args.options.properties !== 'undefined';
        telemetryProps.sourceName = typeof args.options.sourceName !== 'undefined';
        telemetryProps.refiners = typeof args.options.refiners !== 'undefined';
        telemetryProps.webUrl = typeof args.options.webUrl !== 'undefined';
        telemetryProps.hiddenConstraints = typeof args.options.hiddenConstraints !== 'undefined';
        telemetryProps.clientType = typeof args.options.clientType !== 'undefined';
        telemetryProps.enablePhonetic = args.options.enablePhonetic;
        telemetryProps.processBestBets = args.options.processBestBets;
        telemetryProps.enableQueryRules = args.options.enableQueryRules;
        telemetryProps.processPersonalFavorites = args.options.processPersonalFavorites;
        telemetryProps.rawOutput = args.options.rawOutput;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let webUrl = '';
        (() => {
            if (args.options.webUrl) {
                return Promise.resolve(args.options.webUrl);
            }
            else {
                return this.getSpoUrl(cmd, this.debug);
            }
        })()
            .then((_webUrl) => {
            webUrl = _webUrl;
            if (this.verbose) {
                cmd.log(`Executing search query '${args.options.query}' on site at ${webUrl}...`);
            }
            const startRow = args.options.startRow ? args.options.startRow : 0;
            return this.executeSearchQuery(cmd, args, webUrl, [], startRow);
        })
            .then((results) => {
            this.printResults(cmd, args, results);
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    executeSearchQuery(cmd, args, webUrl, resultSet, startRow) {
        return (() => {
            const requestUrl = this.getRequestUrl(webUrl, cmd, args, startRow);
            const requestOptions = {
                url: requestUrl,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })()
            .then((searchResult) => {
            resultSet.push(searchResult);
            return searchResult;
        })
            .then((searchResult) => {
            if (args.options.allResults) {
                if (startRow + searchResult.PrimaryQueryResult.RelevantResults.RowCount < searchResult.PrimaryQueryResult.RelevantResults.TotalRows) {
                    const nextStartRow = startRow + searchResult.PrimaryQueryResult.RelevantResults.RowCount;
                    return this.executeSearchQuery(cmd, args, webUrl, resultSet, nextStartRow);
                }
            }
            return new Promise((resolve) => { resolve(resultSet); });
        })
            .then(() => { return resultSet; });
    }
    getRequestUrl(webUrl, cmd, args, startRow) {
        // get the list of selected properties
        const selectPropertiesArray = this.getSelectPropertiesArray(args);
        // transform arg data to query string parameters
        const propertySelectRequestString = `&selectproperties='${encodeURIComponent(selectPropertiesArray.join(","))}'`;
        const startRowRequestString = `&startrow=${startRow ? startRow : 0}`;
        const rowLimitRequestString = args.options.rowLimit ? `&rowlimit=${args.options.rowLimit}` : ``;
        const sourceIdRequestString = args.options.sourceId ? `&sourceid='${args.options.sourceId}'` : ``;
        const trimDuplicatesRequestString = `&trimduplicates=${args.options.trimDuplicates ? args.options.trimDuplicates : "false"}`;
        const enableStemmingRequestString = `&enablestemming=${typeof (args.options.enableStemming) === 'undefined' ? "true" : args.options.enableStemming}`;
        const cultureRequestString = args.options.culture ? `&culture=${args.options.culture}` : ``;
        const refinementFiltersRequestString = args.options.refinementFilters ? `&refinementfilters='${args.options.refinementFilters}'` : ``;
        const queryTemplateRequestString = args.options.queryTemplate ? `&querytemplate='${args.options.queryTemplate}'` : ``;
        const sortListRequestString = args.options.sortList ? `&sortList='${encodeURIComponent(args.options.sortList)}'` : ``;
        const rankingModelIdRequestString = args.options.rankingModelId ? `&rankingmodelid='${args.options.rankingModelId}'` : ``;
        const propertiesRequestString = this.getPropertiesRequestString(args);
        const refinersRequestString = args.options.refiners ? `&refiners='${args.options.refiners}'` : ``;
        const hiddenConstraintsRequestString = args.options.hiddenConstraints ? `&hiddenconstraints='${args.options.hiddenConstraints}'` : ``;
        const clientTypeRequestString = args.options.clientType ? `&clienttype='${args.options.clientType}'` : ``;
        const enablePhoneticRequestString = typeof (args.options.enablePhonetic) === 'undefined' ? `` : `&enablephonetic=${args.options.enablePhonetic}`;
        const processBestBetsRequestString = typeof (args.options.processBestBets) === 'undefined' ? `` : `&processbestbets=${args.options.processBestBets}`;
        const enableQueryRulesRequestString = typeof (args.options.enableQueryRules) === 'undefined' ? `` : `&enablequeryrules=${args.options.enableQueryRules}`;
        const processPersonalFavoritesRequestString = typeof (args.options.processPersonalFavorites) === 'undefined' ? `` : `&processpersonalfavorites=${args.options.processPersonalFavorites}`;
        // construct single requestUrl
        const requestUrl = `${webUrl}/_api/search/query?querytext='${args.options.query}'`.concat(propertySelectRequestString, startRowRequestString, rowLimitRequestString, sourceIdRequestString, trimDuplicatesRequestString, enableStemmingRequestString, cultureRequestString, refinementFiltersRequestString, queryTemplateRequestString, sortListRequestString, rankingModelIdRequestString, propertiesRequestString, refinersRequestString, hiddenConstraintsRequestString, clientTypeRequestString, enablePhoneticRequestString, processBestBetsRequestString, enableQueryRulesRequestString, processPersonalFavoritesRequestString);
        if (this.debug) {
            cmd.log(`RequestURL: ${requestUrl}`);
        }
        return requestUrl;
    }
    getPropertiesRequestString(args) {
        let properties = args.options.properties ? args.options.properties : '';
        if (args.options.sourceName) {
            if (properties && !properties.endsWith(",")) {
                properties += `,`;
            }
            properties += `SourceName:${args.options.sourceName},SourceLevel:SPSite`;
        }
        return properties ? `&properties='${properties}'` : ``;
    }
    getSelectPropertiesArray(args) {
        return args.options.selectProperties
            ? args.options.selectProperties.split(",")
            : ["Title", "OriginalPath"];
    }
    options() {
        const options = [
            {
                option: '-q, --query <query>',
                description: 'Query to be executed in KQL format'
            },
            {
                option: '-p, --selectProperties [selectProperties]',
                description: 'Comma-separated list of properties to retrieve. Will retrieve all properties if not specified and json output is requested.'
            },
            {
                option: '-u, --webUrl [webUrl]',
                description: 'The web against which we want to execute the query. If the parameter is not defined, the query is executed against the web that\'s used when logging in to the SPO environment.'
            },
            {
                option: '--allResults',
                description: 'Set, to get all results of the search query, instead of the number specified by the rowlimit (default: 10)'
            },
            {
                option: '--rowLimit [rowLimit]',
                description: 'The number of rows to be returned. When the \'allResults\' option is used, the specified value will define the size of retrieved batches'
            },
            {
                option: '--sourceId [sourceId]',
                description: 'The identifier (GUID) of the result source to be used to run the query.'
            },
            {
                option: '--trimDuplicates',
                description: 'Set, to remove near duplicate items from the search results.'
            },
            {
                option: '--enableStemming',
                description: 'Set, to enable stemming.'
            },
            {
                option: '--culture [culture]',
                description: 'The locale for the query.'
            },
            {
                option: '--refinementFilters [refinementFilters]',
                description: 'The set of refinement filters used when issuing a refinement query.'
            },
            {
                option: '--queryTemplate [queryTemplate]',
                description: 'A string that contains the text that replaces the query text, as part of a query transformation.'
            },
            {
                option: '--sortList [sortList]',
                description: 'The list of properties by which the search results are ordered.'
            },
            {
                option: '--rankingModelId [rankingModelId]',
                description: 'The ID of the ranking model to use for the query.'
            },
            {
                option: '--startRow [startRow]',
                description: 'The first row that is included in the search results that are returned. You use this parameter when you want to implement paging for search results.'
            },
            {
                option: '--properties [properties]',
                description: 'Additional properties for the query.'
            },
            {
                option: '--sourceName [sourceName]',
                description: 'Specified the name of the result source to be used to run the query.'
            },
            {
                option: '--refiners [refiners]',
                description: 'The set of refiners to return in a search result.'
            },
            {
                option: '--hiddenConstraints [hiddenConstraints]',
                description: 'The additional query terms to append to the query.'
            },
            {
                option: '--clientType [clientType]',
                description: 'The type of the client that issued the query.'
            },
            {
                option: '--enablePhonetic',
                description: 'Set, to use the phonetic forms of the query terms to find matches. (Default = false).'
            },
            {
                option: '--processBestBets',
                description: 'Set, to return best bet results for the query.'
            },
            {
                option: '--enableQueryRules',
                description: 'Set, to enable query rules for the query. '
            },
            {
                option: '--processPersonalFavorites',
                description: 'Set, to return personal favorites with the search results.'
            },
            {
                option: '--rawOutput',
                description: 'Set, to return the unparsed, raw results of the REST call to the search API.'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.query) {
                return 'Required parameter query missing';
            }
            if (args.options.sourceId && !Utils_1.default.isValidGuid(args.options.sourceId)) {
                return `${args.options.sourceId} is not a valid GUID`;
            }
            if (args.options.rankingModelId && !Utils_1.default.isValidGuid(args.options.rankingModelId)) {
                return `${args.options.rankingModelId} is not a valid GUID`;
            }
            if (args.options.sortList && !/^([a-z0-9_]+:(ascending|descending))(,([a-z0-9_]+:(ascending|descending)))*$/gi.test(args.options.sortList)) {
                return `sortlist parameter value '${args.options.sortList}' does not match the required pattern (=comma-separated list of '<property>:(ascending|descending)'-pattern)`;
            }
            if (args.options.rowLimit && !util_1.isNumber(args.options.rowLimit)) {
                return `${args.options.rowLimit} is not a valid number`;
            }
            if (args.options.startRow && !util_1.isNumber(args.options.startRow)) {
                return `${args.options.startRow} is not a valid number`;
            }
            if (args.options.culture && !util_1.isNumber(args.options.culture)) {
                return `${args.options.culture} is not a valid number`;
            }
            return true;
        };
    }
    printResults(cmd, args, results) {
        if (args.options.rawOutput) {
            cmd.log(results);
        }
        else {
            cmd.log(this.getParsedOutput(args, results));
        }
        if (!args.options.output || args.options.output == 'text') {
            cmd.log("# Rows: " + results[results.length - 1].PrimaryQueryResult.RelevantResults.TotalRows);
            cmd.log("# Rows (Including duplicates): " + results[results.length - 1].PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates);
            cmd.log("Elapsed Time: " + this.getElapsedTime(results));
        }
    }
    getElapsedTime(results) {
        let totalTime = 0;
        results.forEach(result => {
            totalTime += result.ElapsedTime;
        });
        return totalTime;
    }
    getRowsFromSearchResults(results) {
        let searchResultRows = [];
        for (let i = 0; i < results.length; i++) {
            searchResultRows.push(...results[i].PrimaryQueryResult.RelevantResults.Table.Rows);
        }
        return searchResultRows;
    }
    getParsedOutput(args, results) {
        const searchResultRows = this.getRowsFromSearchResults(results);
        const selectProperties = this.getSelectPropertiesArray(args);
        const outputData = searchResultRows.map(row => {
            let rowOutput = {};
            row.Cells.map(cell => {
                if (selectProperties.filter(prop => { return cell.Key.toUpperCase() === prop.toUpperCase(); }).length > 0) {
                    rowOutput[cell.Key] = cell.Value;
                }
            });
            return rowOutput;
        });
        return outputData;
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:

    Execute search query to retrieve all Document Sets
    (ContentTypeId = '${chalk.grey('0x0120D520')}') for the English locale
      ${commands_1.default.SEARCH} --query "ContentTypeId:0x0120D520" --culture 1033

    Retrieve all documents. For each document, retrieve the Path, Author
    and FileType.
      ${commands_1.default.SEARCH} --query "IsDocument:1" --selectProperties "Path,Author,FileType" --allResults

    Return the top 50 items of which the title starts with 'Marketing' while
    trimming duplicates.
      ${commands_1.default.SEARCH} --query "Title:Marketing*" --rowLimit=50 --trimDuplicates

    Return only items from a specific result source (using the source id).
      ${commands_1.default.SEARCH} --query "*" --sourceId "6e71030e-5e16-4406-9bff-9c1829843083"
      `);
    }
}
module.exports = new SpoSearchCommand();
//# sourceMappingURL=spo-search.js.map