"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoPageHeaderSetCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.PAGE_HEADER_SET}`;
    }
    get description() {
        return 'Sets modern page header';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.altText = typeof args.options.altText !== 'undefined';
        telemetryProps.authors = typeof args.options.authors !== 'undefined';
        telemetryProps.imageUrl = typeof args.options.imageUrl !== 'undefined';
        telemetryProps.kicker = typeof args.options.kicker !== 'undefined';
        telemetryProps.layout = args.options.layout;
        telemetryProps.showKicker = args.options.showKicker;
        telemetryProps.showPublishDate = args.options.showPublishDate;
        telemetryProps.textAlignment = args.options.textAlignment;
        telemetryProps.translateX = typeof args.options.translateX !== 'undefined';
        telemetryProps.translateY = typeof args.options.translateY !== 'undefined';
        telemetryProps.type = args.options.type;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const noPageHeader = {
            "id": "cbe7b0a9-3504-44dd-a3a3-0e5cacd07788",
            "instanceId": "cbe7b0a9-3504-44dd-a3a3-0e5cacd07788",
            "title": "Title Region",
            "description": "Title Region Description",
            "serverProcessedContent": {
                "htmlStrings": {},
                "searchablePlainTexts": {},
                "imageSources": {},
                "links": {}
            },
            "dataVersion": "1.4",
            "properties": {
                "title": "",
                "imageSourceType": 4,
                "layoutType": "NoImage",
                "textAlignment": "Left",
                "showKicker": false,
                "showPublishDate": false,
                "kicker": ""
            }
        };
        const defaultPageHeader = {
            "id": "cbe7b0a9-3504-44dd-a3a3-0e5cacd07788",
            "instanceId": "cbe7b0a9-3504-44dd-a3a3-0e5cacd07788",
            "title": "Title Region",
            "description": "Title Region Description",
            "serverProcessedContent": {
                "htmlStrings": {},
                "searchablePlainTexts": {},
                "imageSources": {},
                "links": {}
            },
            "dataVersion": "1.4",
            "properties": {
                "title": "",
                "imageSourceType": 4,
                "layoutType": "FullWidthImage",
                "textAlignment": "Left",
                "showKicker": false,
                "showPublishDate": false,
                "kicker": ""
            }
        };
        const customPageHeader = {
            "id": "cbe7b0a9-3504-44dd-a3a3-0e5cacd07788",
            "instanceId": "cbe7b0a9-3504-44dd-a3a3-0e5cacd07788",
            "title": "Title Region",
            "description": "Title Region Description",
            "serverProcessedContent": {
                "htmlStrings": {},
                "searchablePlainTexts": {},
                "imageSources": {
                    "imageSource": ""
                },
                "links": {},
                "customMetadata": {
                    "imageSource": {
                        "siteId": "",
                        "webId": "",
                        "listId": "",
                        "uniqueId": ""
                    }
                }
            },
            "dataVersion": "1.4",
            "properties": {
                "title": "",
                "imageSourceType": 2,
                "layoutType": "FullWidthImage",
                "textAlignment": "Left",
                "showKicker": false,
                "showPublishDate": false,
                "kicker": "",
                "authors": [],
                "altText": "",
                "webId": "",
                "siteId": "",
                "listId": "",
                "uniqueId": "",
                "translateX": 0,
                "translateY": 0
            }
        };
        let header = defaultPageHeader;
        let pageFullName = args.options.pageName.toLowerCase();
        if (pageFullName.indexOf('.aspx') < 0) {
            pageFullName += '.aspx';
        }
        let title;
        if (this.verbose) {
            cmd.log(`Retrieving information about the page...`);
        }
        const requestOptions = {
            url: `${args.options.webUrl}/_api/sitepages/pages/GetByUrl('sitepages/${encodeURIComponent(pageFullName)}')?$select=IsPageCheckedOutToCurrentUser,Title`,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            title = res.Title;
            if (res.IsPageCheckedOutToCurrentUser) {
                return Promise.resolve();
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/sitepages/pages/GetByUrl('sitepages/${encodeURIComponent(pageFullName)}')/checkoutpage`,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then(() => {
            switch (args.options.type) {
                case 'None':
                    header = noPageHeader;
                    break;
                case 'Default':
                    header = defaultPageHeader;
                    break;
                case 'Custom':
                    header = customPageHeader;
                    break;
                default:
                    header = defaultPageHeader;
            }
            header.properties.title = title;
            header.properties.textAlignment = args.options.textAlignment || 'Left';
            header.properties.showKicker = args.options.showKicker || false;
            header.properties.kicker = args.options.kicker || '';
            header.properties.showPublishDate = args.options.showPublishDate || false;
            if (args.options.type !== 'None') {
                header.properties.layoutType = args.options.layout || 'FullWidthImage';
            }
            if (args.options.type === 'Custom') {
                header.serverProcessedContent.imageSources = {
                    imageSource: args.options.imageUrl || ''
                };
                const properties = header.properties;
                properties.altText = args.options.altText || '';
                properties.authors = args.options.authors ? args.options.authors.split(',').map(a => a.trim()) : [];
                properties.translateX = args.options.translateX || 0;
                properties.translateY = args.options.translateY || 0;
                header.properties = properties;
                if (!args.options.imageUrl) {
                    header.serverProcessedContent.customMetadata = {
                        imageSource: {
                            siteId: '',
                            webId: '',
                            listId: '',
                            uniqueId: ''
                        }
                    };
                    properties.listId = '';
                    properties.siteId = '';
                    properties.uniqueId = '';
                    properties.webId = '';
                    header.properties = properties;
                    return Promise.resolve();
                }
                return Promise.all([
                    this.getSiteId(args.options.webUrl, this.verbose, cmd),
                    this.getWebId(args.options.webUrl, this.verbose, cmd),
                    this.getImageInfo(args.options.webUrl, args.options.imageUrl, this.verbose, cmd),
                ]);
            }
            else {
                return Promise.resolve();
            }
        })
            .then((res) => {
            if (res) {
                header.serverProcessedContent.customMetadata = {
                    imageSource: {
                        siteId: res[0].Id,
                        webId: res[1].Id,
                        listId: res[2].ListId,
                        uniqueId: res[2].UniqueId
                    }
                };
                const properties = header.properties;
                properties.listId = res[2].ListId;
                properties.siteId = res[0].Id;
                properties.uniqueId = res[2].UniqueId;
                properties.webId = res[1].Id;
                header.properties = properties;
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/sitepages/pages/GetByUrl('sitepages/${encodeURIComponent(pageFullName)}')/savepage`,
                headers: {
                    'accept': 'application/json;odata=nometadata',
                    'content-type': 'application/json;odata=nometadata'
                },
                body: {
                    LayoutWebpartsContent: JSON.stringify([header])
                },
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    getSiteId(siteUrl, verbose, cmd) {
        if (verbose) {
            cmd.log(`Retrieving information about the site collection...`);
        }
        const requestOptions = {
            url: `${siteUrl}/_api/site?$select=Id`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        return request_1.default.get(requestOptions);
    }
    getWebId(siteUrl, verbose, cmd) {
        if (verbose) {
            cmd.log(`Retrieving information about the site...`);
        }
        const requestOptions = {
            url: `${siteUrl}/_api/web?$select=Id`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        return request_1.default.get(requestOptions);
    }
    getImageInfo(siteUrl, imageUrl, verbose, cmd) {
        if (verbose) {
            cmd.log(`Retrieving information about the header image...`);
        }
        const requestOptions = {
            url: `${siteUrl}/_api/web/getfilebyserverrelativeurl('${encodeURIComponent(imageUrl)}')?$select=ListId,UniqueId`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        return request_1.default.get(requestOptions);
    }
    options() {
        const options = [
            {
                option: '-n, --pageName <pageName>',
                description: 'Name of the page to set the header for'
            },
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the page to update is located'
            },
            {
                option: '-t, --type [type]',
                description: 'Type of header, allowed values None|Default|Custom. Default Default',
                autocomplete: ['None', 'Default', 'Custom']
            },
            {
                option: '--imageUrl [imageUrl]',
                description: 'Server-relative URL of the image to use in the header. Image must be stored in the same site collection as the page'
            },
            {
                option: '--altText [altText]',
                description: 'Header image alt text'
            },
            {
                option: '-x, --translateX [translateX]',
                description: 'X focal point of the header image'
            },
            {
                option: '-y, --translateY [translateY]',
                description: 'Y focal point of the header image'
            },
            {
                option: '--layout [layout]',
                description: 'Layout to use in the header. Allowed values FullWidthImage|NoImage. Default FullWidthImage',
                autocomplete: ['FullWidthImage', 'NoImage']
            },
            {
                option: '--textAlignment [textAlignment]',
                description: 'How to align text in the header. Allowed values Center|Left. Default Left',
                autocomplete: ['Left', 'Center']
            },
            {
                option: '--showKicker',
                description: 'Set, to show the kicker'
            },
            {
                option: '--showPublishDate',
                description: 'Set, to show the publishing date'
            },
            {
                option: '--kicker [kicker]',
                description: 'Text to show in the kicker, when showKicker is set'
            },
            {
                option: '--authors [authors]',
                description: 'Comma-separated list of page authors to show in the header'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.pageName) {
                return 'Required parameter pageName missing';
            }
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            if (args.options.type &&
                args.options.type !== 'None' &&
                args.options.type !== 'Default' &&
                args.options.type !== 'Custom') {
                return `${args.options.type} is not a valid type value. Allowed values None|Default|Custom`;
            }
            if (args.options.translateX && isNaN(args.options.translateX)) {
                return `${args.options.translateX} is not a valid number`;
            }
            if (args.options.translateY && isNaN(args.options.translateY)) {
                return `${args.options.translateY} is not a valid number`;
            }
            if (args.options.layout &&
                args.options.layout !== 'FullWidthImage' &&
                args.options.layout !== 'NoImage') {
                return `${args.options.layout} is not a valid layout value. Allowed values FullWidthImage|NoImage`;
            }
            if (args.options.textAlignment &&
                args.options.textAlignment !== 'Left' &&
                args.options.textAlignment !== 'Center') {
                return `${args.options.textAlignment} is not a valid textAlignment value. Allowed values Left|Center`;
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If the specified ${chalk.grey('name')} doesn't refer to an existing modern page, you will get
    a ${chalk.grey('File doesn\'t exists')} error.

    The ${chalk.blue('showKicker')}, ${chalk.blue('kicker')} and ${chalk.blue('authors')} options are based on preview
    functionality that isn't available on all tenants yet.

  Examples:

    Reset the page header to default
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/team-a --pageName home.aspx

    Reset the page header to default and set authors
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/team-a --pageName home.aspx --authors "steve@contoso.com, bob@contoso.com"

    Use the specified image focused on the given coordinates in the page header
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/team-a --pageName home.aspx --type Custom --imageUrl /sites/team-a/SiteAssets/hero.jpg --altText 'Sunset over the ocean' --translateX 42.3837520042758 --translateY 56.4285714285714

    Center the page title in the header and show the publishing date
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/team-a --pageName home.aspx --textAlignment Center --showPublishDate
`);
    }
}
module.exports = new SpoPageHeaderSetCommand();
//# sourceMappingURL=page-header-set.js.map