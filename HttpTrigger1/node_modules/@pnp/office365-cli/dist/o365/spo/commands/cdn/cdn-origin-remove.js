"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoCdnOriginRemoveCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.CDN_ORIGIN_REMOVE;
    }
    get description() {
        return 'Removes CDN origin for the current SharePoint Online tenant';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.cdnType = args.options.type || 'Public';
        telemetryProps.confirm = (!(!args.options.confirm)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const cdnTypeString = args.options.type || 'Public';
        const cdnType = cdnTypeString === 'Private' ? 1 : 0;
        const chalk = vorpal.chalk;
        let spoAdminUrl = '';
        let tenantId = '';
        const removeCdnOrigin = () => {
            this
                .getTenantId(cmd, this.debug)
                .then((_tenantId) => {
                tenantId = _tenantId;
                return this.getSpoAdminUrl(cmd, this.debug);
            })
                .then((_spoAdminUrl) => {
                spoAdminUrl = _spoAdminUrl;
                return this.getRequestDigest(spoAdminUrl);
            })
                .then((res) => {
                if (this.verbose) {
                    cmd.log(`Removing origin ${args.options.origin} from the ${(cdnType === 1 ? 'Private' : 'Public')} CDN. Please wait, this might take a moment...`);
                }
                const requestOptions = {
                    url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': res.FormDigestValue
                    },
                    body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><Method Name="RemoveTenantCdnOrigin" Id="33" ObjectPathId="29"><Parameters><Parameter Type="Enum">${cdnType}</Parameter><Parameter Type="String">${Utils_1.default.escapeXml(args.options.origin)}</Parameter></Parameters></Method></Actions><ObjectPaths><Identity Id="29" Name="${tenantId}" /></ObjectPaths></Request>`
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                }
                else {
                    if (this.verbose) {
                        cmd.log(chalk.green('DONE'));
                    }
                    cb();
                }
            }, (err) => this.handleRejectedPromise(err, cmd, cb));
        };
        if (args.options.confirm) {
            if (this.debug) {
                cmd.log('Confirmation suppressed through the confirm option. Removing CDN origin...');
            }
            removeCdnOrigin();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to delete the ${args.options.origin} CDN origin?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeCdnOrigin();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '-t, --type [type]',
                description: 'Type of CDN to manage. Public|Private. Default Public',
                autocomplete: ['Public', 'Private']
            },
            {
                option: '-r, --origin <origin>',
                description: 'Origin to remove from the current CDN configuration'
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming removal of a tenant property'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (args.options.type) {
                if (args.options.type !== 'Public' &&
                    args.options.type !== 'Private') {
                    return `${args.options.type} is not a valid CDN type. Allowed values are Public|Private`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.CDN_ORIGIN_REMOVE).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
        
  Remarks:

    Using the ${chalk.blue('-t, --type')} option you can choose whether you want
    to manage the settings of the Public (default) or Private CDN. If you don't
    use the option, the command will use the Public CDN.

  Examples:
  
    Remove ${chalk.grey('*/CDN')} from the list of origins of the Public CDN
      ${commands_1.default.CDN_ORIGIN_REMOVE} -t Public -r */CDN

  More information:

    General availability of Office 365 CDN
      https://dev.office.com/blogs/general-availability-of-office-365-cdn
`);
    }
}
module.exports = new SpoCdnOriginRemoveCommand();
//# sourceMappingURL=cdn-origin-remove.js.map