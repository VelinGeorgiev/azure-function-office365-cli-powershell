"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Page_1 = require("./Page");
const vorpal = require('../../../../vorpal-init');
class SpoPageSectionListCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.PAGE_SECTION_LIST}`;
    }
    get description() {
        return 'List sections in the specific modern page';
    }
    commandAction(cmd, args, cb) {
        Page_1.Page
            .getPage(args.options.name, args.options.webUrl, cmd, this.debug, this.verbose)
            .then((clientSidePage) => {
            const sections = clientSidePage.sections;
            const isJSONOutput = args.options.output === 'json';
            if (sections.length) {
                let output = sections.map(section => Page_1.Page.getSectionInformation(section, isJSONOutput));
                if (isJSONOutput) {
                    cmd.log(output);
                }
                else {
                    cmd.log(output.map(s => {
                        return {
                            order: s.order,
                            columns: s.columns.length
                        };
                    }));
                }
            }
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the page to retrieve is located'
            },
            {
                option: '-n, --name <name>',
                description: 'Name of the page to list sections of'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.name) {
                return 'Required parameter name missing';
            }
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If the specified ${chalk.grey('name')} doesn't refer to an existing modern 
    page, you will get a ${chalk.grey('File doesn\'t exists')} error.

  Examples:
  
    List sections of a modern page named ${chalk.grey('home.aspx')}
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/team-a --name home.aspx
`);
    }
}
module.exports = new SpoPageSectionListCommand();
//# sourceMappingURL=page-section-list.js.map