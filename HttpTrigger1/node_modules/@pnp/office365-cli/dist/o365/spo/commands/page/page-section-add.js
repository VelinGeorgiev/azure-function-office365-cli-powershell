"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const clientsidepages_1 = require("./clientsidepages");
const util_1 = require("util");
const vorpal = require('../../../../vorpal-init');
class SpoPageSectionAddCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.PAGE_SECTION_ADD}`;
    }
    get description() {
        return 'Adds section to modern page';
    }
    commandAction(cmd, args, cb) {
        let pageFullName = args.options.name.toLowerCase();
        if (pageFullName.indexOf('.aspx') < 0) {
            pageFullName += '.aspx';
        }
        let canvasContent;
        if (this.verbose) {
            cmd.log(`Retrieving page information...`);
        }
        const requestOptions = {
            url: `${args.options.webUrl}/_api/sitepages/pages/GetByUrl('sitepages/${encodeURIComponent(pageFullName)}')?$select=CanvasContent1,IsPageCheckedOutToCurrentUser`,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            canvasContent = JSON.parse(res.CanvasContent1 || "[{\"controlType\":0,\"pageSettingsSlice\":{\"isDefaultDescription\":true,\"isDefaultThumbnail\":true}}]");
            if (res.IsPageCheckedOutToCurrentUser) {
                return Promise.resolve();
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/sitepages/pages/GetByUrl('sitepages/${encodeURIComponent(pageFullName)}')/checkoutpage`,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then(() => {
            // get columns
            const columns = canvasContent
                .filter(c => typeof c.controlType === 'undefined');
            // get unique zoneIndex values given each section can have 1 or more
            // columns each assigned to the zoneIndex of the corresponding section
            const zoneIndices = columns
                .map(c => c.position.zoneIndex)
                .filter((value, index, array) => {
                return array.indexOf(value) === index;
            })
                .sort();
            // zoneIndex for the new section to add
            const zoneIndex = this.getSectionIndex(zoneIndices, args.options.order);
            // get the list of columns to insert based on the selected template
            const columnsToAdd = this.getColumns(zoneIndex, args.options.sectionTemplate);
            // insert the column in the right place in the array so that
            // it stays sorted ascending by zoneIndex
            let pos = canvasContent.findIndex(c => typeof c.controlType === 'undefined' && c.position.zoneIndex > zoneIndex);
            if (pos === -1) {
                pos = canvasContent.length - 1;
            }
            canvasContent.splice(pos, 0, ...columnsToAdd);
            const requestOptions = {
                url: `${args.options.webUrl}/_api/sitepages/pages/GetByUrl('sitepages/${encodeURIComponent(pageFullName)}')/savepage`,
                headers: {
                    'accept': 'application/json;odata=nometadata',
                    'content-type': 'application/json;odata=nometadata'
                },
                body: {
                    CanvasContent1: JSON.stringify(canvasContent)
                },
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => {
            this.handleRejectedODataJsonPromise(err, cmd, cb);
        });
    }
    getSectionIndex(zoneIndices, order) {
        // zoneIndex of the first column on the page
        const minIndex = zoneIndices.length === 0 ? 0 : zoneIndices[0];
        // zoneIndex of the last column on the page
        const maxIndex = zoneIndices.length === 0 ? 0 : zoneIndices[zoneIndices.length - 1];
        if (!order || order > zoneIndices.length) {
            // no order specified, add section to the end
            return maxIndex === 0 ? 1 : maxIndex * 2;
        }
        // add to the beginning
        if (order === 1) {
            return minIndex / 2;
        }
        return zoneIndices[order - 2] + ((zoneIndices[order - 1] - zoneIndices[order - 2]) / 2);
    }
    getColumns(zoneIndex, sectionTemplate) {
        const columns = [];
        let sectionIndex = 1;
        switch (sectionTemplate) {
            case 'OneColumnFullWidth':
                columns.push(this.getColumn(zoneIndex, sectionIndex++, 0));
                break;
            case 'TwoColumn':
                columns.push(this.getColumn(zoneIndex, sectionIndex++, 6));
                columns.push(this.getColumn(zoneIndex, sectionIndex++, 6));
                break;
            case 'ThreeColumn':
                columns.push(this.getColumn(zoneIndex, sectionIndex++, 4));
                columns.push(this.getColumn(zoneIndex, sectionIndex++, 4));
                columns.push(this.getColumn(zoneIndex, sectionIndex++, 4));
                break;
            case 'TwoColumnLeft':
                columns.push(this.getColumn(zoneIndex, sectionIndex++, 8));
                columns.push(this.getColumn(zoneIndex, sectionIndex++, 4));
                break;
            case 'TwoColumnRight':
                columns.push(this.getColumn(zoneIndex, sectionIndex++, 4));
                columns.push(this.getColumn(zoneIndex, sectionIndex++, 8));
                break;
            case 'OneColumn':
            default:
                columns.push(this.getColumn(zoneIndex, sectionIndex++, 12));
                break;
        }
        return columns;
    }
    getColumn(zoneIndex, sectionIndex, sectionFactor) {
        return {
            displayMode: 2,
            position: {
                zoneIndex: zoneIndex,
                sectionIndex: sectionIndex,
                sectionFactor: sectionFactor,
                layoutIndex: 1
            },
            emphasis: {}
        };
    }
    options() {
        const options = [
            {
                option: '-n, --name <name>',
                description: 'Name of the page to add section to'
            },
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the page to retrieve is located'
            },
            {
                option: '-t, --sectionTemplate <sectionTemplate>',
                description: 'Type of section to add. Allowed values OneColumn|OneColumnFullWidth|TwoColumn|ThreeColumn|TwoColumnLeft|TwoColumnRight'
            },
            {
                option: '--order [order]',
                description: 'Order of the section to add'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.name) {
                return 'Required parameter name missing';
            }
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            if (!args.options.sectionTemplate) {
                return 'Required parameter sectionTemplate missing';
            }
            else {
                if (!(args.options.sectionTemplate in clientsidepages_1.CanvasSectionTemplate)) {
                    return `${args.options.sectionTemplate} is not a valid section template. Allowed values are OneColumn|OneColumnFullWidth|TwoColumn|ThreeColumn|TwoColumnLeft|TwoColumnRight`;
                }
            }
            if (typeof args.options.order !== 'undefined') {
                if (!util_1.isNumber(args.options.order) || args.options.order < 1) {
                    return 'The value of parameter order must be 1 or higher';
                }
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If the specified ${chalk.grey('name')} doesn't refer to an existing modern 
    page, you will get a ${chalk.grey('File doesn\'t exists')} error.

  Examples:
  
    Add section to the modern page named ${chalk.grey('home.aspx')}
      ${this.name} --name home.aspx --webUrl https://contoso.sharepoint.com/sites/newsletter  --sectionTemplate OneColumn --order 1
`);
    }
}
module.exports = new SpoPageSectionAddCommand();
//# sourceMappingURL=page-section-add.js.map