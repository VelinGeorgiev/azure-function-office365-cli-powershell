"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoSiteDesignRunStatusGetCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.SITEDESIGN_RUN_STATUS_GET}`;
    }
    get description() {
        return 'Gets information about the site scripts executed for the specified site design';
    }
    commandAction(cmd, args, cb) {
        const body = {
            runId: args.options.runId
        };
        const requestOptions = {
            url: `${args.options.webUrl}/_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.GetSiteDesignRunStatus`,
            headers: {
                accept: 'application/json;odata=nometadata',
                'content-type': 'application/json;odata=nometadata'
            },
            body: body,
            json: true
        };
        request_1.default.post(requestOptions)
            .then((res) => {
            if (args.options.output === 'json') {
                cmd.log(res.value);
            }
            else {
                cmd.log(res.value.map(s => {
                    return {
                        ActionTitle: s.ActionTitle,
                        SiteScriptTitle: s.SiteScriptTitle,
                        OutcomeText: s.OutcomeText
                    };
                }));
            }
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site for which to get the information'
            },
            {
                option: '-i, --runId <runId>',
                description: 'ID of the site design applied to the site as retrieved using \'spo sitedesign run list\''
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.runId) {
                return 'Required parameter runId missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.runId)) {
                return `${args.options.runId} is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:
      
    For text output mode, displays the name of the action, site script and the
    outcome of the action. For JSON output mode, displays all available
    information.

  Examples:
  
    List information about site scripts executed for the specified site design
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/team-a --runId b4411557-308b-4545-a3c4-55297d5cd8c8

  More information:

    SharePoint site design and site script overview
      https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/site-design-overview
`);
    }
}
module.exports = new SpoSiteDesignRunStatusGetCommand();
//# sourceMappingURL=sitedesign-run-status-get.js.map