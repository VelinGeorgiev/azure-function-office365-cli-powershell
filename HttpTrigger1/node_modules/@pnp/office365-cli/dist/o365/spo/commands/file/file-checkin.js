"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
var CheckinType;
(function (CheckinType) {
    CheckinType[CheckinType["Minor"] = 0] = "Minor";
    CheckinType[CheckinType["Major"] = 1] = "Major";
    CheckinType[CheckinType["Overwrite"] = 2] = "Overwrite";
})(CheckinType || (CheckinType = {}));
class SpoFileCheckinCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.FILE_CHECKIN;
    }
    get description() {
        return 'Checks in specified file';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.id = (!(!args.options.id)).toString();
        telemetryProps.url = (!(!args.options.fileUrl)).toString();
        telemetryProps.type = args.options.type || 'Major';
        telemetryProps.comment = typeof args.options.comment !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let type = CheckinType.Major;
        if (args.options.type) {
            switch (args.options.type.toLowerCase()) {
                case 'minor':
                    type = CheckinType.Minor;
                    break;
                case 'overwrite':
                    type = CheckinType.Overwrite;
            }
        }
        let comment = '';
        if (args.options.comment) {
            comment = encodeURIComponent(args.options.comment);
        }
        let requestUrl = '';
        if (args.options.id) {
            requestUrl = `${args.options.webUrl}/_api/web/GetFileById('${encodeURIComponent(args.options.id)}')/checkin(comment='${comment}',checkintype=${type})`;
        }
        if (args.options.fileUrl) {
            requestUrl = `${args.options.webUrl}/_api/web/GetFileByServerRelativeUrl('${encodeURIComponent(args.options.fileUrl)}')/checkin(comment='${comment}',checkintype=${type})`;
        }
        const requestOptions = {
            url: requestUrl,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .post(requestOptions)
            .then(() => {
            if (this.verbose) {
                cmd.log('DONE');
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site where the file is located'
            },
            {
                option: '-f, --fileUrl [fileUrl]',
                description: 'The server-relative URL of the file to retrieve. Specify either fileUrl or id but not both'
            },
            {
                option: '-i, --id [id]',
                description: 'The UniqueId (GUID) of the file to retrieve. Specify either fileUrl or id but not both'
            },
            {
                option: '-t, --type [type]',
                description: 'Type of the check in. Available values Minor|Major|Overwrite. Default is Major',
                autocomplete: ['Minor', 'Major', 'Overwrite']
            },
            {
                option: '--comment [comment]',
                description: 'Comment to set when checking the file in. Its length must be less than 1024 letters. Default is empty string'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (args.options.id) {
                if (!Utils_1.default.isValidGuid(args.options.id)) {
                    return `${args.options.id} is not a valid GUID`;
                }
            }
            if (args.options.id && args.options.fileUrl) {
                return 'Specify either fileUrl or id but not both';
            }
            if (!args.options.id && !args.options.fileUrl) {
                return 'Specify fileUrl or id, one is required';
            }
            if (args.options.comment && args.options.comment.length > 1023) {
                return 'The length of the comment must be less than 1024 letters';
            }
            if (args.options.type) {
                const allowedValues = ['minor', 'major', 'overwrite'];
                const type = args.options.type.toLowerCase();
                if (allowedValues.indexOf(type) === -1) {
                    return 'Wrong type specified. Available values are Minor|Major|Overwrite';
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Checks in file with UniqueId ${chalk.grey('b2307a39-e878-458b-bc90-03bc578531d6')}
    located in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.FILE_CHECKIN} --webUrl https://contoso.sharepoint.com/sites/project-x --id 'b2307a39-e878-458b-bc90-03bc578531d6' 

    Checks in file with server-relative url
    ${chalk.grey('/sites/project-x/documents/Test1.docx')} located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.FILE_CHECKIN} --webUrl https://contoso.sharepoint.com/sites/project-x --fileUrl '/sites/project-x/documents/Test1.docx'

    Checks in minor version of file with server-relative url
      ${chalk.grey('/sites/project-x/documents/Test1.docx')} located in site
      ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
        ${commands_1.default.FILE_CHECKIN} --webUrl https://contoso.sharepoint.com/sites/project-x --fileUrl '/sites/project-x/documents/Test1.docx' --type minor

    Checks in file ${chalk.grey('/sites/project-x/documents/Test1.docx')} with comment located in site
      ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
        ${commands_1.default.FILE_CHECKIN} --webUrl https://contoso.sharepoint.com/sites/project-x --fileUrl '/sites/project-x/documents/Test1.docx' --comment 'approved'
      `);
    }
}
module.exports = new SpoFileCheckinCommand();
//# sourceMappingURL=file-checkin.js.map