"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Page_1 = require("./Page");
const vorpal = require('../../../../vorpal-init');
class SpoPageColumnListCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.PAGE_COLUMN_LIST}`;
    }
    get description() {
        return 'Lists columns in the specific section of a modern page';
    }
    commandAction(cmd, args, cb) {
        Page_1.Page
            .getPage(args.options.name, args.options.webUrl, cmd, this.debug, this.verbose)
            .then((clientSidePage) => {
            const sections = clientSidePage.sections
                .filter(section => section.order === args.options.section);
            if (sections.length) {
                const isJSONOutput = args.options.output === 'json';
                cmd.log(sections[0].columns.map(c => {
                    const column = Page_1.Page.getColumnsInformation(c, isJSONOutput);
                    column.controls = c.controls.length;
                    return column;
                }));
            }
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the page to retrieve is located'
            },
            {
                option: '-n, --name <name>',
                description: 'Name of the page to list columns of'
            },
            {
                option: '-s, --section <sectionId>',
                description: 'ID of the section for which to list columns'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.name) {
                return 'Required parameter name missing';
            }
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            if (!args.options.section) {
                return 'Required parameter section missing';
            }
            else {
                if (isNaN(args.options.section)) {
                    return `${args.options.section} is not a number`;
                }
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If the specified ${chalk.grey('name')} doesn't refer to an existing modern
    page, you will get a ${chalk.grey('File doesn\'t exists')} error.

  Examples:
  
    List columns in the first section of a modern page with name ${chalk.grey('home.aspx')}
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/team-a --name home.aspx --section 1
`);
    }
}
module.exports = new SpoPageColumnListCommand();
//# sourceMappingURL=page-column-list.js.map