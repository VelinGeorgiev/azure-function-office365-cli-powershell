"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class ListListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.LIST_LIST;
    }
    get description() {
        return 'Lists all available list in the specified site';
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Retrieving all lists in site at ${args.options.webUrl}...`);
        }
        let requestUrl;
        if (args.options.output === 'json') {
            requestUrl = `${args.options.webUrl}/_api/web/lists?$expand=RootFolder`;
        }
        else {
            requestUrl = `${args.options.webUrl}/_api/web/lists?$expand=RootFolder&$select=Title,Id,RootFolder/ServerRelativeURL`;
        }
        const requestOptions = {
            url: requestUrl,
            method: 'GET',
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((listInstances) => {
            if (args.options.output === 'json') {
                cmd.log(listInstances);
            }
            else {
                cmd.log(listInstances.value.map(l => {
                    return {
                        Title: l.Title,
                        Url: l.RootFolder.ServerRelativeUrl,
                        Id: l.Id
                    };
                }));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the lists to retrieve are located'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Return all lists located in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_LIST} --webUrl https://contoso.sharepoint.com/sites/project-x
      `);
    }
}
module.exports = new ListListCommand();
//# sourceMappingURL=list-list.js.map