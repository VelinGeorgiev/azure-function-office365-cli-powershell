"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoSiteScriptSetCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.SITESCRIPT_SET}`;
    }
    get description() {
        return 'Updates existing site script';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.title = (!(!args.options.title)).toString();
        telemetryProps.description = (!(!args.options.description)).toString();
        telemetryProps.version = (!(!args.options.version)).toString();
        telemetryProps.content = (!(!args.options.content)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let spoUrl = '';
        this
            .getSpoUrl(cmd, this.debug)
            .then((_spoUrl) => {
            spoUrl = _spoUrl;
            return this.getRequestDigest(spoUrl);
        })
            .then((res) => {
            const updateInfo = {
                Id: args.options.id
            };
            if (args.options.title) {
                updateInfo.Title = args.options.title;
            }
            if (args.options.description) {
                updateInfo.Description = args.options.description;
            }
            if (args.options.version) {
                updateInfo.Version = parseInt(args.options.version);
            }
            if (args.options.content) {
                updateInfo.Content = args.options.content;
            }
            const requestOptions = {
                url: `${spoUrl}/_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.UpdateSiteScript`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue,
                    'content-type': 'application/json;charset=utf-8',
                    accept: 'application/json;odata=nometadata'
                },
                body: { updateInfo: updateInfo },
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            cmd.log(res);
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-i, --id <id>',
                description: 'Site script ID'
            },
            {
                option: '-t, --title [title]',
                description: 'Site script title'
            },
            {
                option: '-d, --description [description]',
                description: 'Site script description'
            },
            {
                option: '-v, --version [version]',
                description: 'Site script version'
            },
            {
                option: '-c, --content [content]',
                description: 'JSON string containing the site script'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.id) {
                return 'Required parameter id missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
            if (args.options.version) {
                const version = parseInt(args.options.version);
                if (isNaN(version)) {
                    return `${args.options.version} is not a number`;
                }
            }
            if (args.options.content) {
                try {
                    JSON.parse(args.options.content);
                }
                catch (e) {
                    return `Specified content value is not a valid JSON string. Error: ${e}`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If the specified ${chalk.grey('id')} doesn't refer to an existing site script, you will get
    a ${chalk.grey('File not found')} error.

  Examples:
  
    Update title of the existing site script with ID ${chalk.grey('2c1ba4c4-cd9b-4417-832f-92a34bc34b2a')}
      ${this.name} --id 2c1ba4c4-cd9b-4417-832f-92a34bc34b2a --title "Contoso"

  More information:

    SharePoint site design and site script overview
      https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/site-design-overview
`);
    }
}
module.exports = new SpoSiteScriptSetCommand();
//# sourceMappingURL=sitescript-set.js.map