"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoStorageEntityGetCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.STORAGEENTITY_GET}`;
    }
    get description() {
        return 'Get details for the specified tenant property';
    }
    commandAction(cmd, args, cb) {
        this
            .getSpoUrl(cmd, this.debug)
            .then((spoUrl) => {
            const requestOptions = {
                url: `${spoUrl}/_api/web/GetStorageEntity('${encodeURIComponent(args.options.key)}')`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })
            .then((property) => {
            if (property["odata.null"] === true) {
                if (this.verbose) {
                    cmd.log(`Property with key ${args.options.key} not found`);
                }
            }
            else {
                cmd.log({
                    Key: args.options.key,
                    Value: property.Value,
                    Description: property.Description,
                    Comment: property.Comment
                });
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    options() {
        const options = [{
                option: '-k, --key <key>',
                description: 'Name of the tenant property to retrieve'
            }];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.STORAGEENTITY_GET).helpInformation());
        log(`  Remarks:

    Tenant properties are stored in the app catalog site associated with
    the site to which you are currently logged in. When retrieving the specified
    tenant property, SharePoint will automatically find the associated app
    catalog and try to retrieve the property from it.

  Examples:
  
    Show the value, description and comment of the ${chalk.grey('AnalyticsId')} tenant property
      ${commands_1.default.STORAGEENTITY_GET} --key AnalyticsId

  More information:

    SharePoint Framework Tenant Properties
      https://docs.microsoft.com/en-us/sharepoint/dev/spfx/tenant-properties
`);
    }
}
module.exports = new SpoStorageEntityGetCommand();
//# sourceMappingURL=storageentity-get.js.map