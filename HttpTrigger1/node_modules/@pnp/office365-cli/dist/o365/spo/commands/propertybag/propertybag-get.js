"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const propertybag_base_1 = require("./propertybag-base");
const ClientSvc_1 = require("../../ClientSvc");
const vorpal = require('../../../../vorpal-init');
class SpoPropertyBagGetCommand extends propertybag_base_1.SpoPropertyBagBaseCommand {
    get name() {
        return `${commands_1.default.PROPERTYBAG_GET}`;
    }
    get description() {
        return 'Gets the value of the specified property from the property bag';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.folder = (!(!args.options.folder)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const clientSvcCommons = new ClientSvc_1.ClientSvc(cmd, this.debug);
        this
            .getRequestDigest(args.options.webUrl)
            .then((contextResponse) => {
            this.formDigestValue = contextResponse.FormDigestValue;
            return clientSvcCommons.getCurrentWebIdentity(args.options.webUrl, this.formDigestValue);
        })
            .then((identityResp) => {
            const opts = args.options;
            if (opts.folder) {
                return this.getFolderPropertyBag(identityResp, opts.webUrl, opts.folder, cmd);
            }
            return this.getWebPropertyBag(identityResp, opts.webUrl, cmd);
        })
            .then((propertyBagData) => {
            const property = this.filterByKey(propertyBagData, args.options.key);
            if (property) {
                cmd.log(property.value);
            }
            else if (this.verbose) {
                cmd.log('Property not found.');
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site from which the property bag value should be retrieved'
            },
            {
                option: '-k, --key <key>',
                description: 'Key of the property for which the value should be retrieved. Case-sensitive'
            },
            {
                option: '-f, --folder [folder]',
                description: 'Site-relative URL of the folder from which to retrieve property bag value. Case-sensitive',
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.key) {
                return `Required option key missing`;
            }
            if (SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl) !== true) {
                return 'Missing required option url';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.PROPERTYBAG_GET).helpInformation());
        log(`  Examples:

    Returns the value of the ${chalk.grey('key1')} property from the property bag located
    in site ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_GET} --webUrl https://contoso.sharepoint.com/sites/test --key key1
    
    Returns the value of the ${chalk.grey('key1')} property from the property bag located
    in site root folder ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_GET} --webUrl https://contoso.sharepoint.com/sites/test --key key1 --folder /

    Returns the value of the ${chalk.grey('key1')} property from the property bag located
    in site document library ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_GET} --webUrl https://contoso.sharepoint.com/sites/test --key key1 --folder '/Shared Documents'

    Returns the value of the ${chalk.grey('key1')} property from the property bag located
    in folder in site document library ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_GET} --webUrl https://contoso.sharepoint.com/sites/test --key key1 --folder '/Shared Documents/MyFolder'

    Returns the value of the ${chalk.grey('key1')} property from the property bag located
    in site list ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.PROPERTYBAG_GET} --webUrl https://contoso.sharepoint.com/sites/test --key key1 --folder /Lists/MyList
      `);
    }
    filterByKey(propertyBag, key) {
        const keys = Object.keys(propertyBag);
        for (let i = 0; i < keys.length; i++) {
            // we have to normalize the keys and values before we can filter
            // since they carry extra information
            // ex. : 'vti_level$  Int32' instead of 'vti_level'
            const formattedProperty = this.formatProperty(keys[i], propertyBag[keys[i]]);
            if (formattedProperty.key === key) {
                return formattedProperty;
            }
        }
        return null;
    }
}
module.exports = new SpoPropertyBagGetCommand();
//# sourceMappingURL=propertybag-get.js.map