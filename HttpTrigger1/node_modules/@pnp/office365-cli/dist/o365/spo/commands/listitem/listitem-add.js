"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const FolderExtensions_1 = require("../../FolderExtensions");
const vorpal = require('../../../../vorpal-init');
class SpoListItemAddCommand extends SpoCommand_1.default {
    allowUnknownOptions() {
        return true;
    }
    get name() {
        return commands_1.default.LISTITEM_ADD;
    }
    get description() {
        return 'Creates a list item in the specified list';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = typeof args.options.listId !== 'undefined';
        telemetryProps.listTitle = typeof args.options.listTitle !== 'undefined';
        telemetryProps.contentType = typeof args.options.contentType !== 'undefined';
        telemetryProps.folder = typeof args.options.folder !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const listIdArgument = args.options.listId || '';
        const listTitleArgument = args.options.listTitle || '';
        const listRestUrl = (args.options.listId ?
            `${args.options.webUrl}/_api/web/lists(guid'${encodeURIComponent(listIdArgument)}')`
            : `${args.options.webUrl}/_api/web/lists/getByTitle('${encodeURIComponent(listTitleArgument)}')`);
        let contentTypeName = '';
        let targetFolderServerRelativeUrl = '';
        const folderExtensions = new FolderExtensions_1.FolderExtensions(cmd, this.debug);
        if (this.verbose) {
            cmd.log(`Getting content types for list...`);
        }
        const requestOptions = {
            url: `${listRestUrl}/contenttypes?$select=Name,Id`,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((response) => {
            if (args.options.contentType) {
                const foundContentType = response.value.filter((ct) => {
                    const contentTypeMatch = ct.Id.StringValue === args.options.contentType || ct.Name === args.options.contentType;
                    if (this.debug) {
                        cmd.log(`Checking content type value [${ct.Name}]: ${contentTypeMatch}`);
                    }
                    return contentTypeMatch;
                });
                if (this.debug) {
                    cmd.log('content type filter output...');
                    cmd.log(foundContentType);
                }
                if (foundContentType.length > 0) {
                    contentTypeName = foundContentType[0].Name;
                }
                // After checking for content types, throw an error if the name is blank
                if (!contentTypeName || contentTypeName === '') {
                    return Promise.reject(`Specified content type '${args.options.contentType}' doesn't exist on the target list`);
                }
                if (this.debug) {
                    cmd.log(`using content type name: ${contentTypeName}`);
                }
            }
            if (args.options.folder) {
                if (this.debug) {
                    cmd.log('setting up folder lookup response ...');
                }
                const requestOptions = {
                    url: `${listRestUrl}/rootFolder`,
                    headers: {
                        'accept': 'application/json;odata=nometadata'
                    },
                    json: true
                };
                return request_1.default
                    .get(requestOptions)
                    .then(rootFolderResponse => {
                    targetFolderServerRelativeUrl = Utils_1.default.getServerRelativePath(rootFolderResponse["ServerRelativeUrl"], args.options.folder);
                    return folderExtensions.ensureFolder(args.options.webUrl, targetFolderServerRelativeUrl);
                });
            }
            else {
                return Promise.resolve();
            }
        })
            .then(() => {
            if (this.verbose) {
                cmd.log(`Creating item in list ${args.options.listId || args.options.listTitle} in site ${args.options.webUrl}...`);
            }
            const requestBody = {
                formValues: this.mapRequestBody(args.options)
            };
            if (args.options.folder) {
                requestBody.listItemCreateInfo = {
                    FolderPath: {
                        DecodedUrl: targetFolderServerRelativeUrl
                    }
                };
            }
            if (args.options.contentType && contentTypeName !== '') {
                if (this.debug) {
                    cmd.log(`Specifying content type name [${contentTypeName}] in request body`);
                }
                requestBody.formValues.push({
                    FieldName: 'ContentType',
                    FieldValue: contentTypeName
                });
            }
            const requestOptions = {
                url: `${listRestUrl}/AddValidateUpdateItemUsingPath()`,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                body: requestBody,
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then((response) => {
            // Response is from /AddValidateUpdateItemUsingPath POST call, perform get on added item to get all field values
            const fieldValues = response.value;
            const idField = fieldValues.filter((thisField, index, values) => {
                return (thisField.FieldName == "Id");
            });
            if (this.debug) {
                cmd.log(`field values returned:`);
                cmd.log(fieldValues);
                cmd.log(`Id returned by AddValidateUpdateItemUsingPath: ${idField}`);
            }
            if (idField.length === 0) {
                return Promise.reject(`Item didn't add successfully`);
            }
            const requestOptions = {
                url: `${listRestUrl}/items(${idField[0].FieldValue})`,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.get(requestOptions);
        })
            .then((response) => {
            cmd.log(response);
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the item should be added'
            },
            {
                option: '-l, --listId [listId]',
                description: 'ID of the list where the item should be added. Specify listId or listTitle but not both'
            },
            {
                option: '-t, --listTitle [listTitle]',
                description: 'Title of the list where the item should be added. Specify listId or listTitle but not both'
            },
            {
                option: '-c, --contentType [contentType]',
                description: 'The name or the ID of the content type to associate with the new item'
            },
            {
                option: '-f, --folder [folder]',
                description: 'The list-relative URL of the folder where the item should be created'
            },
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    types() {
        return {
            string: [
                'webUrl',
                'listId',
                'listTitle',
                'contentType',
                'folder'
            ]
        };
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.listId && !args.options.listTitle) {
                return `Specify listId or listTitle`;
            }
            if (args.options.listId && args.options.listTitle) {
                return `Specify listId or listTitle but not both`;
            }
            if (args.options.listId &&
                !Utils_1.default.isValidGuid(args.options.listId)) {
                return `${args.options.listId} in option listId is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Add an item with Title ${chalk.grey('Demo Item')} and content type name ${chalk.grey('Item')} to list with
    title ${chalk.grey('Demo List')} in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LISTITEM_ADD} --contentType Item --listTitle "Demo List" --webUrl https://contoso.sharepoint.com/sites/project-x --Title "Demo Item"

    Add an item with Title ${chalk.grey('Demo Multi Managed Metadata Field')} and
    a single-select metadata field named ${chalk.grey('SingleMetadataField')} to list with
    title ${chalk.grey('Demo List')} in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LISTITEM_ADD} --listTitle "Demo List" --webUrl https://contoso.sharepoint.com/sites/project-x --Title "Demo Single Managed Metadata Field" --SingleMetadataField "TermLabel1|fa2f6bfd-1fad-4d18-9c89-289fe6941377;"

    Add an item with Title ${chalk.grey('Demo Multi Managed Metadata Field')} and a multi-select
    metadata field named ${chalk.grey('MultiMetadataField')} to list with title ${chalk.grey('Demo List')}
    in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LISTITEM_ADD} --listTitle "Demo List" --webUrl https://contoso.sharepoint.com/sites/project-x --Title "Demo Multi Managed Metadata Field" --MultiMetadataField "TermLabel1|cf8c72a1-0207-40ee-aebd-fca67d20bc8a;TermLabel2|e5cc320f-8b65-4882-afd5-f24d88d52b75;"
  
    Add an item with Title ${chalk.grey('Demo Single Person Field')} and a single-select people
    field named ${chalk.grey('SinglePeopleField')} to list with title ${chalk.grey('Demo List')} in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LISTITEM_ADD} --listTitle "Demo List" --webUrl https://contoso.sharepoint.com/sites/project-x --Title "Demo Single Person Field" --SinglePeopleField "[{'Key':'i:0#.f|membership|markh@conotoso.com'}]"
      
    Add an item with Title ${chalk.grey('Demo Multi Person Field')} and a multi-select people
    field named ${chalk.grey('MultiPeopleField')} to list with title ${chalk.grey('Demo List')} in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LISTITEM_ADD} --listTitle "Demo List" --webUrl https://contoso.sharepoint.com/sites/project-x --Title "Demo Multi Person Field" --MultiPeopleField "[{'Key':'i:0#.f|membership|markh@conotoso.com'},{'Key':'i:0#.f|membership|adamb@conotoso.com'}]"
    
    Add an item with Title ${chalk.grey('Demo Hyperlink Field')} and a hyperlink field named
    ${chalk.grey('CustomHyperlink')} to list with title ${chalk.grey('Demo List')} in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LISTITEM_ADD} --listTitle "Demo List" --webUrl https://contoso.sharepoint.com/sites/project-x --Title "Demo Hyperlink Field" --CustomHyperlink "https://www.bing.com, Bing"
   `);
    }
    mapRequestBody(options) {
        const requestBody = [];
        const excludeOptions = [
            'listTitle',
            'listId',
            'webUrl',
            'contentType',
            'folder',
            'debug',
            'verbose'
        ];
        Object.keys(options).forEach(key => {
            if (excludeOptions.indexOf(key) === -1) {
                requestBody.push({ FieldName: key, FieldValue: `${options[key]}` });
            }
        });
        return requestBody;
    }
}
module.exports = new SpoListItemAddCommand();
//# sourceMappingURL=listitem-add.js.map