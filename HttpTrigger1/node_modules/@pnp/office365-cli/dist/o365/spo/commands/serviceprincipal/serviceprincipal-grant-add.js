"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoServicePrincipalGrantAddCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.SERVICEPRINCIPAL_GRANT_ADD}`;
    }
    get description() {
        return 'Grants the service principal permission to the specified API';
    }
    alias() {
        return [commands_1.default.SP_GRANT_ADD];
    }
    commandAction(cmd, args, cb) {
        let spoAdminUrl = '';
        this
            .getSpoAdminUrl(cmd, this.debug)
            .then((_spoAdminUrl) => {
            spoAdminUrl = _spoAdminUrl;
            if (this.verbose) {
                cmd.log(`Retrieving request digest...`);
            }
            return this.getRequestDigest(spoAdminUrl);
        })
            .then((res) => {
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="4" ObjectPathId="3" /><ObjectPath Id="6" ObjectPathId="5" /><ObjectPath Id="8" ObjectPathId="7" /><Query Id="9" ObjectPathId="7"><Query SelectAllProperties="true"><Properties /></Query></Query></Actions><ObjectPaths><Constructor Id="3" TypeId="{104e8f06-1e00-4675-99c6-1b9b504ed8d8}" /><Property Id="5" ParentId="3" Name="PermissionRequests" /><Method Id="7" ParentId="5" Name="Approve"><Parameters><Parameter Type="String">${Utils_1.default.escapeXml(args.options.resource)}</Parameter><Parameter Type="String">${Utils_1.default.escapeXml(args.options.scope)}</Parameter></Parameters></Method></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            else {
                const result = json[json.length - 1];
                delete result._ObjectType_;
                cmd.log(result);
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-r, --resource <resource>',
                description: 'The name of the resource for which permissions should be granted'
            },
            {
                option: '-s, --scope <scope>',
                description: 'The name of the permission that should be granted'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.resource) {
                return 'Required parameter resource missing';
            }
            if (!args.options.scope) {
                return 'Required parameter scope missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.SERVICEPRINCIPAL_GRANT_ADD).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
        
  Examples:
  
    Grant the service principal permission to read email using the Microsoft
    Graph
      ${commands_1.default.SERVICEPRINCIPAL_GRANT_ADD} --resource 'Microsoft Graph' --scope 'Mail.Read'

    Grant the service principal permission to a custom API
      ${commands_1.default.SERVICEPRINCIPAL_GRANT_ADD} --resource 'contoso-api' --scope 'user_impersonation'
`);
    }
}
module.exports = new SpoServicePrincipalGrantAddCommand();
//# sourceMappingURL=serviceprincipal-grant-add.js.map