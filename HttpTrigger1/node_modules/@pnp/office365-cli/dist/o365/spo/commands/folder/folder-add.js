"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoFolderAddCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.FOLDER_ADD;
    }
    get description() {
        return 'Creates a folder within a parent folder';
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Adding folder to site ${args.options.webUrl}...`);
        }
        const parentFolderServerRelativeUrl = Utils_1.default.getServerRelativePath(args.options.webUrl, args.options.parentFolderUrl);
        const serverRelativeUrl = `${parentFolderServerRelativeUrl}/${args.options.name}`;
        const requestUrl = `${args.options.webUrl}/_api/web/folders`;
        const requestOptions = {
            url: requestUrl,
            headers: {
                'accept': 'application/json;odata=nometadata',
            },
            body: {
                'ServerRelativeUrl': serverRelativeUrl
            },
            json: true
        };
        request_1.default
            .post(requestOptions)
            .then((folder) => {
            cmd.log(folder);
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site where the folder will be created'
            },
            {
                option: '-p, --parentFolderUrl <parentFolderUrl>',
                description: 'Site-relative URL of the parent folder'
            },
            {
                option: '-n, --name <name>',
                description: 'Name of the new folder to be created'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.parentFolderUrl) {
                return 'Required parameter parentFolderUrl missing';
            }
            if (!args.options.name) {
                return 'Required parameter name missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Creates folder in a parent folder with site relative url ${chalk.grey('/Shared Documents')}
    located in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.FOLDER_ADD} --webUrl https://contoso.sharepoint.com/sites/project-x --parentFolderUrl '/Shared Documents' --name 'My Folder Name'
    `);
    }
}
module.exports = new SpoFolderAddCommand();
//# sourceMappingURL=folder-add.js.map