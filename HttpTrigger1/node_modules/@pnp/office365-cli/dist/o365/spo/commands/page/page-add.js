"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Auth_1 = require("../../../../Auth");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoPageAddCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.PAGE_ADD}`;
    }
    get description() {
        return 'Creates modern page';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.layoutType = args.options.layoutType;
        telemetryProps.promoteAs = args.options.promoteAs;
        telemetryProps.commentsEnabled = args.options.commentsEnabled || false;
        telemetryProps.publish = args.options.publish || false;
        telemetryProps.publishMessage = typeof args.options.publishMessage !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let resource = Auth_1.Auth.getResourceFromUrl(args.options.webUrl);
        let requestDigest = '';
        let itemId = '';
        let pageName = args.options.name;
        const serverRelativeSiteUrl = Utils_1.default.getServerRelativeSiteUrl(args.options.webUrl);
        const fileNameWithoutExtension = pageName.replace('.aspx', '');
        let bannerImageUrl = '';
        let canvasContent1 = '';
        let layoutWebpartsContent = '';
        let templateListItemId = '';
        this
            .getRequestDigest(args.options.webUrl)
            .then((res) => {
            requestDigest = res.FormDigestValue;
            if (!pageName.endsWith('.aspx')) {
                pageName += '.aspx';
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/getfolderbyserverrelativeurl('${serverRelativeSiteUrl}/sitepages')/files/AddTemplateFile`,
                headers: {
                    'X-RequestDigest': requestDigest,
                    'content-type': 'application/json;odata=nometadata',
                    accept: 'application/json;odata=nometadata'
                },
                body: {
                    urlOfFile: `${serverRelativeSiteUrl}/sitepages/${pageName}`,
                    templateFileType: 3
                },
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            itemId = res.UniqueId;
            const layoutType = args.options.layoutType || 'Article';
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/getfilebyid('${itemId}')/ListItemAllFields`,
                headers: {
                    'X-RequestDigest': requestDigest,
                    'X-HTTP-Method': 'MERGE',
                    'IF-MATCH': '*',
                    'content-type': 'application/json;odata=nometadata',
                    accept: 'application/json;odata=nometadata'
                },
                body: {
                    ContentTypeId: '0x0101009D1CB255DA76424F860D91F20E6C4118',
                    Title: args.options.title ? args.options.title : (args.options.name.indexOf('.aspx') > -1 ? args.options.name.substr(0, args.options.name.indexOf('.aspx')) : args.options.name),
                    ClientSideApplicationId: 'b6917cb1-93a0-4b97-a84d-7cf49975d4ec',
                    PageLayoutType: layoutType
                },
                json: true
            };
            if (layoutType === 'Article') {
                requestOptions.body.PromotedState = 0;
                requestOptions.body.BannerImageUrl = {
                    Description: '/_layouts/15/images/sitepagethumbnail.png',
                    Url: `${resource}/_layouts/15/images/sitepagethumbnail.png`
                };
            }
            return request_1.default.post(requestOptions);
        })
            .then(() => {
            if (!args.options.promoteAs) {
                return Promise.resolve({ Id: '' });
            }
            const requestOptions = {
                json: true
            };
            switch (args.options.promoteAs) {
                case 'HomePage':
                    requestOptions.url = `${args.options.webUrl}/_api/web/rootfolder`;
                    requestOptions.headers = {
                        'X-RequestDigest': requestDigest,
                        'X-HTTP-Method': 'MERGE',
                        'IF-MATCH': '*',
                        'content-type': 'application/json;odata=nometadata',
                        accept: 'application/json;odata=nometadata'
                    };
                    requestOptions.body = {
                        WelcomePage: `SitePages/${pageName}`
                    };
                    break;
                case 'NewsPage':
                    requestOptions.url = `${args.options.webUrl}/_api/web/getfilebyid('${itemId}')/ListItemAllFields`;
                    requestOptions.headers = {
                        'X-RequestDigest': requestDigest,
                        'X-HTTP-Method': 'MERGE',
                        'IF-MATCH': '*',
                        'content-type': 'application/json;odata=nometadata',
                        accept: 'application/json;odata=nometadata'
                    };
                    requestOptions.body = {
                        PromotedState: 2,
                        FirstPublishedDate: new Date().toISOString().replace('Z', '')
                    };
                    break;
                case 'Template':
                    requestOptions.url = `${args.options.webUrl}/_api/web/getfilebyid('${itemId}')/ListItemAllFields`;
                    requestOptions.headers = {
                        'X-RequestDigest': requestDigest,
                        'content-type': 'application/json;odata=nometadata',
                        accept: 'application/json;odata=nometadata'
                    };
                    break;
            }
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            if (args.options.promoteAs !== 'Template') {
                return Promise.resolve({ Id: '', BannerImageUrl: '', CanvasContent1: '', LayoutWebpartsContent: '', UniqueId: '' });
            }
            const requestOptions = {
                json: true,
                url: `${args.options.webUrl}/_api/SitePages/Pages(${res.Id})/SavePageAsTemplate`,
                headers: {
                    'X-RequestDigest': requestDigest,
                    'content-type': 'application/json;odata=nometadata',
                    'X-HTTP-Method': 'POST',
                    'IF-MATCH': '*',
                    accept: 'application/json;odata=nometadata'
                }
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            if (args.options.promoteAs !== 'Template') {
                return Promise.resolve();
            }
            bannerImageUrl = res.BannerImageUrl;
            canvasContent1 = res.CanvasContent1;
            layoutWebpartsContent = res.LayoutWebpartsContent;
            templateListItemId = res.Id;
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/getfilebyid('${res.UniqueId}')/ListItemAllFields/SetCommentsDisabled(${!args.options.commentsEnabled})`,
                headers: {
                    'X-RequestDigest': requestDigest,
                    'content-type': 'application/json;odata=nometadata',
                    accept: 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then(() => {
            if (args.options.promoteAs !== 'Template') {
                return Promise.resolve();
            }
            const requestOptions = {
                json: true,
                url: `${args.options.webUrl}/_api/SitePages/Pages(${templateListItemId})/SavePage`,
                headers: {
                    'X-RequestDigest': requestDigest,
                    'X-HTTP-Method': 'MERGE',
                    'IF-MATCH': '*',
                    'content-type': 'application/json;odata=nometadata',
                    accept: 'application/json;odata=nometadata'
                },
                body: {
                    BannerImageUrl: bannerImageUrl,
                    CanvasContent1: canvasContent1,
                    LayoutWebpartsContent: layoutWebpartsContent
                }
            };
            return request_1.default.post(requestOptions);
        })
            .then(() => {
            if (args.options.promoteAs !== 'Template') {
                return Promise.resolve();
            }
            const requestOptions = {
                json: true,
                url: `${args.options.webUrl}/_api/SitePages/Pages(${templateListItemId})/SavePageAsDraft`,
                headers: {
                    'X-RequestDigest': requestDigest,
                    'X-HTTP-Method': 'MERGE',
                    'IF-MATCH': '*',
                    'content-type': 'application/json;odata=nometadata',
                    accept: 'application/json;odata=nometadata'
                },
                body: {
                    Title: fileNameWithoutExtension,
                    BannerImageUrl: bannerImageUrl,
                    CanvasContent1: canvasContent1,
                    LayoutWebpartsContent: layoutWebpartsContent
                }
            };
            return request_1.default.post(requestOptions);
        })
            .then(() => {
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/getfilebyid('${itemId}')/ListItemAllFields/SetCommentsDisabled(${!args.options.commentsEnabled})`,
                headers: {
                    'X-RequestDigest': requestDigest,
                    'content-type': 'application/json;odata=nometadata',
                    accept: 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then(() => {
            if (!args.options.publish) {
                return Promise.resolve();
            }
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/getfilebyid('${itemId}')/Publish('${encodeURIComponent(args.options.publishMessage || '').replace(/'/g, '%39')}')`,
                headers: {
                    'X-RequestDigest': requestDigest,
                    'content-type': 'application/json;odata=nometadata',
                    accept: 'application/json;odata=nometadata'
                },
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-n, --name <name>',
                description: 'Name of the page to create'
            },
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the page should be created'
            },
            {
                option: '-t, --title [title]',
                description: 'Title of the page to create. If not specified, will use the page name as its title'
            },
            {
                option: '-l, --layoutType [layoutType]',
                description: 'Layout of the page. Allowed values Article|Home. Default Article',
                autocomplete: ['Article', 'Home']
            },
            {
                option: '-p, --promoteAs [promoteAs]',
                description: 'Create the page for a specific purpose. Allowed values HomePage|NewsPage|Template',
                autocomplete: ['HomePage', 'NewsPage', 'Template']
            },
            {
                option: '--commentsEnabled',
                description: 'Set to enable comments on the page'
            },
            {
                option: '--publish',
                description: 'Set to publish the page'
            },
            {
                option: '--publishMessage [publishMessage]',
                description: 'Message to set when publishing the page'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.name) {
                return 'Required parameter name missing';
            }
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (args.options.layoutType &&
                args.options.layoutType !== 'Article' &&
                args.options.layoutType !== 'Home') {
                return `${args.options.layoutType} is not a valid option for layoutType. Allowed values Article|Home`;
            }
            if (args.options.promoteAs &&
                args.options.promoteAs !== 'HomePage' &&
                args.options.promoteAs !== 'NewsPage' &&
                args.options.promoteAs !== 'Template') {
                return `${args.options.promoteAs} is not a valid option for promoteAs. Allowed values HomePage|NewsPage|Template`;
            }
            if (args.options.promoteAs === 'HomePage' && args.options.layoutType !== 'Home') {
                return 'You can only promote home pages as site home page';
            }
            if (args.options.promoteAs === 'NewsPage' && args.options.layoutType === 'Home') {
                return 'You can only promote article pages as news article';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If you try to create a page with a name of a page that already exists, you
    will get a ${chalk.grey('The file exists')} error.

    If you choose to promote the page using the ${chalk.blue('promoteAs')} option
    or enable page comments, you will see the result only after publishing
    the page.

  Examples:

    Create new modern page. Use the Article layout
      ${this.name} --name new-page.aspx --webUrl https://contoso.sharepoint.com/sites/a-team

    Create new modern page and set its title
      ${this.name} --name new-page.aspx --title 'My page' --webUrl https://contoso.sharepoint.com/sites/a-team

    Create new modern page. Use the Home page layout and include the default set
    of web parts
      ${this.name} --name new-page.aspx --webUrl https://contoso.sharepoint.com/sites/a-team --layoutType Home

    Create new article page and promote it as a news article
      ${this.name} --name new-page.aspx --webUrl https://contoso.sharepoint.com/sites/a-team --promoteAs NewsPage

    Create new page and set it as the site's home page
      ${this.name} --name new-page.aspx --webUrl https://contoso.sharepoint.com/sites/a-team --layoutType Home --promoteAs HomePage

    Create new article page and promote it as a template
      ${this.name} --name page.aspx --webUrl https://contoso.sharepoint.com/sites/a-team --promoteAs Template

    Create new article page and enable comments on the page
      ${this.name} --name new-page.aspx --webUrl https://contoso.sharepoint.com/sites/a-team --commentsEnabled

    Create new article page and publish it
      ${this.name} --name new-page.aspx --webUrl https://contoso.sharepoint.com/sites/a-team --publish
`);
    }
}
module.exports = new SpoPageAddCommand();
//# sourceMappingURL=page-add.js.map