"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoTermSetListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.TERM_SET_LIST;
    }
    get description() {
        return 'Lists taxonomy term sets from the given term group';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.termGroupId = typeof args.options.termGroupId !== 'undefined';
        telemetryProps.termGroupName = typeof args.options.termGroupName !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let spoAdminUrl = '';
        this
            .getSpoAdminUrl(cmd, this.debug)
            .then((_spoAdminUrl) => {
            spoAdminUrl = _spoAdminUrl;
            return this.getRequestDigest(spoAdminUrl);
        })
            .then((res) => {
            if (this.verbose) {
                cmd.log(`Retrieving taxonomy term sets...`);
            }
            const query = args.options.termGroupId ? `<Method Id="62" ParentId="60" Name="GetById"><Parameters><Parameter Type="Guid">{${args.options.termGroupId}}</Parameter></Parameters></Method>` : `<Method Id="62" ParentId="60" Name="GetByName"><Parameters><Parameter Type="String">${Utils_1.default.escapeXml(args.options.termGroupName)}</Parameter></Parameters></Method>`;
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="55" ObjectPathId="54" /><ObjectIdentityQuery Id="56" ObjectPathId="54" /><ObjectPath Id="58" ObjectPathId="57" /><ObjectIdentityQuery Id="59" ObjectPathId="57" /><ObjectPath Id="61" ObjectPathId="60" /><ObjectPath Id="63" ObjectPathId="62" /><ObjectIdentityQuery Id="64" ObjectPathId="62" /><ObjectPath Id="66" ObjectPathId="65" /><Query Id="67" ObjectPathId="65"><Query SelectAllProperties="false"><Properties /></Query><ChildItemQuery SelectAllProperties="true"><Properties><Property Name="Name" ScalarProperty="true" /><Property Name="Id" ScalarProperty="true" /></Properties></ChildItemQuery></Query></Actions><ObjectPaths><StaticMethod Id="54" Name="GetTaxonomySession" TypeId="{981cbc68-9edc-4f8d-872f-71146fcbb84f}" /><Method Id="57" ParentId="54" Name="GetDefaultSiteCollectionTermStore" /><Property Id="60" ParentId="57" Name="Groups" />${query}<Property Id="65" ParentId="62" Name="TermSets" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            const result = json[json.length - 1];
            if (result._Child_Items_ && result._Child_Items_.length > 0) {
                if (args.options.output === 'json') {
                    cmd.log(result._Child_Items_.map(t => {
                        t.CreatedDate = new Date(Number(t.CreatedDate.replace('/Date(', '').replace(')/', ''))).toISOString();
                        t.Id = t.Id.replace('/Guid(', '').replace(')/', '');
                        t.LastModifiedDate = new Date(Number(t.LastModifiedDate.replace('/Date(', '').replace(')/', ''))).toISOString();
                        return t;
                    }));
                }
                else {
                    cmd.log(result._Child_Items_.map(t => {
                        return {
                            Id: t.Id.replace('/Guid(', '').replace(')/', ''),
                            Name: t.Name
                        };
                    }));
                }
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '--termGroupId [termGroupId]',
                description: 'ID of the term group from which to retrieve term sets. Specify termGroupName or termGroupId but not both'
            },
            {
                option: '--termGroupName [termGroupName]',
                description: 'Name of the term group from which to retrieve term sets. Specify termGroupName or termGroupId but not both'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.termGroupId && !args.options.termGroupName) {
                return 'Specify either termGroupId or termGroupName';
            }
            if (args.options.termGroupId && args.options.termGroupName) {
                return 'Specify either termGroupId or termGroupName but not both';
            }
            if (args.options.termGroupId) {
                if (!Utils_1.default.isValidGuid(args.options.termGroupId)) {
                    return `${args.options.termGroupId} is not a valid GUID`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.TERM_SET_LIST).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
    
  Examples:
  
    List taxonomy term sets from the term group with the given name
      ${commands_1.default.TERM_SET_LIST} --termGroupName PnPTermSets

    List taxonomy term sets from the term group with the given ID
      ${commands_1.default.TERM_SET_LIST} --termGroupId 0e8f395e-ff58-4d45-9ff7-e331ab728beb
`);
    }
}
module.exports = new SpoTermSetListCommand();
//# sourceMappingURL=term-set-list.js.map