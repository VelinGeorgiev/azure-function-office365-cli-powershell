"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoContentTypeFieldRemoveCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.CONTENTTYPE_FIELD_REMOVE}`;
    }
    get description() {
        return 'Removes a column from a site- or list content type';
    }
    types() {
        return {
            string: ['i', 'contentTypeId']
        };
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listTitle = (!(!args.options.listTitle)).toString();
        telemetryProps.updateChildContentTypes = (!(!args.options.updateChildContentTypes)).toString();
        telemetryProps.confirm = (!(!args.options.confirm)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let webId = '';
        let siteId = '';
        let listId = '';
        const removeFieldLink = () => {
            if (this.debug) {
                cmd.log(`Get SiteId required by ProcessQuery endpoint.`);
            }
            // GET SiteId
            const requestOptions = {
                url: `${args.options.webUrl}/_api/site?$select=Id`,
                headers: {
                    accept: 'application/json;odata=nometadata'
                },
                json: true
            };
            request_1.default
                .get(requestOptions)
                .then((res) => {
                siteId = res.Id;
                if (this.debug) {
                    cmd.log(`SiteId: ${siteId}`);
                    cmd.log(`Get WebId required by ProcessQuery endpoint.`);
                }
                // GET WebId
                const requestOptions = {
                    url: `${args.options.webUrl}/_api/web?$select=Id`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    json: true
                };
                return request_1.default.get(requestOptions);
            })
                .then((res) => {
                webId = res.Id;
                if (this.debug) {
                    cmd.log(`WebId: ${webId}`);
                }
                // If ListTitle is provided
                if (!args.options.listTitle) {
                    return Promise.resolve(undefined);
                }
                // Request for the ListId
                const requestOptions = {
                    url: `${args.options.webUrl}/_api/lists/GetByTitle('${encodeURIComponent(args.options.listTitle)}')?$select=Id`,
                    headers: {
                        accept: 'application/json;odata=nometadata'
                    },
                    json: true
                };
                return request_1.default.get(requestOptions);
            })
                .then((res) => {
                if (res) {
                    listId = res.Id;
                    if (this.debug) {
                        cmd.log(`ListId: ${listId}`);
                    }
                }
                return this.getRequestDigest(args.options.webUrl);
            })
                .then((res) => {
                const requestDigest = res.FormDigestValue;
                const updateChildContentTypes = args.options.listTitle ? false : args.options.updateChildContentTypes === true;
                if (this.debug) {
                    const additionalLog = args.options.listTitle ? `; ListTitle='${args.options.listTitle}'` : ` ; UpdateChildContentTypes='${updateChildContentTypes}`;
                    cmd.log(`Remove FieldLink from ContentType. FieldLinkId='${args.options.fieldLinkId}' ; ContentTypeId='${args.options.contentTypeId}' ${additionalLog}`);
                    cmd.log(`Execute ProcessQuery.`);
                    cmd.log('');
                }
                let requestBody = '';
                if (listId) {
                    requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName=".NET Library" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="18" ObjectPathId="17" /><ObjectPath Id="20" ObjectPathId="19" /><Method Name="DeleteObject" Id="21" ObjectPathId="19" /><Method Name="Update" Id="22" ObjectPathId="15"><Parameters><Parameter Type="Boolean">${updateChildContentTypes}</Parameter></Parameters></Method></Actions><ObjectPaths><Property Id="17" ParentId="15" Name="FieldLinks" /><Method Id="19" ParentId="17" Name="GetById"><Parameters><Parameter Type="Guid">{${Utils_1.default.escapeXml(args.options.fieldLinkId)}}</Parameter></Parameters></Method><Identity Id="15" Name="09eec89e-709b-0000-558c-c222dcaf9162|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${siteId}:web:${webId}:list:${listId}:contenttype:${Utils_1.default.escapeXml(args.options.contentTypeId)}" /></ObjectPaths></Request>`;
                }
                else {
                    requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName=".NET Library" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="77" ObjectPathId="76" /><ObjectPath Id="79" ObjectPathId="78" /><Method Name="DeleteObject" Id="80" ObjectPathId="78" /><Method Name="Update" Id="81" ObjectPathId="24"><Parameters><Parameter Type="Boolean">${updateChildContentTypes}</Parameter></Parameters></Method></Actions><ObjectPaths><Property Id="76" ParentId="24" Name="FieldLinks" /><Method Id="78" ParentId="76" Name="GetById"><Parameters><Parameter Type="Guid">{${Utils_1.default.escapeXml(args.options.fieldLinkId)}}</Parameter></Parameters></Method><Identity Id="24" Name="6b3ec69e-00a7-0000-55a3-61f8d779d2b3|740c6a0b-85e2-48a0-a494-e0f1759d4aa7:site:${siteId}:web:${webId}:contenttype:${Utils_1.default.escapeXml(args.options.contentTypeId)}" /></ObjectPaths></Request>`;
                }
                const requestOptions = {
                    url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': requestDigest
                    },
                    body: requestBody
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                    return;
                }
                if (this.debug) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
                cb();
            }, (error) => {
                this.handleRejectedODataJsonPromise(error, cmd, cb);
            });
        };
        if (args.options.confirm) {
            removeFieldLink();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to remove the column ${args.options.fieldLinkId} from content type ${args.options.contentTypeId}?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeFieldLink();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'Absolute URL of the site where the content type is located'
            },
            {
                option: '-l, --listTitle [listTitle]',
                description: 'Title of the list where the content type is located (if it is a list content type)'
            },
            {
                option: '-i, --contentTypeId <contentTypeId>',
                description: 'The ID of the content type to remove the column from'
            },
            {
                option: '-f, --fieldLinkId <fieldLinkId>',
                description: 'The ID of the column to remove'
            },
            {
                option: '-c, --updateChildContentTypes',
                description: 'Update child content types'
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming removal of a column from content type'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.contentTypeId) {
                return 'Required parameter contentTypeId missing';
            }
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            if (!args.options.fieldLinkId) {
                return 'Required parameter fieldLinkId missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.fieldLinkId)) {
                return `${args.options.fieldLinkId} is not a valid GUID`;
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Remove column with ID ${chalk.grey('2c1ba4c4-cd9b-4417-832f-92a34bc34b2a')} from
    content type with ID ${chalk.grey('0x0100CA0FA0F5DAEF784494B9C6020C3020A6')}
    from web with URL ${chalk.grey('https://contoso.sharepoint.com')}
      ${this.name} --contentTypeId "0x0100CA0FA0F5DAEF784494B9C6020C3020A6" --fieldLinkId "880d2f46-fccb-43ca-9def-f88e722cef80" --webUrl https://contoso.sharepoint.com --confirm

    Remove column with ID ${chalk.grey('2c1ba4c4-cd9b-4417-832f-92a34bc34b2a')} from
    content type with ID ${chalk.grey('0x0100CA0FA0F5DAEF784494B9C6020C3020A6')}
    from web with URL ${chalk.grey('https://contoso.sharepoint.com')} updating child content types
      ${this.name} --contentTypeId "0x0100CA0FA0F5DAEF784494B9C6020C3020A6" --fieldLinkId "880d2f46-fccb-43ca-9def-f88e722cef80" --webUrl https://contoso.sharepoint.com --updateChildContentTypes 

    Remove fieldLink with ID ${chalk.grey('2c1ba4c4-cd9b-4417-832f-92a34bc34b2a')} from list
    content type with ID ${chalk.grey('0x0100CA0FA0F5DAEF784494B9C6020C3020A6')}
    from web with URL ${chalk.grey('https://contoso.sharepoint.com')} 
      ${this.name} --contentTypeId "0x0100CA0FA0F5DAEF784494B9C6020C3020A60062F089A38C867747942DB2C3FC50FF6A" --fieldLinkId "880d2f46-fccb-43ca-9def-f88e722cef80" --webUrl https://contoso.sharepoint.com --listTitle "Documents"
      `);
    }
}
module.exports = new SpoContentTypeFieldRemoveCommand();
//# sourceMappingURL=contenttype-field-remove.js.map