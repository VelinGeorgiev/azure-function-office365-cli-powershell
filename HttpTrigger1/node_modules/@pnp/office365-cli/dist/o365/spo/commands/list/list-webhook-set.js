"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoListWebhookSetCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.LIST_WEBHOOK_SET;
    }
    get description() {
        return 'Updates the specified webhook';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = (!(!args.options.listId)).toString();
        telemetryProps.listTitle = (!(!args.options.listTitle)).toString();
        telemetryProps.notificationUrl = (!(!args.options.notificationUrl)).toString();
        telemetryProps.expirationDateTime = (!(!args.options.expirationDateTime)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Updating webhook ${args.options.id} belonging to list ${args.options.listId ? encodeURIComponent(args.options.listId) : encodeURIComponent(args.options.listTitle)} located at site ${args.options.webUrl}...`);
        }
        let requestUrl = '';
        if (args.options.listId) {
            requestUrl = `${args.options.webUrl}/_api/web/lists(guid'${encodeURIComponent(args.options.listId)}')/Subscriptions('${encodeURIComponent(args.options.id)}')`;
        }
        else {
            requestUrl = `${args.options.webUrl}/_api/web/lists/GetByTitle('${encodeURIComponent(args.options.listTitle)}')/Subscriptions('${encodeURIComponent(args.options.id)}')`;
        }
        const requestBody = {};
        if (args.options.notificationUrl) {
            requestBody.notificationUrl = args.options.notificationUrl;
        }
        if (args.options.expirationDateTime) {
            requestBody.expirationDateTime = args.options.expirationDateTime;
        }
        const requestOptions = {
            url: requestUrl,
            method: 'PATCH',
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            body: requestBody,
            json: true
        };
        request_1.default
            .patch(requestOptions)
            .then(() => {
            // REST patch call doesn't return anything
            cb();
        }, (err) => {
            this.handleRejectedODataJsonPromise(err, cmd, cb);
        });
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the list which contains the webhook is located'
            },
            {
                option: '-l, --listId [listId]',
                description: 'ID of the list which contains the webhook which should be updated. Specify either listId or listTitle but not both'
            },
            {
                option: '-t, --listTitle [listTitle]',
                description: 'Title of the list which contains the webhook which should be updated. Specify either listId or listTitle but not both'
            },
            {
                option: '-i, --id <id>',
                description: 'ID of the webhook to update'
            },
            {
                option: '-n, --notificationUrl [notificationUrl]',
                description: 'The new notification url'
            },
            {
                option: '-e, --expirationDateTime [expirationDateTime]',
                description: 'The new expiration date'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            if (!args.options.id) {
                return 'Required parameter id missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.id)) {
                return `${args.options.id} is not a valid GUID`;
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (args.options.listId) {
                if (!Utils_1.default.isValidGuid(args.options.listId)) {
                    return `${args.options.listId} is not a valid GUID`;
                }
            }
            if (args.options.listId && args.options.listTitle) {
                return 'Specify listId or listTitle, but not both';
            }
            if (!args.options.listId && !args.options.listTitle) {
                return 'Specify listId or listTitle, one is required';
            }
            if (!args.options.notificationUrl && !args.options.expirationDateTime) {
                return 'Specify notificationUrl, expirationDateTime or both, at least one is required';
            }
            const parsedDateTime = Date.parse(args.options.expirationDateTime);
            const chalk = vorpal.chalk;
            if (args.options.expirationDateTime && !(!parsedDateTime) !== true) {
                if (args.options.output === 'json') {
                    return `${args.options.expirationDateTime} is not a valid date format. Provide the date in one of the following formats: YYYY-MM-DD, YYYY-MM-DDThh:mm, YYYY-MM-DDThh:mmZ, YYYY-MM-DDThh:mm±hh:mm`;
                }
                else {
                    return `${args.options.expirationDateTime} is not a valid date format. Provide the date in one of the following formats:
  ${chalk.grey('YYYY-MM-DD')}
  ${chalk.grey('YYYY-MM-DDThh:mm')}
  ${chalk.grey('YYYY-MM-DDThh:mmZ')}
  ${chalk.grey('YYYY-MM-DDThh:mm±hh:mm')}`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:
  
    If the specified ${chalk.grey('id')} doesn't refer to an existing webhook,
    you will get a ${chalk.grey('404 - "404 FILE NOT FOUND"')} error.
        
  Examples:
  
    Update the notification url of a webhook with ID
    ${chalk.grey('cc27a922-8224-4296-90a5-ebbc54da2e81')} which belongs to a list with ID
    ${chalk.grey('0cd891ef-afce-4e55-b836-fce03286cccf')} located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/ninja')} to
    ${chalk.grey('https://contoso-functions.azurewebsites.net/webhook')}
      ${commands_1.default.LIST_WEBHOOK_SET} --webUrl https://contoso.sharepoint.com/sites/ninja --listId 0cd891ef-afce-4e55-b836-fce03286cccf --id cc27a922-8224-4296-90a5-ebbc54da2e81 --notificationUrl https://contoso-functions.azurewebsites.net/webhook

    Update the expiration date of a webhook with ID
    ${chalk.grey('cc27a922-8224-4296-90a5-ebbc54da2e81')} which belongs to a list with title
    ${chalk.grey('Documents')} located in site 
    ${chalk.grey('https://contoso.sharepoint.com/sites/ninja')} to
    ${chalk.grey('October 9th, 2018 at 6:15 PM')}
      ${commands_1.default.LIST_WEBHOOK_SET} --webUrl https://contoso.sharepoint.com/sites/ninja --listTitle Documents --id cc27a922-8224-4296-90a5-ebbc54da2e81 --expirationDateTime 2018-10-09T18:15

    From the webhook with ID ${chalk.grey('cc27a922-8224-4296-90a5-ebbc54da2e81')} which
    belongs to a list with title ${chalk.grey('Documents')} located in site 
    ${chalk.grey('https://contoso.sharepoint.com/sites/ninja')} update the notification url to 
    to ${chalk.grey('https://contoso-functions.azurewebsites.net/webhook')} and the expiration
    date to ${chalk.grey('March 2nd, 2019')}
      ${commands_1.default.LIST_WEBHOOK_SET} --webUrl https://contoso.sharepoint.com/sites/ninja --listTitle Documents --id cc27a922-8224-4296-90a5-ebbc54da2e81 --notificationUrl https://contoso-functions.azurewebsites.net/webhook --expirationDateTime 2019-03-02
      `);
    }
}
module.exports = new SpoListWebhookSetCommand();
//# sourceMappingURL=list-webhook-set.js.map