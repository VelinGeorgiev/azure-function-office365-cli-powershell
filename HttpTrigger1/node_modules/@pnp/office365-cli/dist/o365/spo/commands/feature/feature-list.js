"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoFeatureListCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.FEATURE_LIST}`;
    }
    get description() {
        return 'Lists Features activated in the specified site or site collection';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.scope = args.options.scope || 'Web';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const scope = (args.options.scope) ? args.options.scope : 'Web';
        const requestOptions = {
            url: `${args.options.url}/_api/${scope}/Features?$select=DisplayName,DefinitionId`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((features) => {
            if (features.value && features.value.length > 0) {
                cmd.log(features.value);
            }
            else {
                if (this.verbose) {
                    cmd.log('No activated Features found');
                }
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --url <url>',
                description: 'URL of the site (collection) to retrieve the activated Features from'
            },
            {
                option: '-s, --scope [scope]',
                description: 'Scope of the Features to retrieve. Allowed values Site|Web. Default Web',
                autocomplete: ['Site', 'Web']
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.url) {
                return 'Required parameter url missing';
            }
            if (args.options.scope) {
                if (args.options.scope !== 'Site' &&
                    args.options.scope !== 'Web') {
                    return `${args.options.scope} is not a valid Feature scope. Allowed values are Site|Web`;
                }
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.url);
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(commands_1.default.FEATURE_LIST).helpInformation());
        log(`  Examples:
  
    Return details about Features activated in the specified site collection
      ${commands_1.default.FEATURE_LIST} --url https://contoso.sharepoint.com/sites/test --scope Site

    Return details about Features activated in the specified site
      ${commands_1.default.FEATURE_LIST} --url https://contoso.sharepoint.com/sites/test --scope Web
      `);
    }
}
module.exports = new SpoFeatureListCommand();
//# sourceMappingURL=feature-list.js.map