"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const config_1 = require("../../../../config");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoTenantSettingsListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.TENANT_SETTINGS_LIST;
    }
    get description() {
        return 'Lists the global tenant settings';
    }
    commandAction(cmd, args, cb) {
        let spoAdminUrl = '';
        this
            .getSpoAdminUrl(cmd, this.debug)
            .then((_spoAdminUrl) => {
            spoAdminUrl = _spoAdminUrl;
            return this.getRequestDigest(spoAdminUrl);
        })
            .then((res) => {
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="4" ObjectPathId="3" /><Query Id="5" ObjectPathId="3"><Query SelectAllProperties="true"><Properties><Property Name="HideDefaultThemes" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Constructor Id="3" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            let result = json[4];
            delete result['_ObjectIdentity_'];
            delete result['_ObjectType_'];
            // map integers to their enums
            const sharingLinkType = ['None', 'Direct', 'Internal', 'AnonymousAccess'];
            const sharingCapabilities = ['Disabled', 'ExternalUserSharingOnly', 'ExternalUserAndGuestSharing', 'ExistingExternalUserSharingOnly'];
            const sharingDomainRestrictionModes = ['None', 'AllowList', 'BlockList'];
            const sharingState = ['Unspecified', 'On', 'Off'];
            const anonymousLinkType = ['None', 'View', 'Edit'];
            const sharingPermissionType = ['None', 'View', 'Edit'];
            const sPOConditionalAccessPolicyType = ['AllowFullAccess', 'AllowLimitedAccess', 'BlockAccess'];
            const specialCharactersState = ['NoPreference', 'Allowed', 'Disallowed'];
            const sPOLimitedAccessFileType = ['OfficeOnlineFilesOnly', 'WebPreviewableFiles', 'OtherFiles'];
            result['SharingCapability'] = sharingCapabilities[result['SharingCapability']];
            result['SharingDomainRestrictionMode'] = sharingDomainRestrictionModes[result['SharingDomainRestrictionMode']];
            result['ODBMembersCanShare'] = sharingState[result['ODBMembersCanShare']];
            result['ODBAccessRequests'] = sharingState[result['ODBAccessRequests']];
            result['DefaultSharingLinkType'] = sharingLinkType[result['DefaultSharingLinkType']];
            result['FileAnonymousLinkType'] = anonymousLinkType[result['FileAnonymousLinkType']];
            result['FolderAnonymousLinkType'] = anonymousLinkType[result['FolderAnonymousLinkType']];
            result['DefaultLinkPermission'] = sharingPermissionType[result['DefaultLinkPermission']];
            result['ConditionalAccessPolicy'] = sPOConditionalAccessPolicyType[result['ConditionalAccessPolicy']];
            result['SpecialCharactersStateInFileFolderNames'] = specialCharactersState[result['SpecialCharactersStateInFileFolderNames']];
            result['LimitedAccessFileType'] = sPOLimitedAccessFileType[result['LimitedAccessFileType']];
            cmd.log(result);
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
    
  Examples:
  
    Lists the settings of the tenant
      ${commands_1.default.TENANT_SETTINGS_LIST}
  `);
    }
}
module.exports = new SpoTenantSettingsListCommand();
//# sourceMappingURL=tenant-settings-list.js.map