"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoServicePrincipalPermissionRequestApproveCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.SERVICEPRINCIPAL_PERMISSIONREQUEST_APPROVE}`;
    }
    get description() {
        return 'Approves the specified permission request';
    }
    alias() {
        return [commands_1.default.SP_PERMISSIONREQUEST_APPROVE];
    }
    commandAction(cmd, args, cb) {
        let spoAdminUrl = '';
        this
            .getSpoAdminUrl(cmd, this.debug)
            .then((_spoAdminUrl) => {
            spoAdminUrl = _spoAdminUrl;
            if (this.verbose) {
                cmd.log(`Retrieving request digest...`);
            }
            return this.getRequestDigest(spoAdminUrl);
        })
            .then((res) => {
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="16" ObjectPathId="15" /><ObjectPath Id="18" ObjectPathId="17" /><ObjectPath Id="20" ObjectPathId="19" /><ObjectPath Id="22" ObjectPathId="21" /><Query Id="23" ObjectPathId="21"><Query SelectAllProperties="true"><Properties /></Query></Query></Actions><ObjectPaths><Constructor Id="15" TypeId="{104e8f06-1e00-4675-99c6-1b9b504ed8d8}" /><Property Id="17" ParentId="15" Name="PermissionRequests" /><Method Id="19" ParentId="17" Name="GetById"><Parameters><Parameter Type="Guid">{${Utils_1.default.escapeXml(args.options.requestId)}}</Parameter></Parameters></Method><Method Id="21" ParentId="19" Name="Approve" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            else {
                const output = json[json.length - 1];
                delete output._ObjectType_;
                cmd.log(output);
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    options() {
        const options = [{
                option: '-i, --requestId <requestId>',
                description: 'ID of the permission request to approve'
            }];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.requestId) {
                return 'Required parameter requestId missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.requestId)) {
                return `${args.options.requestId} is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.SERVICEPRINCIPAL_PERMISSIONREQUEST_APPROVE).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
        
  Remarks:

    The permission request you want to approve is denoted using its ${chalk.grey('ID')}. You can
    retrieve it using the ${chalk.grey(`${commands_1.default.SERVICEPRINCIPAL_PERMISSIONREQUEST_LIST}`)} command.

  Examples:
  
    Approve permission request with id ${chalk.grey('4dc4c043-25ee-40f2-81d3-b3bf63da7538')}
      ${commands_1.default.SERVICEPRINCIPAL_PERMISSIONREQUEST_APPROVE} --requestId 4dc4c043-25ee-40f2-81d3-b3bf63da7538
`);
    }
}
module.exports = new SpoServicePrincipalPermissionRequestApproveCommand();
//# sourceMappingURL=serviceprincipal-permissionrequest-approve.js.map