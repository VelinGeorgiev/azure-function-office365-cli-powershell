"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoListSiteScriptGetCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.LIST_SITESCRIPT_GET;
    }
    get description() {
        return 'Extracts a site script from a SharePoint list';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = (!(!args.options.listId)).toString();
        telemetryProps.listTitle = (!(!args.options.listTitle)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            const list = args.options.listId ? encodeURIComponent(args.options.listId) : encodeURIComponent(args.options.listTitle);
            cmd.log(`Extracting Site Script from list ${list} in site at ${args.options.webUrl}...`);
        }
        let requestUrl = '';
        if (args.options.listId) {
            if (this.debug) {
                cmd.log(`Retrieving List Url from Id '${args.options.listId}'...`);
            }
            requestUrl = `${args.options.webUrl}/_api/web/lists(guid'${encodeURIComponent(args.options.listId)}')?$expand=RootFolder`;
        }
        else {
            if (this.debug) {
                cmd.log(`Retrieving List Url from Title '${args.options.listTitle}'...`);
            }
            requestUrl = `${args.options.webUrl}/_api/web/lists/GetByTitle('${encodeURIComponent(args.options.listTitle)}')?$expand=RootFolder`;
        }
        const requestOptions = {
            url: requestUrl,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((listInstance) => {
            const listAbsoluteUrl = Utils_1.default.getAbsoluteUrl(args.options.webUrl, listInstance.RootFolder.ServerRelativeUrl);
            const requestUrl = `${args.options.webUrl}/_api/Microsoft_SharePoint_Utilities_WebTemplateExtensions_SiteScriptUtility_GetSiteScriptFromList`;
            const requestOptions = {
                url: requestUrl,
                headers: {
                    'accept': 'application/json;odata=nometadata',
                    'content-type': 'application/json;odata=nometadata'
                },
                json: true,
                body: {
                    listUrl: listAbsoluteUrl
                }
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const siteScript = res.value;
            if (!siteScript) {
                cb(new Command_1.CommandError(`An error has occurred, the site script could not be extracted from list '${args.options.listId || args.options.listTitle}'`));
                return;
            }
            cmd.log(siteScript);
            cb();
        }, (err) => {
            this.handleRejectedODataJsonPromise(err, cmd, cb);
        });
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the list to extract the site script from is located'
            },
            {
                option: '-l, --listId [listId]',
                description: 'ID of the list to extract the site script from. Specify either listId or listTitle but not both'
            },
            {
                option: '-t, --listTitle [listTitle]',
                description: 'Title of the list to extract the site script from. Specify either listId or listTitle but not both'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (args.options.listId) {
                if (!Utils_1.default.isValidGuid(args.options.listId)) {
                    return `${args.options.listId} is not a valid GUID`;
                }
            }
            if (args.options.listId && args.options.listTitle) {
                return 'Specify listId or listTitle, but not both';
            }
            if (!args.options.listId && !args.options.listTitle) {
                return 'Specify listId or listTitle, one is required';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Extract a site script from an existing SharePoint list with title
    ${chalk.grey('ContosoList')} located in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_SITESCRIPT_GET} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle ContosoList

    Extract a site script from an existing SharePoint list with id
    ${chalk.grey('cc27a922-8224-4296-90a5-ebbc54da2e85')} located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_SITESCRIPT_GET} --webUrl https://contoso.sharepoint.com/sites/project-x --listId cc27a922-8224-4296-90a5-ebbc54da2e85

      `);
    }
}
module.exports = new SpoListSiteScriptGetCommand();
//# sourceMappingURL=list-sitescript-get.js.map