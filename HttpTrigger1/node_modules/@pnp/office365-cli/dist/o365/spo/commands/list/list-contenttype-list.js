"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoListContentTypeListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.LIST_CONTENTTYPE_LIST;
    }
    get description() {
        return 'Lists content types configured on the list';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = typeof args.options.listId !== 'undefined';
        telemetryProps.listTitle = typeof args.options.listTitle !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            const list = args.options.listId ? encodeURIComponent(args.options.listId) : encodeURIComponent(args.options.listTitle);
            cmd.log(`Retrieving content types information for list ${list} in site at ${args.options.webUrl}...`);
        }
        let requestUrl = '';
        if (args.options.listId) {
            requestUrl = `${args.options.webUrl}/_api/web/lists(guid'${encodeURIComponent(args.options.listId)}')/ContentTypes`;
        }
        else {
            requestUrl = `${args.options.webUrl}/_api/web/lists/GetByTitle('${encodeURIComponent(args.options.listTitle)}')/ContentTypes`;
        }
        const requestOptions = {
            url: requestUrl,
            method: 'GET',
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            if (args.options.output === 'json') {
                cmd.log(res.value);
            }
            else {
                cmd.log(res.value.map((ct) => {
                    return {
                        StringId: ct.StringId,
                        Name: ct.Name,
                        Hidden: ct.Hidden,
                        ReadOnly: ct.ReadOnly,
                        Sealed: ct.Sealed
                    };
                }));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the list is located'
            },
            {
                option: '-l, --listId [listId]',
                description: 'ID of the list for which to list configured content types. Specify listId or listTitle but not both'
            },
            {
                option: '-t, --listTitle [listTitle]',
                description: 'Title of the list for which to list configured content types. Specify listId or listTitle but not both'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (args.options.listId) {
                if (!Utils_1.default.isValidGuid(args.options.listId)) {
                    return `${args.options.listId} is not a valid GUID`;
                }
            }
            if (args.options.listId && args.options.listTitle) {
                return 'Specify listId or listTitle, but not both';
            }
            if (!args.options.listId && !args.options.listTitle) {
                return 'Specify listId or listTitle, one is required';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    List all content types configured on the list with ID
    ${chalk.grey('0cd891ef-afce-4e55-b836-fce03286cccf')} located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_CONTENTTYPE_LIST} --webUrl https://contoso.sharepoint.com/sites/project-x --listId 0cd891ef-afce-4e55-b836-fce03286cccf

    List all content types configured on the list with title ${chalk.grey('Documents')} located
    in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_CONTENTTYPE_LIST} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle Documents
      `);
    }
}
module.exports = new SpoListContentTypeListCommand();
//# sourceMappingURL=list-contenttype-list.js.map