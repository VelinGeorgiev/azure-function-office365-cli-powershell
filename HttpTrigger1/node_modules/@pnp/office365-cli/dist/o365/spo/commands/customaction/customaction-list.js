"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoCustomActionListCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.CUSTOMACTION_LIST}`;
    }
    get description() {
        return 'Lists all user custom actions at the given scope';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.scope = args.options.scope || 'All';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const scope = args.options.scope ? args.options.scope : 'All';
        (() => {
            if (this.debug) {
                cmd.log(`Attempt to get custom actions list with scope: ${scope}`);
                cmd.log('');
            }
            if (scope && scope.toLowerCase() !== "all") {
                return this.getCustomActions(args.options);
            }
            return this.searchAllScopes(args.options);
        })()
            .then((customActions) => {
            if (customActions.length === 0) {
                if (this.verbose) {
                    cmd.log(`Custom actions not found`);
                }
            }
            else {
                if (args.options.output === 'json') {
                    cmd.log(customActions);
                }
                else {
                    cmd.log(customActions.map(a => {
                        return {
                            Name: a.Name,
                            Location: a.Location,
                            Scope: this.humanizeScope(a.Scope),
                            Id: a.Id
                        };
                    }));
                }
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    getCustomActions(options) {
        const requestOptions = {
            url: `${options.url}/_api/${options.scope}/UserCustomActions`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        return new Promise((resolve, reject) => {
            request_1.default
                .get(requestOptions)
                .then((response) => {
                resolve(response.value);
            })
                .catch((error) => {
                reject(error);
            });
        });
    }
    /**
     * Two REST GET requests with `web` and `site` scope are sent.
     * The results are combined in one array.
     */
    searchAllScopes(options) {
        return new Promise((resolve, reject) => {
            options.scope = "Web";
            let webCustomActions = [];
            this
                .getCustomActions(options)
                .then((customActions) => {
                webCustomActions = customActions;
                options.scope = "Site";
                return this.getCustomActions(options);
            })
                .then((siteCustomActions) => {
                resolve(siteCustomActions.concat(webCustomActions));
            }, (err) => {
                reject(err);
            });
        });
    }
    humanizeScope(scope) {
        switch (scope) {
            case 2:
                return "Site";
            case 3:
                return "Web";
        }
        return `${scope}`;
    }
    options() {
        const options = [
            {
                option: '-u, --url <url>',
                description: 'Url of the site (collection) to retrieve the custom action from'
            },
            {
                option: '-s, --scope [scope]',
                description: 'Scope of the custom action. Allowed values Site|Web|All. Default All',
                autocomplete: ['Site', 'Web', 'All']
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (SpoCommand_1.default.isValidSharePointUrl(args.options.url) !== true) {
                return 'Missing required option url';
            }
            if (args.options.scope) {
                if (args.options.scope !== 'Site' &&
                    args.options.scope !== 'Web' &&
                    args.options.scope !== 'All') {
                    return `${args.options.scope} is not a valid custom action scope. Allowed values are Site|Web|All`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.CUSTOMACTION_LIST).helpInformation());
        log(`  Remarks:

    When using the text output type (default), the command lists only the values
    of the ${chalk.grey('Name')}, ${chalk.grey('Location')}, ${chalk.grey('Scope')} and ${chalk.grey('Id')} properties of the custom action.
    When setting the output type to JSON, all available properties are included
    in the command output.

  Examples:
  
    Return details about all user custom actions located
    in site or site collection ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_LIST} --url https://contoso.sharepoint.com/sites/test

    Return details about all user custom actions located
    in site or site collection ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_LIST} --url https://contoso.sharepoint.com/sites/test

    Return details about all user custom actions located 
    in site collection ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_LIST} --url https://contoso.sharepoint.com/sites/test --scope Site

    Return details about all user custom actions located 
    in site ${chalk.grey('https://contoso.sharepoint.com/sites/test')}
      ${commands_1.default.CUSTOMACTION_LIST} --url https://contoso.sharepoint.com/sites/test --scope Web

  More information:

    UserCustomAction REST API resources:
      https://msdn.microsoft.com/en-us/library/office/dn531432.aspx#bk_UserCustomAction
      `);
    }
}
module.exports = new SpoCustomActionListCommand();
//# sourceMappingURL=customaction-list.js.map