"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoSiteClassicRemoveCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.SITE_CLASSIC_REMOVE;
    }
    get description() {
        return 'Removes the specified site';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.skipRecycleBin = (!(!args.options.skipRecycleBin)).toString();
        telemetryProps.fromRecycleBin = (!(!args.options.fromRecycleBin)).toString();
        telemetryProps.wait = args.options.wait;
        telemetryProps.confirm = (!(!args.options.confirm)).toString();
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const removeSite = () => {
            this.dots = '';
            this
                .getSpoAdminUrl(cmd, this.debug)
                .then((_spoAdminUrl) => {
                this.spoAdminUrl = _spoAdminUrl;
                return this.ensureFormDigest(this.spoAdminUrl, cmd, this.context, this.debug);
            })
                .then((res) => {
                this.context = res;
                if (args.options.fromRecycleBin) {
                    if (this.verbose) {
                        cmd.log(`Deleting site collection from recycle bin ${args.options.url}...`);
                    }
                    return this.deleteSiteFromTheRecycleBin(args.options.url, args.options.wait, cmd);
                }
                else {
                    if (this.verbose) {
                        cmd.log(`Deleting site collection ${args.options.url}...`);
                    }
                    return this.deleteSite(args.options.url, args.options.wait, cmd);
                }
            })
                .then(() => {
                if (args.options.skipRecycleBin) {
                    if (this.verbose) {
                        cmd.log(`Also deleting site collection from recycle bin ${args.options.url}...`);
                    }
                    return this.deleteSiteFromTheRecycleBin(args.options.url, args.options.wait, cmd);
                }
                else {
                    return Promise.resolve();
                }
            })
                .then(() => {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
                cb();
            }, (err) => this.handleRejectedPromise(err, cmd, cb));
        };
        if (args.options.confirm) {
            removeSite();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to remove the site ${args.options.url}?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeSite();
                }
            });
        }
    }
    cancel() {
        return () => {
            if (this.timeout) {
                clearTimeout(this.timeout);
            }
        };
    }
    deleteSite(url, wait, cmd) {
        return new Promise((resolve, reject) => {
            this
                .ensureFormDigest(this.spoAdminUrl, cmd, this.context, this.debug)
                .then((res) => {
                this.context = res;
                if (this.verbose) {
                    cmd.log(`Deleting site ${url} ...`);
                }
                const requestOptions = {
                    url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': this.context.FormDigestValue
                    },
                    body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="55" ObjectPathId="54"/><ObjectPath Id="57" ObjectPathId="56"/><Query Id="58" ObjectPathId="54"><Query SelectAllProperties="true"><Properties/></Query></Query><Query Id="59" ObjectPathId="56"><Query SelectAllProperties="false"><Properties><Property Name="IsComplete" ScalarProperty="true"/><Property Name="PollingInterval" ScalarProperty="true"/></Properties></Query></Query></Actions><ObjectPaths><Constructor Id="54" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}"/><Method Id="56" ParentId="54" Name="RemoveSite"><Parameters><Parameter Type="String">${Utils_1.default.escapeXml(url)}</Parameter></Parameters></Method></ObjectPaths></Request>`
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    reject(response.ErrorInfo.ErrorMessage);
                }
                else {
                    const operation = json[json.length - 1];
                    const isComplete = operation.IsComplete;
                    if (!wait || isComplete) {
                        resolve();
                        return;
                    }
                    setTimeout(() => {
                        this.waitUntilFinished(JSON.stringify(operation._ObjectIdentity_), this.spoAdminUrl, resolve, reject, cmd, this.context, this.dots, this.timeout);
                    }, operation.PollingInterval);
                }
            });
        });
    }
    deleteSiteFromTheRecycleBin(url, wait, cmd) {
        return new Promise((resolve, reject) => {
            this
                .ensureFormDigest(this.spoAdminUrl, cmd, this.context, this.debug)
                .then((res) => {
                this.context = res;
                if (this.verbose) {
                    cmd.log(`Deleting site ${url} from the recycle bin...`);
                }
                const requestOptions = {
                    url: `${this.spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': this.context.FormDigestValue
                    },
                    body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="185" ObjectPathId="184" /><Query Id="186" ObjectPathId="184"><Query SelectAllProperties="false"><Properties><Property Name="IsComplete" ScalarProperty="true" /><Property Name="PollingInterval" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Method Id="184" ParentId="175" Name="RemoveDeletedSite"><Parameters><Parameter Type="String">${Utils_1.default.escapeXml(url)}</Parameter></Parameters></Method><Constructor Id="175" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /></ObjectPaths></Request>`
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    reject(response.ErrorInfo.ErrorMessage);
                }
                else {
                    const operation = json[json.length - 1];
                    const isComplete = operation.IsComplete;
                    if (!wait || isComplete) {
                        resolve();
                        return;
                    }
                    setTimeout(() => {
                        this.waitUntilFinished(JSON.stringify(operation._ObjectIdentity_), this.spoAdminUrl, resolve, reject, cmd, this.context, this.dots, this.timeout);
                    }, operation.PollingInterval);
                }
            });
        });
    }
    options() {
        const options = [
            {
                option: '-u, --url <url>',
                description: 'URL of the site to remove'
            },
            {
                option: '--skipRecycleBin',
                description: 'Set to directly remove the site without moving it to the Recycle Bin'
            },
            {
                option: '--fromRecycleBin',
                description: 'Set to remove the site from the Recycle Bin'
            },
            {
                option: '--wait',
                description: 'Wait for the site to be removed before completing the command'
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming removing the site'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.url) {
                return 'Required parameter url missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.url);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.

  Remarks:

    Deleting and creating classic site collections is by default asynchronous
    and depending on the current state of Office 365, might take up to few
    minutes. If you're building a script with steps that require the site to be
    fully deleted, you should use the ${chalk.blue('--wait')} flag. When using this flag,
    the ${chalk.blue(this.getCommandName())} command will keep running until it received
    confirmation from Office 365 that the site has been fully deleted.

  Examples:

    Remove the specified site and place it in the Recycle Bin
      ${commands_1.default.SITE_CLASSIC_REMOVE} --url https://contoso.sharepoint.com/sites/demosite 

    Remove the site without moving it to the Recycle Bin
      ${commands_1.default.SITE_CLASSIC_REMOVE} --url https://contoso.sharepoint.com/sites/demosite --skipRecycleBin

    Remove the previously deleted site from the Recycle Bin
      ${commands_1.default.SITE_CLASSIC_REMOVE} --url https://contoso.sharepoint.com/sites/demosite --fromRecycleBin

    Remove the site without moving it to the Recycle Bin and wait for completion 
      ${commands_1.default.SITE_CLASSIC_REMOVE} --url https://contoso.sharepoint.com/sites/demosite --wait --skipRecycleBin
`);
    }
}
module.exports = new SpoSiteClassicRemoveCommand();
//# sourceMappingURL=site-classic-remove.js.map