"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoFieldAddCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.FIELD_ADD}`;
    }
    get description() {
        return 'Adds a new list or site column using the CAML field definition';
    }
    commandAction(cmd, args, cb) {
        this
            .getRequestDigest(args.options.webUrl)
            .then((res) => {
            const requestOptions = {
                url: `${args.options.webUrl}/_api/web/${(args.options.listTitle ? `lists/getByTitle('${encodeURIComponent(args.options.listTitle)}')/` : '')}fields/CreateFieldAsXml`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue,
                    accept: 'application/json;odata=nometadata'
                },
                body: {
                    parameters: {
                        SchemaXml: args.options.xml,
                        Options: this.getOptions(args.options.options)
                    }
                },
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            cmd.log(res);
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    getOptions(options) {
        let optionsValue = 0;
        if (!options) {
            return optionsValue;
        }
        options.split(',').forEach(o => {
            o = o.trim();
            switch (o) {
                case 'DefaultValue':
                    optionsValue += 0;
                    break;
                case 'AddToDefaultContentType':
                    optionsValue += 1;
                    break;
                case 'AddToNoContentType':
                    optionsValue += 2;
                    break;
                case 'AddToAllContentTypes':
                    optionsValue += 4;
                    break;
                case 'AddFieldInternalNameHint':
                    optionsValue += 8;
                    break;
                case 'AddFieldToDefaultView':
                    optionsValue += 16;
                    break;
                case 'AddFieldCheckDisplayName':
                    optionsValue += 32;
                    break;
            }
        });
        return optionsValue;
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'Absolute URL of the site where the field should be created'
            },
            {
                option: '-l, --listTitle [listTitle]',
                description: 'Title of the list where the field should be created (if it should be created as a list column)'
            },
            {
                option: '-x, --xml <xml>',
                description: 'CAML field definition'
            },
            {
                option: '--options [options]',
                description: 'The options to use to add to the field. Allowed values: DefaultValue|AddToDefaultContentType|AddToNoContentType|AddToAllContentTypes|AddFieldInternalNameHint|AddFieldToDefaultView|AddFieldCheckDisplayName'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter url missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.xml) {
                return 'Required parameter xml missing';
            }
            if (args.options.options) {
                let optionsError = true;
                const options = ['DefaultValue', 'AddToDefaultContentType', 'AddToNoContentType', 'AddToAllContentTypes', 'AddFieldInternalNameHint', 'AddFieldToDefaultView', 'AddFieldCheckDisplayName'];
                args.options.options.split(',').forEach(o => {
                    o = o.trim();
                    if (options.indexOf(o) < 0) {
                        optionsError = `${o} is not a valid value for the options argument. Allowed values are DefaultValue|AddToDefaultContentType|AddToNoContentType|AddToAllContentTypes|AddFieldInternalNameHint|AddFieldToDefaultView|AddFieldCheckDisplayName`;
                    }
                });
                return optionsError;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If the specified field already exists, you will get a
    ${chalk.grey('A duplicate field name "your-field" was found.')} error.

  Examples:
  
    Create a date time site column
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/contoso-sales --xml '\`<Field Type="DateTime" DisplayName="Start date-time" Required="FALSE" EnforceUniqueValues="FALSE" Indexed="FALSE" Format="DateTime" Group="PnP Columns" FriendlyDisplayFormat="Disabled" ID="{5ee2dd25-d941-455a-9bdb-7f2c54aed11b}" SourceID="{4f118c69-66e0-497c-96ff-d7855ce0713d}" StaticName="PnPAlertStartDateTime" Name="PnPAlertStartDateTime"><Default>[today]</Default></Field>\`'
    
    Create a URL list column
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/contoso-sales --listTitle Events --xml '\`<Field Type="URL" DisplayName="More information link" Required="FALSE" EnforceUniqueValues="FALSE" Indexed="FALSE" Format="Hyperlink" Group="PnP Columns" ID="{6085e32a-339b-4da7-ab6d-c1e013e5ab27}" SourceID="{4f118c69-66e0-497c-96ff-d7855ce0713d}" StaticName="PnPAlertMoreInformation" Name="PnPAlertMoreInformation"></Field>\`'

    Create a URL list column and add it to all content types
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/contoso-sales --listTitle Events --xml '\`<Field Type="URL" DisplayName="More information link" Required="FALSE" EnforceUniqueValues="FALSE" Indexed="FALSE" Format="Hyperlink" Group="PnP Columns" ID="{6085e32a-339b-4da7-ab6d-c1e013e5ab27}" SourceID="{4f118c69-66e0-497c-96ff-d7855ce0713d}" StaticName="PnPAlertMoreInformation" Name="PnPAlertMoreInformation"></Field>\`' --options AddToAllContentTypes

  More information:

    AddFieldOptions enumeration
      https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.client.addfieldoptions.aspx
`);
    }
}
module.exports = new SpoFieldAddCommand();
//# sourceMappingURL=field-add.js.map