"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const url = require("url");
const vorpal = require('../../../../vorpal-init');
class SpoFolderMoveCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.FOLDER_MOVE;
    }
    get description() {
        return 'Moves a folder to another location';
    }
    commandAction(cmd, args, cb) {
        const webUrl = args.options.webUrl;
        const parsedUrl = url.parse(webUrl);
        const tenantUrl = `${parsedUrl.protocol}//${parsedUrl.hostname}`;
        const sourceAbsoluteUrl = this.urlCombine(webUrl, args.options.sourceUrl);
        const allowSchemaMismatch = args.options.allowSchemaMismatch || false;
        const requestUrl = this.urlCombine(webUrl, '/_api/site/CreateCopyJobs');
        const requestOptions = {
            url: requestUrl,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            body: {
                exportObjectUris: [sourceAbsoluteUrl],
                destinationUri: this.urlCombine(tenantUrl, args.options.targetUrl),
                options: {
                    "AllowSchemaMismatch": allowSchemaMismatch,
                    "IgnoreVersionHistory": true,
                    "IsMoveMode": true,
                }
            },
            json: true
        };
        request_1.default
            .post(requestOptions)
            .then((jobInfo) => {
            const jobProgressOptions = {
                webUrl: webUrl,
                copyJopInfo: jobInfo.value[0],
                progressMaxPollAttempts: 1000,
                progressPollInterval: 30 * 60,
                progressRetryAttempts: 5
            };
            return this.getCopyJobProgress(jobProgressOptions, cmd);
        })
            .then(() => {
            if (this.verbose) {
                cmd.log('DONE');
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    /**
     * A polling function that awaits the
     * Azure queued copy job to return JobStatus = 0 meaning it is done with the task.
     */
    getCopyJobProgress(opts, cmd) {
        let pollCount = 0;
        let retryAttemptsCount = 0;
        const checkCondition = (resolve, reject) => {
            pollCount++;
            const requestUrl = `${opts.webUrl}/_api/site/GetCopyJobProgress`;
            const requestOptions = {
                url: requestUrl,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                body: { "copyJobInfo": opts.copyJopInfo },
                json: true
            };
            request_1.default
                .post(requestOptions)
                .then((resp) => {
                retryAttemptsCount = 0; // clear retry on promise success 
                if (this.debug) {
                    cmd.log('getCopyJobProgress response...');
                    cmd.log(resp);
                }
                if (this.verbose) {
                    if (resp.JobState && resp.JobState === 4) {
                        cmd.log(`Check #${pollCount}. Copy job in progress... JobState: ${resp.JobState}`);
                    }
                    else {
                        cmd.log(`Check #${pollCount}. JobState: ${resp.JobState}`);
                    }
                }
                for (const item of resp.Logs) {
                    const log = JSON.parse(item);
                    // reject if progress error 
                    if (log.Event === "JobError" || log.Event === "JobFatalError") {
                        return reject(log.Message);
                    }
                }
                // three possible scenarios
                // job done = success promise returned
                // job in progress = recursive call using setTimeout returned
                // max poll attempts flag raised = reject promise returned
                if (resp.JobState === 0) {
                    // job done
                    resolve();
                }
                else if (pollCount < opts.progressMaxPollAttempts) {
                    // if the condition isn't met but the timeout hasn't elapsed, go again
                    setTimeout(checkCondition, opts.progressPollInterval, resolve, reject);
                }
                else {
                    reject(new Error('getCopyJobProgress timed out'));
                }
            }, (error) => {
                retryAttemptsCount++;
                // let's retry x times in row before we give up since
                // this is progress check and even if rejects a promise
                // the actual move process can success.
                if (retryAttemptsCount <= opts.progressRetryAttempts) {
                    setTimeout(checkCondition, opts.progressPollInterval, resolve, reject);
                }
                else {
                    reject(error);
                }
            });
        };
        return new Promise(checkCondition);
    }
    /**
     * Combines base and relative url considering any missing slashes
     * @param baseUrl https://contoso.com
     * @param relativeUrl sites/abc
     */
    urlCombine(baseUrl, relativeUrl) {
        // remove last '/' of base if exists
        if (baseUrl.lastIndexOf('/') === baseUrl.length - 1) {
            baseUrl = baseUrl.substring(0, baseUrl.length - 1);
        }
        // remove '/' at 0
        if (relativeUrl.charAt(0) === '/') {
            relativeUrl = relativeUrl.substring(1, relativeUrl.length);
        }
        // remove last '/' of next if exists
        if (relativeUrl.lastIndexOf('/') === relativeUrl.length - 1) {
            relativeUrl = relativeUrl.substring(0, relativeUrl.length - 1);
        }
        return `${baseUrl}/${relativeUrl}`;
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site where the folder is located'
            },
            {
                option: '-s, --sourceUrl <sourceUrl>',
                description: 'Site-relative URL of the folder to move'
            },
            {
                option: '-t, --targetUrl <targetUrl>',
                description: 'Server-relative URL where to move the folder'
            },
            {
                option: '--allowSchemaMismatch',
                description: 'Ignores any missing fields in the target and moves folder'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.sourceUrl) {
                return 'Required parameter sourceUrl missing';
            }
            if (!args.options.targetUrl) {
                return 'Required parameter targetUrl missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:
  
    When you move a folder with documents that have version history,
    all of the versions are being moved.
        
  Examples:
  
    Moves folder from a document library located in one site collection to
    another site collection
      ${commands_1.default.FOLDER_MOVE} --webUrl https://contoso.sharepoint.com/sites/test1 --sourceUrl /Shared%20Documents/MyFolder --targetUrl /sites/test2/Shared%20Documents/

    Moves folder from a document library to another site in the same site
    collection
      ${commands_1.default.FOLDER_MOVE} --webUrl https://contoso.sharepoint.com/sites/test1 --sourceUrl /Shared%20Documents/MyFolder --targetUrl /sites/test1/HRDocuments/
    
    Moves folder to a document library in another site collection. Will ignore any missing fields in the target destination and move anyway
      ${commands_1.default.FOLDER_MOVE} --webUrl https://contoso.sharepoint.com/sites/test1 --sourceUrl /Shared%20Documents/MyFolder --targetUrl /sites/test2/Shared%20Documents/ --allowSchemaMismatch

  More information:

    Move items from a SharePoint document library
      https://support.office.com/en-us/article/move-or-copy-items-from-a-sharepoint-document-library-00e2f483-4df3-46be-a861-1f5f0c1a87bc
    `);
    }
}
module.exports = new SpoFolderMoveCommand();
//# sourceMappingURL=folder-move.js.map