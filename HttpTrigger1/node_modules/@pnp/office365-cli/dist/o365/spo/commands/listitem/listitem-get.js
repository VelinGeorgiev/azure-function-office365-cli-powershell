"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoListItemGetCommand extends SpoCommand_1.default {
    allowUnknownOptions() {
        return true;
    }
    get name() {
        return commands_1.default.LISTITEM_GET;
    }
    get description() {
        return 'Gets a list item from the specified list';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = typeof args.options.listId !== 'undefined';
        telemetryProps.listTitle = typeof args.options.listTitle !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const listIdArgument = args.options.listId || '';
        const listTitleArgument = args.options.listTitle || '';
        const listRestUrl = (args.options.listId ?
            `${args.options.webUrl}/_api/web/lists(guid'${encodeURIComponent(listIdArgument)}')`
            : `${args.options.webUrl}/_api/web/lists/getByTitle('${encodeURIComponent(listTitleArgument)}')`);
        const fieldSelect = args.options.fields ?
            `?$select=${encodeURIComponent(args.options.fields)}` :
            ((!args.options.output || args.options.output === 'text') ?
                `?$select=Id,Title` :
                ``);
        const requestOptions = {
            url: `${listRestUrl}/items(${args.options.id})${fieldSelect}`,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((response) => {
            (!args.options.output || args.options.output === 'text') && delete response["ID"];
            cmd.log(response);
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site from which the item should be retrieved'
            },
            {
                option: '-i, --id <id>',
                description: 'ID of the item to retrieve.'
            },
            {
                option: '-l, --listId [listId]',
                description: 'ID of the list from which to retrieve the item. Specify listId or listTitle but not both'
            },
            {
                option: '-t, --listTitle [listTitle]',
                description: 'Title of the list from which to retrieve the item. Specify listId or listTitle but not both'
            },
            {
                option: '-f, --fields [fields]',
                description: 'Comma-separated list of fields to retrieve. Will retrieve all fields if not specified and json output is requested'
            },
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    types() {
        return {
            string: [
                'webUrl',
                'listId',
                'listTitle',
                'id',
                'fields',
            ]
        };
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.listId && !args.options.listTitle) {
                return `Specify listId or listTitle`;
            }
            if (args.options.listId && args.options.listTitle) {
                return `Specify listId or listTitle but not both`;
            }
            if (args.options.listId &&
                !Utils_1.default.isValidGuid(args.options.listId)) {
                return `${args.options.listId} in option listId is not a valid GUID`;
            }
            if (!args.options.id) {
                return `Specify id`;
            }
            else {
                if (isNaN(parseInt(args.options.id))) {
                    return `${args.options.id} is not a number`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:

    Get the item with ID of ${chalk.grey('147')} in list with title ${chalk.grey('Demo List')} in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LISTITEM_GET} --listTitle "Demo List" --id 147 --webUrl https://contoso.sharepoint.com/sites/project-x

    Get the items Title and Created column and with ID of ${chalk.grey('147')} in list with title ${chalk.grey('Demo List')} in site ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LISTITEM_GET} --listTitle "Demo List" --id 147 --webUrl https://contoso.sharepoint.com/sites/project-x --fields "Title,Created"

   `);
    }
}
module.exports = new SpoListItemGetCommand();
//# sourceMappingURL=listitem-get.js.map