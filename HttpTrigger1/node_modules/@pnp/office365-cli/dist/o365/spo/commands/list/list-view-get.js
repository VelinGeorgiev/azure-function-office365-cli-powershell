"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoListViewGetCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.LIST_VIEW_GET;
    }
    get description() {
        return 'Gets information about specific list view';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.listId = typeof args.options.listId !== 'undefined';
        telemetryProps.listTitle = typeof args.options.listTitle !== 'undefined';
        telemetryProps.listUrl = typeof args.options.listUrl !== 'undefined';
        telemetryProps.viewId = typeof args.options.viewId !== 'undefined';
        telemetryProps.viewTitle = typeof args.options.viewTitle !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const baseRestUrl = `${args.options.webUrl}/_api/web`;
        let listRestUrl = '';
        if (args.options.listId) {
            listRestUrl = `/lists(guid'${encodeURIComponent(args.options.listId)}')`;
        }
        else if (args.options.listTitle) {
            listRestUrl = `/lists/getByTitle('${encodeURIComponent(args.options.listTitle)}')`;
        }
        else if (args.options.listUrl) {
            const listServerRelativeUrl = Utils_1.default.getServerRelativePath(args.options.webUrl, args.options.listUrl);
            listRestUrl = `/GetList('${encodeURIComponent(listServerRelativeUrl)}')`;
        }
        const viewRestUrl = `/views/${(args.options.viewId ? `getById('${encodeURIComponent(args.options.viewId)}')` : `getByTitle('${encodeURIComponent(args.options.viewTitle)}')`)}`;
        const requestOptions = {
            url: `${baseRestUrl}${listRestUrl}${viewRestUrl}`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((result) => {
            cmd.log(result);
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the list is located'
            },
            {
                option: '--listId [listId]',
                description: 'ID of the list where the view is located. Specify only one of listTitle, listId or listUrl'
            },
            {
                option: '--listTitle [listTitle]',
                description: 'Title of the list where the view is located. Specify only one of listTitle, listId or listUrl'
            },
            {
                option: '--listUrl [listUrl]',
                description: 'Server- or web-relative URL of the list where the view is located. Specify only one of listTitle, listId or listUrl'
            },
            {
                option: '--viewId [viewId]',
                description: 'ID of the view to get. Specify viewTitle or viewId but not both'
            },
            {
                option: '--viewTitle [viewTitle]',
                description: 'Title of the view to get. Specify viewTitle or viewId but not both'
            },
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.listId && !args.options.listTitle && !args.options.listUrl) {
                return `Specify listId, listTitle or listUrl`;
            }
            if (args.options.listId &&
                !Utils_1.default.isValidGuid(args.options.listId)) {
                return `${args.options.listId} in option listId is not a valid GUID`;
            }
            if (!args.options.viewId && !args.options.viewTitle) {
                return `Specify viewId or viewTitle`;
            }
            if (args.options.viewId && args.options.viewTitle) {
                return `Specify viewId or viewTitle but not both`;
            }
            if (args.options.viewId &&
                !Utils_1.default.isValidGuid(args.options.viewId)) {
                return `${args.options.viewId} in option viewId is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:

    Gets a list view by name from a list located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_VIEW_GET} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle 'My List' --viewTitle 'All Items'

    Gets a list view by ID from a list located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.LIST_VIEW_GET} --webUrl https://contoso.sharepoint.com/sites/project-x --listUrl 'Lists/My List' --viewId 330f29c5-5c4c-465f-9f4b-7903020ae1ce

    Gets a list view by name from a list located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}. Retrieve the list by its ID
      ${commands_1.default.LIST_VIEW_GET} --webUrl https://contoso.sharepoint.com/sites/project-x --listId 330f29c5-5c4c-465f-9f4b-7903020ae1c1 --viewTitle 'All Items'
   `);
    }
}
module.exports = new SpoListViewGetCommand();
//# sourceMappingURL=list-view-get.js.map