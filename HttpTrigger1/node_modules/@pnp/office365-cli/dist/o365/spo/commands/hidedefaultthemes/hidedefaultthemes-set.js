"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoHideDefaultThemesSetCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.HIDEDEFAULTTHEMES_SET;
    }
    get description() {
        return 'Sets the value of the HideDefaultThemes setting';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.hideDefaultThemes = args.options.hideDefaultThemes;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        this
            .getSpoAdminUrl(cmd, this.debug)
            .then((spoAdminUrl) => {
            if (this.verbose) {
                cmd.log(`Setting the value of the HideDefaultThemes setting to ${args.options.hideDefaultThemes}...`);
            }
            const requestOptions = {
                url: `${spoAdminUrl}/_api/thememanager/SetHideDefaultThemes`,
                headers: {
                    'accept': 'application/json;odata=nometadata'
                },
                body: {
                    hideDefaultThemes: args.options.hideDefaultThemes,
                },
                json: true
            };
            return request_1.default.post(requestOptions);
        })
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-h, --hideDefaultThemes <hideDefaultThemes>',
                description: 'Set to true to hide default themes and to false to show them'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (typeof args.options.hideDefaultThemes === 'undefined') {
                return 'Required parameter hideDefaultThemes missing';
            }
            if (args.options.hideDefaultThemes !== 'false' &&
                args.options.hideDefaultThemes !== 'true') {
                return `${args.options.hideDefaultThemes} is not a valid boolean`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
  
  Examples:

    Hide default themes and allow users to use organization themes only
      ${commands_1.default.HIDEDEFAULTTHEMES_SET} --hideDefaultThemes true

  More information:

    SharePoint site theming
      https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/site-theming/sharepoint-site-theming-overview
      `);
    }
}
module.exports = new SpoHideDefaultThemesSetCommand();
//# sourceMappingURL=hidedefaultthemes-set.js.map