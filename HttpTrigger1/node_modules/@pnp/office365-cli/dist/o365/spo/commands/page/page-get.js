"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const clientsidepages_1 = require("./clientsidepages");
const Utils_1 = require("../../../../Utils");
//import { relative } from 'path';
const vorpal = require('../../../../vorpal-init');
class SpoPageGetCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.PAGE_GET}`;
    }
    get description() {
        return 'Gets information about the specific modern page';
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Retrieving information about the page...`);
        }
        let pageName = args.options.name;
        if (args.options.name.indexOf('.aspx') < 0) {
            pageName += '.aspx';
        }
        const requestOptions = {
            url: `${args.options.webUrl}/_api/web/getfilebyserverrelativeurl('${Utils_1.default.getServerRelativeSiteUrl(args.options.webUrl)}/SitePages/${encodeURIComponent(pageName)}')?$expand=ListItemAllFields/ClientSideApplicationId,ListItemAllFields/PageLayoutType,ListItemAllFields/CommentsDisabled`,
            headers: {
                'content-type': 'application/json;charset=utf-8',
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res.ListItemAllFields.ClientSideApplicationId !== 'b6917cb1-93a0-4b97-a84d-7cf49975d4ec') {
                cb(new Command_1.CommandError(`Page ${args.options.name} is not a modern page.`));
                return;
            }
            const clientSidePage = clientsidepages_1.ClientSidePage.fromHtml(res.ListItemAllFields.CanvasContent1);
            let numControls = 0;
            clientSidePage.sections.forEach(s => {
                s.columns.forEach(c => {
                    numControls += c.controls.length;
                });
            });
            const page = {
                commentsDisabled: res.ListItemAllFields.CommentsDisabled,
                numSections: clientSidePage.sections.length,
                numControls: numControls,
                title: res.ListItemAllFields.Title
            };
            if (res.ListItemAllFields.PageLayoutType) {
                page.layoutType = res.ListItemAllFields.PageLayoutType;
            }
            cmd.log(page);
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-n, --name <name>',
                description: 'Name of the page to retrieve'
            },
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site where the page to retrieve is located'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.name) {
                return 'Required parameter name missing';
            }
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If the specified ${chalk.grey('name')} doesn't refer to an existing modern page, you will get
    a ${chalk.grey('File doesn\'t exists')} error.

  Examples:

    Get information about the modern page with name ${chalk.grey('home.aspx')}
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/team-a --name home.aspx
`);
    }
}
module.exports = new SpoPageGetCommand();
//# sourceMappingURL=page-get.js.map