"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoServicePrincipalGrantListCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.SERVICEPRINCIPAL_GRANT_LIST}`;
    }
    get description() {
        return 'Lists permissions granted to the service principal';
    }
    alias() {
        return [commands_1.default.SP_GRANT_LIST];
    }
    commandAction(cmd, args, cb) {
        let spoAdminUrl = '';
        this
            .getSpoAdminUrl(cmd, this.debug)
            .then((_spoAdminUrl) => {
            spoAdminUrl = _spoAdminUrl;
            if (this.verbose) {
                cmd.log(`Retrieving request digest...`);
            }
            return this.getRequestDigest(spoAdminUrl);
        })
            .then((res) => {
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="4" ObjectPathId="3" /><ObjectPath Id="6" ObjectPathId="5" /><Query Id="7" ObjectPathId="5"><Query SelectAllProperties="true"><Properties /></Query><ChildItemQuery SelectAllProperties="true"><Properties /></ChildItemQuery></Query></Actions><ObjectPaths><Constructor Id="3" TypeId="{104e8f06-1e00-4675-99c6-1b9b504ed8d8}" /><Property Id="5" ParentId="3" Name="PermissionGrants" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            else {
                const result = json[json.length - 1]._Child_Items_;
                cmd.log(result.map(r => {
                    delete r._ObjectType_;
                    delete r.ClientId;
                    delete r.ConsentType;
                    return r;
                }));
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.SERVICEPRINCIPAL_GRANT_LIST).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
        
  Examples:
  
    List all permissions granted to the service principal
      ${commands_1.default.SERVICEPRINCIPAL_GRANT_LIST}
`);
    }
}
module.exports = new SpoServicePrincipalGrantListCommand();
//# sourceMappingURL=serviceprincipal-grant-list.js.map