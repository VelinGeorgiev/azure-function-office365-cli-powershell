"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoFolderListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.FOLDER_LIST;
    }
    get description() {
        return 'Returns all folders under the specified parent folder';
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Retrieving folders from site ${args.options.webUrl} parent folder ${args.options.parentFolderUrl}...`);
        }
        const serverRelativeUrl = Utils_1.default.getServerRelativePath(args.options.webUrl, args.options.parentFolderUrl);
        const requestUrl = `${args.options.webUrl}/_api/web/GetFolderByServerRelativeUrl('${encodeURIComponent(serverRelativeUrl)}')/folders`;
        const requestOptions = {
            url: requestUrl,
            headers: {
                'accept': 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((resp) => {
            if (args.options.output === 'json') {
                cmd.log(resp.value);
            }
            else {
                cmd.log(resp.value.map(f => {
                    return {
                        Name: f.Name,
                        ServerRelativeUrl: f.ServerRelativeUrl
                    };
                }));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'The URL of the site where the folders to list are located'
            },
            {
                option: '-p, --parentFolderUrl <parentFolderUrl>',
                description: 'Site-relative URL of the parent folder'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            if (!args.options.parentFolderUrl) {
                return 'Required parameter folderUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Gets list of folders under a parent folder with site-relative url
    ${chalk.grey('/Shared Documents')} located in site
    ${chalk.grey('https://contoso.sharepoint.com/sites/project-x')}
      ${commands_1.default.FOLDER_LIST} --webUrl https://contoso.sharepoint.com/sites/project-x --parentFolderUrl '/Shared Documents'
    `);
    }
}
module.exports = new SpoFolderListCommand();
//# sourceMappingURL=folder-list.js.map