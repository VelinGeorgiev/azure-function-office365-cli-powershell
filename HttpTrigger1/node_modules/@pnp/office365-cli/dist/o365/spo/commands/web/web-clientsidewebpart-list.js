"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoWebClientSideWebPartListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.WEB_CLIENTSIDEWEBPART_LIST;
    }
    get description() {
        return 'Lists available client-side web parts';
    }
    commandAction(cmd, args, cb) {
        const requestOptions = {
            url: `${args.options.webUrl}/_api/web/GetClientSideWebParts`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            const clientSideWebParts = [];
            res.value.forEach(component => {
                if (component.ComponentType === 1) {
                    clientSideWebParts.push({
                        Id: component.Id.replace("{", "").replace("}", ""),
                        Name: component.Name,
                        Title: JSON.parse(component.Manifest).preconfiguredEntries[0].title.default
                    });
                }
            });
            if (clientSideWebParts.length === 0 && this.verbose) {
                cmd.log("No client-side web parts available for this site");
            }
            if (clientSideWebParts.length > 0) {
                cmd.log(clientSideWebParts);
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site for which to retrieve the information'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required option webUrl missing';
            }
            else {
                const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
                if (isValidSharePointUrl !== true) {
                    return isValidSharePointUrl;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:

    Lists all the available client-side web parts for the specified site
      ${this.name} --webUrl https://contoso.sharepoint.com
    `);
    }
}
module.exports = new SpoWebClientSideWebPartListCommand();
//# sourceMappingURL=web-clientsidewebpart-list.js.map