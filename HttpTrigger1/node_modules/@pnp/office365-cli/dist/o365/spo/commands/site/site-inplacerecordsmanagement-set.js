"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoSiteInPlaceRecordsManagementSetCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.SITE_INPLACERECORDSMANAGEMENT_SET;
    }
    get description() {
        return 'Activates or deactivates in-place records management for a site collection';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.enabled = args.options.enabled;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const enabled = args.options.enabled.toLocaleLowerCase() === 'true';
        const requestOptions = {
            url: `${args.options.siteUrl}/_api/site/features/${enabled ? 'add' : 'remove'}`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            body: {
                featureId: 'da2e115b-07e4-49d9-bb2c-35e93bb9fca9',
                force: true
            },
            json: true
        };
        if (this.verbose) {
            cmd.log(`${enabled ? 'Activating' : 'Deactivating'} in-place records management for site ${args.options.siteUrl}`);
        }
        request_1.default
            .post(requestOptions)
            .then(() => {
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --siteUrl <siteUrl>',
                description: 'The URL of the site on which to activate or deactivate in-place records management'
            },
            {
                option: '--enabled <enabled>',
                description: 'Set to "true" to activate in-place records management and to "false" to deactivate it'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.siteUrl) {
                return 'Required option siteUrl missing';
            }
            if (!args.options.enabled) {
                return 'Required option enabled missing';
            }
            if (!Utils_1.default.isValidBoolean(args.options.enabled)) {
                return 'Invalid "enabled" option value. Specify "true" or "false"';
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.siteUrl);
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    Activates in-place records management for site
    ${chalk.grey('https://contoso.sharepoint.com/sites/team-a')}
      ${commands_1.default.SITE_INPLACERECORDSMANAGEMENT_SET} --siteUrl https://contoso.sharepoint.com/sites/team-a --enabled true

    Deactivates in-place records management for site
    ${chalk.grey('https://contoso.sharepoint.com/sites/team-a')}
      ${commands_1.default.SITE_INPLACERECORDSMANAGEMENT_SET} --siteUrl https://contoso.sharepoint.com/sites/team-a --enabled false
  `);
    }
}
module.exports = new SpoSiteInPlaceRecordsManagementSetCommand();
//# sourceMappingURL=site-inplacerecordsmanagement-set.js.map