"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoNavigationNodeRemoveCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.NAVIGATION_NODE_REMOVE}`;
    }
    get description() {
        return 'Removes the specified navigation node';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.location = args.options.location;
        telemetryProps.confirm = typeof args.options.confirm !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const removeNode = () => {
            this
                .getRequestDigest(args.options.webUrl)
                .then((res) => {
                if (this.verbose) {
                    cmd.log(`Removing navigation node...`);
                }
                const requestOptions = {
                    url: `${args.options.webUrl}/_api/web/navigation/${args.options.location.toLowerCase()}/getbyid(${args.options.id})`,
                    headers: {
                        accept: 'application/json;odata=nometadata',
                        'X-RequestDigest': res.FormDigestValue
                    },
                    json: true
                };
                return request_1.default.delete(requestOptions);
            })
                .then(() => {
                if (this.verbose) {
                    cmd.log(vorpal.chalk.green('DONE'));
                }
                cb();
            }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
        };
        if (args.options.confirm) {
            removeNode();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to remove the node ${args.options.id} from the navigation?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeNode();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'Absolute URL of the site to which navigation should be modified'
            },
            {
                option: '-l, --location <location>',
                description: 'Navigation type where the node should be added. Available options: QuickLaunch|TopNavigationBar',
                autocomplete: ['QuickLaunch', 'TopNavigationBar']
            },
            {
                option: '-i, --id <id>',
                description: 'ID of the node to remove'
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming removing the node'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required option webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.location) {
                return 'Required option location missing';
            }
            else {
                if (args.options.location !== 'QuickLaunch' &&
                    args.options.location !== 'TopNavigationBar') {
                    return `${args.options.location} is not a valid value for the location option. Allowed values are QuickLaunch|TopNavigationBar`;
                }
            }
            if (!args.options.id) {
                return 'Required option id missing';
            }
            const id = parseInt(args.options.id);
            if (isNaN(id)) {
                return `${args.options.id} is not a number`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(commands_1.default.NAVIGATION_NODE_REMOVE).helpInformation());
        log(`  Examples:
  
    Remove a node from the top navigation. Will prompt for confirmation
      ${commands_1.default.NAVIGATION_NODE_REMOVE} --webUrl https://contoso.sharepoint.com/sites/team-a --location TopNavigationBar --id 2003

    Remove a node from the quick launch without prompting for confirmation
      ${commands_1.default.NAVIGATION_NODE_REMOVE} --webUrl https://contoso.sharepoint.com/sites/team-a --location QuickLaunch --id 2003 --confirm
`);
    }
}
module.exports = new SpoNavigationNodeRemoveCommand();
//# sourceMappingURL=navigation-node-remove.js.map