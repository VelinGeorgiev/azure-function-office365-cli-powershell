"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const Command_1 = require("../../../../Command");
const vorpal = require('../../../../vorpal-init');
class SpoSiteListCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.SITE_LIST;
    }
    get description() {
        return 'Lists modern sites of the given type';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.siteType = args.options.type || 'TeamSite';
        telemetryProps.filter = (!(!args.options.filter)).toString();
        telemetryProps.deleted = args.options.deleted;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const siteType = args.options.type || 'TeamSite';
        const webTemplate = siteType === 'TeamSite' ? 'GROUP#0' : 'SITEPAGEPUBLISHING#0';
        let startIndex = '0';
        let spoAdminUrl;
        this
            .getSpoAdminUrl(cmd, this.debug)
            .then((_spoAdminUrl) => {
            spoAdminUrl = _spoAdminUrl;
            return this.getRequestDigest(spoAdminUrl);
        })
            .then((res) => {
            if (this.verbose) {
                cmd.log(`Retrieving list of site collections...`);
            }
            let requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="2" ObjectPathId="1" /><ObjectPath Id="4" ObjectPathId="3" /><Query Id="5" ObjectPathId="3"><Query SelectAllProperties="true"><Properties /></Query><ChildItemQuery SelectAllProperties="true"><Properties /></ChildItemQuery></Query></Actions><ObjectPaths><Constructor Id="1" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /><Method Id="3" ParentId="1" Name="GetSitePropertiesFromSharePointByFilters"><Parameters><Parameter TypeId="{b92aeee2-c92c-4b67-abcc-024e471bc140}"><Property Name="Filter" Type="String">${Utils_1.default.escapeXml(args.options.filter || '')}</Property><Property Name="IncludeDetail" Type="Boolean">false</Property><Property Name="IncludePersonalSite" Type="Enum">0</Property><Property Name="StartIndex" Type="String">${startIndex}</Property><Property Name="Template" Type="String">${webTemplate}</Property></Parameter></Parameters></Method></ObjectPaths></Request>`;
            if (args.options.deleted) {
                requestBody = `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="4" ObjectPathId="3" /><ObjectPath Id="6" ObjectPathId="5" /><Query Id="7" ObjectPathId="5"><Query SelectAllProperties="true"><Properties><Property Name="NextStartIndexFromSharePoint" ScalarProperty="true" /></Properties></Query><ChildItemQuery SelectAllProperties="true"><Properties /></ChildItemQuery></Query></Actions><ObjectPaths><Constructor Id="3" TypeId="{268004ae-ef6b-4e9b-8425-127220d84719}" /><Method Id="5" ParentId="3" Name="GetDeletedSitePropertiesFromSharePoint"><Parameters><Parameter Type="Null" /></Parameters></Method></ObjectPaths></Request>`;
            }
            const requestOptions = {
                url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': res.FormDigestValue
                },
                body: requestBody
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            else {
                const sites = json[json.length - 1];
                if (args.options.output === 'json') {
                    cmd.log(sites._Child_Items_);
                }
                else {
                    cmd.log(sites._Child_Items_.map(s => {
                        return {
                            Title: s.Title,
                            Url: s.Url
                        };
                    }).sort((a, b) => {
                        const urlA = a.Url.toUpperCase();
                        const urlB = b.Url.toUpperCase();
                        if (urlA < urlB) {
                            return -1;
                        }
                        if (urlA > urlB) {
                            return 1;
                        }
                        return 0;
                    }));
                }
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '--type [type]',
                description: 'type of modern sites to list. Allowed values TeamSite|CommunicationSite, default TeamSite',
                autocomplete: ['TeamSite', 'CommunicationSite']
            },
            {
                option: '-f, --filter [filter]',
                description: 'filter to apply when retrieving sites'
            },
            {
                option: '--deleted',
                description: 'use this switch to only return deleted sites'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (args.options.type) {
                if (args.options.type !== 'TeamSite' &&
                    args.options.type !== 'CommunicationSite') {
                    return `${args.options.type} is not a valid modern site type. Allowed types are TeamSite and CommunicationSite`;
                }
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
   
  Remarks:

    Using the ${chalk.blue('-f, --filter')} option you can specify which sites you want to retrieve.
    For example, to get sites with ${chalk.grey('project')} in their URL, use ${chalk.grey("Url -like 'project'")}
    as the filter.

    When using the text output type (default), the command lists only the values
    of the ${chalk.grey('Title')}, and ${chalk.grey('Url')} properties of the site. When setting the output type to JSON,
    all available properties are included in the command output.
  
  Examples:
  
    List all modern team sites in the tenant you're logged in to
      ${commands_1.default.SITE_LIST}

    List all modern team sites in the tenant you're logged in to
      ${commands_1.default.SITE_LIST} --type TeamSite

    List all modern communication sites in the tenant you're logged in to
      ${commands_1.default.SITE_LIST} --type CommunicationSite

    List all modern team sites that contain 'project' in the URL
      ${commands_1.default.SITE_LIST} --type TeamSite --filter "Url -like 'project'"

    List all deleted sites in the tenant you're logged in to
      ${commands_1.default.SITE_LIST} --deleted
`);
    }
}
module.exports = new SpoSiteListCommand();
//# sourceMappingURL=site-list.js.map