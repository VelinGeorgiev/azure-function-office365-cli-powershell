"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoContentTypeGetCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.CONTENTTYPE_GET}`;
    }
    get description() {
        return 'Retrieves information about the specified list or site content type';
    }
    types() {
        return {
            string: ['id', 'i']
        };
    }
    commandAction(cmd, args, cb) {
        const requestOptions = {
            url: `${args.options.webUrl}/_api/web/${(args.options.listTitle ? `lists/getByTitle('${encodeURIComponent(args.options.listTitle)}')/` : '')}contenttypes('${encodeURIComponent(args.options.id)}')`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res['odata.null'] === true) {
                cb(new Command_1.CommandError(`Content type with ID ${args.options.id} not found`));
                return;
            }
            cmd.log(res);
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'Absolute URL of the site where the content type is located'
            },
            {
                option: '-l, --listTitle [listTitle]',
                description: 'Title of the list where the content type is located (if it is a list content type)'
            },
            {
                option: '-i, --id <id>',
                description: 'The ID of the content type to retrieve'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (!args.options.id) {
                return 'Required parameter id missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    If no content type with the specified is found in the site or the list, you
    will get the ${chalk.grey('Content type with ID 0x010012 not found')} error.

  Examples:
  
    Retrieve site content type
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/contoso-sales --id 0x0100558D85B7216F6A489A499DB361E1AE2F
    
    Retrieve list content type
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/contoso-sales --listTitle Events --id 0x0100558D85B7216F6A489A499DB361E1AE2F
`);
    }
}
module.exports = new SpoContentTypeGetCommand();
//# sourceMappingURL=contenttype-get.js.map