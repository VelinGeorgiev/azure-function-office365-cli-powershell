"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoPageListCommand extends SpoCommand_1.default {
    get name() {
        return `${commands_1.default.PAGE_LIST}`;
    }
    get description() {
        return 'Lists all modern pages in the given site';
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Retrieving client-side pages...`);
        }
        const requestOptions = {
            url: `${args.options.webUrl}/_api/web/lists/SitePages/rootfolder/files?$expand=ListItemAllFields/ClientSideApplicationId&$orderby=Name`,
            headers: {
                accept: 'application/json;odata=nometadata'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res.value && res.value.length > 0) {
                const clientSidePages = res.value.filter(p => p.ListItemAllFields.ClientSideApplicationId === 'b6917cb1-93a0-4b97-a84d-7cf49975d4ec');
                if (args.options.output === 'json') {
                    cmd.log(clientSidePages);
                }
                else {
                    cmd.log(clientSidePages.map(p => {
                        return {
                            Name: p.Name,
                            Title: p.Title
                        };
                    }));
                }
            }
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'URL of the site from which to retrieve available pages'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Missing required option webUrl';
            }
            return SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
        };
    }
    commandHelp(args, log) {
        log(vorpal.find(this.name).helpInformation());
        log(`  Examples:
  
    List all modern pages in the specific site
      ${this.name} --webUrl https://contoso.sharepoint.com/sites/team-a
`);
    }
}
module.exports = new SpoPageListCommand();
//# sourceMappingURL=page-list.js.map