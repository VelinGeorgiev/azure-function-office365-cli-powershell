"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoServicePrincipalSetCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.SERVICEPRINCIPAL_SET;
    }
    get description() {
        return 'Enable or disable the service principal';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.enabled = args.options.enabled === 'true';
        return telemetryProps;
    }
    alias() {
        return [commands_1.default.SP_SET];
    }
    commandAction(cmd, args, cb) {
        const enabled = args.options.enabled === 'true';
        const toggleServicePrincipal = () => {
            let spoAdminUrl = '';
            this
                .getSpoAdminUrl(cmd, this.debug)
                .then((_spoAdminUrl) => {
                spoAdminUrl = _spoAdminUrl;
                return this.getRequestDigest(spoAdminUrl);
            })
                .then((res) => {
                if (this.verbose) {
                    cmd.log(`${(enabled ? 'Enabling' : 'Disabling')} service principal...`);
                }
                const requestOptions = {
                    url: `${spoAdminUrl}/_vti_bin/client.svc/ProcessQuery`,
                    headers: {
                        'X-RequestDigest': res.FormDigestValue
                    },
                    body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="28" ObjectPathId="27" /><SetProperty Id="29" ObjectPathId="27" Name="AccountEnabled"><Parameter Type="Boolean">${enabled}</Parameter></SetProperty><Method Name="Update" Id="30" ObjectPathId="27" /><Query Id="31" ObjectPathId="27"><Query SelectAllProperties="true"><Properties><Property Name="AccountEnabled" ScalarProperty="true" /></Properties></Query></Query></Actions><ObjectPaths><Constructor Id="27" TypeId="{104e8f06-1e00-4675-99c6-1b9b504ed8d8}" /></ObjectPaths></Request>`
                };
                return request_1.default.post(requestOptions);
            })
                .then((res) => {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                    return;
                }
                else {
                    const output = json[json.length - 1];
                    delete output._ObjectType_;
                    cmd.log(output);
                    if (this.verbose) {
                        cmd.log(vorpal.chalk.green('DONE'));
                    }
                }
                cb();
            }, (err) => this.handleRejectedPromise(err, cmd, cb));
        };
        if (args.options.confirm) {
            toggleServicePrincipal();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to ${enabled ? 'enable' : 'disable'} the service principal?`,
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    toggleServicePrincipal();
                }
            });
        }
    }
    validate() {
        return (args) => {
            if (!args.options.enabled) {
                return 'Required option enabled missing';
            }
            const enabled = args.options.enabled.toLowerCase();
            if (enabled !== 'true' &&
                enabled !== 'false') {
                return `${args.options.enabled} is not a valid boolean value. Allowed values are true|false`;
            }
            return true;
        };
    }
    options() {
        const options = [
            {
                option: '-e, --enabled <enabled>',
                description: 'Set to true to enable the service principal or to false to disable it. Valid values are true|false',
                autocomplete: ['true', 'false']
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirming enabling/disabling the service principal'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.SERVICEPRINCIPAL_SET).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you have to have permissions to access
    the tenant admin site.
        
  Remarks:

    Using the ${chalk.blue('-e, --enabled')} option you can specify whether the service
    principal should be enabled or disabled. Use ${chalk.grey('true')} to enable the service
    principal and ${chalk.grey('false')} to disable it.

  Examples:
  
    Enable the service principal. Will prompt for confirmation
      ${commands_1.default.SERVICEPRINCIPAL_SET} --enabled true

    Disable the service principal. Will prompt for confirmation
      ${commands_1.default.SERVICEPRINCIPAL_SET} --enabled false

    Enable the service principal without prompting for confirmation
      ${commands_1.default.SERVICEPRINCIPAL_SET} --enabled true --confirm
`);
    }
}
module.exports = new SpoServicePrincipalSetCommand();
//# sourceMappingURL=serviceprincipal-set.js.map