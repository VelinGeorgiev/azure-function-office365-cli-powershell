"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../../config");
const request_1 = require("../../../../request");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const SpoCommand_1 = require("../../../base/SpoCommand");
const Utils_1 = require("../../../../Utils");
const vorpal = require('../../../../vorpal-init');
class SpoFieldSetCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.FIELD_SET;
    }
    get description() {
        return 'Updates existing list or site column';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.id = typeof args.options.id !== 'undefined';
        telemetryProps.name = typeof args.options.name !== 'undefined';
        telemetryProps.listId = typeof args.options.listId !== 'undefined';
        telemetryProps.listTitle = typeof args.options.listTitle !== 'undefined';
        telemetryProps.updateExistingLists = !!args.options.updateExistingLists;
        return telemetryProps;
    }
    allowUnknownOptions() {
        return true;
    }
    commandAction(cmd, args, cb) {
        let requestDigest = '';
        this
            .getRequestDigest(args.options.webUrl)
            .then((res) => {
            requestDigest = res.FormDigestValue;
            if (!args.options.listId && !args.options.listTitle) {
                return Promise.resolve(undefined);
            }
            const listQuery = args.options.listId ?
                `<Method Id="663" ParentId="7" Name="GetById"><Parameters><Parameter Type="Guid">${Utils_1.default.escapeXml(args.options.listId)}</Parameter></Parameters></Method>` :
                `<Method Id="663" ParentId="7" Name="GetByTitle"><Parameters><Parameter Type="String">${Utils_1.default.escapeXml(args.options.listTitle)}</Parameter></Parameters></Method>`;
            const requestOptions = {
                url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': requestDigest
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="664" ObjectPathId="663" /><Query Id="665" ObjectPathId="663"><Query SelectAllProperties="false"><Properties /></Query></Query></Actions><ObjectPaths>${listQuery}<Property Id="7" ParentId="5" Name="Lists" /><Property Id="5" ParentId="3" Name="Web" /><StaticProperty Id="3" TypeId="{3747adcd-a3c3-41b9-bfab-4a64dd2f1e0a}" Name="Current" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            // by default retrieve the column from the site
            let fieldsParentIdentity = '<Property Id="5" ParentId="3" Name="Web" /><StaticProperty Id="3" TypeId="{3747adcd-a3c3-41b9-bfab-4a64dd2f1e0a}" Name="Current" />';
            if (res) {
                const json = JSON.parse(res);
                const response = json[0];
                if (response.ErrorInfo) {
                    return Promise.reject(response.ErrorInfo.ErrorMessage);
                }
                const result = json[json.length - 1];
                fieldsParentIdentity = `<Identity Id="5" Name="${result._ObjectIdentity_}" />`;
            }
            // retrieve column CSOM object id
            const fieldQuery = args.options.id ?
                `<Method Id="663" ParentId="7" Name="GetById"><Parameters><Parameter Type="Guid">${Utils_1.default.escapeXml(args.options.id)}</Parameter></Parameters></Method>` :
                `<Method Id="663" ParentId="7" Name="GetByInternalNameOrTitle"><Parameters><Parameter Type="String">${Utils_1.default.escapeXml(args.options.name)}</Parameter></Parameters></Method>`;
            const requestOptions = {
                url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': requestDigest
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions><ObjectPath Id="664" ObjectPathId="663" /><Query Id="665" ObjectPathId="663"><Query SelectAllProperties="false"><Properties /></Query></Query></Actions><ObjectPaths>${fieldQuery}<Property Id="7" ParentId="5" Name="Fields" />${fieldsParentIdentity}</ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                return Promise.reject(response.ErrorInfo.ErrorMessage);
            }
            const result = json[json.length - 1];
            const fieldId = result._ObjectIdentity_;
            const requestOptions = {
                url: `${args.options.webUrl}/_vti_bin/client.svc/ProcessQuery`,
                headers: {
                    'X-RequestDigest': requestDigest
                },
                body: `<Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName="${config_1.default.applicationName}" xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009"><Actions>${this.getPayload(args.options)}<Method Name="UpdateAndPushChanges" Id="9000" ObjectPathId="663"><Parameters><Parameter Type="Boolean">${args.options.updateExistingLists ? 'true' : 'false'}</Parameter></Parameters></Method></Actions><ObjectPaths><Identity Id="663" Name="${fieldId}" /></ObjectPaths></Request>`
            };
            return request_1.default.post(requestOptions);
        })
            .then((res) => {
            const json = JSON.parse(res);
            const response = json[0];
            if (response.ErrorInfo) {
                cb(new Command_1.CommandError(response.ErrorInfo.ErrorMessage));
                return;
            }
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedPromise(err, cmd, cb));
    }
    getPayload(options) {
        const excludeOptions = [
            'webUrl',
            'listId',
            'listTitle',
            'id',
            'name',
            'updateExistingLists',
            'debug',
            'verbose',
            'output'
        ];
        let i = 667;
        const payload = Object.keys(options).map(key => {
            return excludeOptions.indexOf(key) === -1 ? `<SetProperty Id="${i++}" ObjectPathId="663" Name="${key}"><Parameter Type="String">${Utils_1.default.escapeXml(options[key])}</Parameter></SetProperty>` : '';
        }).join('');
        return payload;
    }
    options() {
        const options = [
            {
                option: '-u, --webUrl <webUrl>',
                description: 'Absolute URL of the site where the field is located'
            },
            {
                option: '--listId [listId]',
                description: 'ID of the list where the field is located (if list column). Specify listTitle or listId but not both'
            },
            {
                option: '--listTitle [listTitle]',
                description: 'Title of the list where the field is located (if list column). Specify listTitle or listId but not both'
            },
            {
                option: '-i|--id [id]',
                description: 'ID of the field to update. Specify name or id but not both'
            },
            {
                option: '-n|--name [name]',
                description: 'Title or internal name of the field to update. Specify name or id but not both'
            },
            {
                option: '--updateExistingLists',
                description: 'Set, to push the update to existing lists. Otherwise, the changes will apply to new lists only'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.webUrl) {
                return 'Required parameter webUrl missing';
            }
            const isValidSharePointUrl = SpoCommand_1.default.isValidSharePointUrl(args.options.webUrl);
            if (isValidSharePointUrl !== true) {
                return isValidSharePointUrl;
            }
            if (args.options.listId && args.options.listTitle) {
                return `Specify listId or listTitle but not both`;
            }
            if (args.options.listId &&
                !Utils_1.default.isValidGuid(args.options.listId)) {
                return `${args.options.listId} in option listId is not a valid GUID`;
            }
            if (!args.options.id && !args.options.name) {
                return `Specify id or name`;
            }
            if (args.options.id && args.options.name) {
                return `Specify viewId or viewTitle but not both`;
            }
            if (args.options.id &&
                !Utils_1.default.isValidGuid(args.options.id)) {
                return `${args.options.id} in option id is not a valid GUID`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  Remarks:

    Specify properties to update using their names, eg.
    ${chalk.grey("--Title 'New Title' --JSLink jslink.js")}.

  Examples:
  
    Update the title of the site column specified by its internal name and push
    changes to existing lists
      ${commands_1.default.FIELD_SET} --webUrl https://contoso.sharepoint.com/sites/project-x --name 'MyColumn' --updateExistingLists --Title 'My column'

    Update the title of the list column specified by its ID
      ${commands_1.default.FIELD_SET} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle 'My List' --id 330f29c5-5c4c-465f-9f4b-7903020ae1ce --Title 'My column'
  
    Update column formatting of the specified list column
      ${commands_1.default.FIELD_SET} --webUrl https://contoso.sharepoint.com/sites/project-x --listTitle 'My List' --name 'MyColumn' --CustomFormatter '\`{"schema":"https://developer.microsoft.com/json-schemas/sp/column-formatting.schema.json", "elmType": "div", "txtContent": "@currentField"}\`'

`);
    }
}
module.exports = new SpoFieldSetCommand();
//# sourceMappingURL=field-set.js.map