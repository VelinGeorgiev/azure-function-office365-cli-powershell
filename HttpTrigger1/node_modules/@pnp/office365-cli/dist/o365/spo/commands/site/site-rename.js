"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const SpoCommand_1 = require("../../../base/SpoCommand");
const vorpal = require('../../../../vorpal-init');
class SpoSiteRenameCommand extends SpoCommand_1.default {
    get name() {
        return commands_1.default.SITE_RENAME;
    }
    get description() {
        return 'Renames the URL and title of a site collection';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.newSiteTitle = args.options.newSiteTitle ? true : false;
        telemetryProps.suppressMarketplaceAppCheck = args.options.suppressMarketplaceAppCheck;
        telemetryProps.suppressWorkflow2013Check = args.options.suppressWorkflow2013Check;
        telemetryProps.wait = args.options.wait;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        let spoAdminUrl = "";
        let options = args.options;
        this
            .getSpoAdminUrl(cmd, this.debug)
            .then((_spoAdminUrl) => {
            spoAdminUrl = _spoAdminUrl;
            return this.getRequestDigest(spoAdminUrl);
        })
            .then((res) => {
            this.context = res;
            if (this.verbose) {
                cmd.log(`Scheduling rename job...`);
            }
            let optionsBitmask = 0;
            if (options.suppressMarketplaceAppCheck) {
                optionsBitmask = optionsBitmask | 8;
            }
            if (options.suppressWorkflow2013Check) {
                optionsBitmask = optionsBitmask | 16;
            }
            const requestOptions = {
                "SourceSiteUrl": options.siteUrl,
                "TargetSiteUrl": options.newSiteUrl,
                "TargetSiteTitle": options.newSiteTitle || null,
                "Option": optionsBitmask,
                "Reserve": null,
                "SkipGestures": null,
                "OperationId": "00000000-0000-0000-0000-000000000000"
            };
            const postData = {
                url: `${spoAdminUrl}/_api/SiteRenameJobs?api-version=1.4.7`,
                headers: {
                    'X-RequestDigest': this.context.FormDigestValue,
                    'Content-Type': 'application/json'
                },
                json: true,
                body: requestOptions
            };
            return request_1.default.post(postData);
        })
            .then((res) => {
            if (options.verbose) {
                cmd.log(res);
            }
            this.operationData = res;
            if (this.operationData.JobState && this.operationData.JobState === "Error") {
                return Promise.reject(this.operationData.ErrorDescription);
            }
            const isComplete = this.operationData.JobState === "Success";
            if (!options.wait || isComplete) {
                return Promise.resolve();
            }
            return new Promise((resolve, reject) => {
                this.waitForRenameCompletion(this, true, spoAdminUrl, options.siteUrl, resolve, reject, 0);
            });
        }).then(() => {
            if (args.options.output === 'json') {
                cmd.log(this.operationData);
            }
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (err) => this.handleRejectedODataJsonPromise(err, cmd, cb));
    }
    waitForRenameCompletion(command, isVerbose, spoAdminUrl, siteUrl, resolve, reject, iteration) {
        iteration++;
        const requestOptions = {
            url: `${spoAdminUrl}/_api/SiteRenameJobs/GetJobsBySiteUrl(url='${encodeURIComponent(siteUrl)}')?api-version=1.4.7`,
            headers: {
                'X-AttemptNumber': iteration.toString()
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            this.operationData = res.value[0];
            if (this.operationData.ErrorDescription) {
                reject(this.operationData.ErrorDescription);
                return;
            }
            if (this.operationData.JobState === "Success") {
                resolve();
                return;
            }
            command.timeout = setTimeout(() => {
                command.waitForRenameCompletion(command, isVerbose, spoAdminUrl, siteUrl, resolve, reject, iteration);
            }, SpoSiteRenameCommand.checkIntervalInMs);
        })
            .catch((ex) => {
            reject(ex);
        });
    }
    cancel() {
        return () => {
            if (this.timeout) {
                clearTimeout(this.timeout);
            }
        };
    }
    options() {
        const options = [
            {
                option: '-u, --siteUrl <siteUrl>',
                description: 'The URL of the site to rename'
            },
            {
                option: '--newSiteUrl <newSiteUrl>',
                description: 'New URL for the site collection'
            },
            {
                option: '--newSiteTitle [newSiteTitle]',
                description: 'New title for the site'
            },
            {
                option: '--suppressMarketplaceAppCheck',
                description: 'Suppress marketplace app check'
            },
            {
                option: '--suppressWorkflow2013Check',
                description: 'Suppress 2013 workflow check'
            },
            {
                option: '--wait',
                description: 'Wait for the job to complete'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.newSiteUrl) {
                return 'A new url must be provided.';
            }
            if (args.options.siteUrl.toLowerCase() === args.options.newSiteUrl.toLowerCase()) {
                return 'The new URL cannot be the same as the target URL.';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(this.name).helpInformation());
        log(`  ${chalk.yellow('Important:')} to use this command you must have permissions to access
    the tenant admin site.
  
  Remarks:

    Renaming site collections is by default asynchronous and depending on the
    current state of Office 365, might take up to few minutes. If you're
    building a script with steps that require the operation to complete fully,
    you should use the  ${chalk.blue('--wait')} flag. When using this flag, the ${chalk.blue(this.getCommandName())}
    command  will keep running until it receives confirmation from Office 365 
    that the site rename operation has completed.

  Examples:
  
    Starts the rename of the site collection with name "samplesite" to "renamed"
    without modifying the title
      ${commands_1.default.SITE_RENAME}  --siteUrl http://contoso.sharepoint.com/samplesite --newSiteUrl http://contoso.sharepoint.com/renamed

    Starts the rename of the site collection with name "samplesite" to "renamed"
    modifying the title of the site to "New Title"
      ${commands_1.default.SITE_RENAME} --siteUrl http://contoso.sharepoint.com/samplesite --newSiteUrl http://contoso.sharepoint.com/renamed --newSiteTitle "New Title"

    Renames the specified site collection and waits for the operation to
    complete
      ${commands_1.default.SITE_RENAME} --siteUrl http://contoso.sharepoint.com/samplesite --newSiteUrl http://contoso.sharepoint.com/renamed --newSiteTitle "New Title" --wait
`);
    }
}
SpoSiteRenameCommand.checkIntervalInMs = 5000;
module.exports = new SpoSiteRenameCommand();
//# sourceMappingURL=site-rename.js.map