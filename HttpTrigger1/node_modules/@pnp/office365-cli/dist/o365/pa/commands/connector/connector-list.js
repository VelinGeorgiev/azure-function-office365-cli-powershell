"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const commands_2 = require("../../../flow/commands");
const AzmgmtItemsListCommand_1 = require("../../../base/AzmgmtItemsListCommand");
const vorpal = require('../../../../vorpal-init');
class PaConnectorListCommand extends AzmgmtItemsListCommand_1.AzmgmtItemsListCommand {
    get name() {
        return commands_1.default.CONNECTOR_LIST;
    }
    get description() {
        return 'Lists custom connectors in the given environment';
    }
    alias() {
        return [commands_2.default.CONNECTOR_LIST];
    }
    commandAction(cmd, args, cb) {
        const url = `${this.resource}providers/Microsoft.PowerApps/apis?api-version=2016-11-01&$filter=environment%20eq%20%27${encodeURIComponent(args.options.environment)}%27%20and%20IsCustomApi%20eq%20%27True%27`;
        this
            .getAllItems(url, cmd, true)
            .then(() => {
            if (this.items.length > 0) {
                if (args.options.output === 'json') {
                    cmd.log(this.items);
                }
                else {
                    cmd.log(this.items.map(f => {
                        return {
                            name: f.name,
                            displayName: f.properties.displayName
                        };
                    }));
                }
            }
            else {
                if (this.verbose) {
                    cmd.log('No custom connectors found');
                }
            }
            cb();
        }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-e, --environment <environment>',
                description: 'The name of the environment for which to retrieve custom connectors'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.environment) {
                return 'Required option environment missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.CONNECTOR_LIST).helpInformation());
        log(`  Remarks:

    ${chalk.yellow('Attention:')} This command is based on an API that is currently
    in preview and is subject to change once the API reached general
    availability.
  
  Examples:
  
    List all custom connectors in the given environment
      ${this.getCommandName()} --environment Default-d87a7535-dd31-4437-bfe1-95340acd55c5
`);
    }
}
module.exports = new PaConnectorListCommand();
//# sourceMappingURL=connector-list.js.map