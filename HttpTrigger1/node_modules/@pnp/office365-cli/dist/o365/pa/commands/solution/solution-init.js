"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const uuidv4 = require('uuid/v4');
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const Utils_1 = require("../../../../Utils");
const template_instantiator_1 = require("../../template-instantiator");
const vorpal = require('../../../../vorpal-init');
/*
 * Logic extracted from bolt.module.solution.dll
 * Version: 1.0.6
 * Class: bolt.module.solution.SolutionInitVerb
 */
class PaSolutionInitCommand extends Command_1.default {
    get name() {
        return commands_1.default.SOLUTION_INIT;
    }
    get description() {
        return 'Initializes a directory with a new CDS solution project';
    }
    action() {
        const cmd = this;
        return function (args, cb) {
            args = cmd.processArgs(args);
            cmd.initAction(args, this);
            cmd.commandAction(this, args, cb);
        };
    }
    commandAction(cmd, args, cb) {
        try {
            const solutionInitTemplatePath = path.join(__dirname, 'solution-init', 'assets');
            const cdsAssetsTemplatePath = path.join(solutionInitTemplatePath, 'Other');
            const workingDirectory = process.cwd();
            const workingDirectoryName = path.basename(workingDirectory);
            const cdsAssetsDirectory = path.join(workingDirectory, 'Other');
            const cdsAssetsDirectorySolutionsFile = path.join(workingDirectory, 'Other', 'Solution.xml');
            const publisherName = args.options.publisherName;
            const publisherPrefix = args.options.publisherPrefix.toLocaleLowerCase();
            const customizationOptionValuePrefix = this.generateOptionValuePrefixForPublisher(publisherPrefix);
            const variables = {
                "$publisherName$": publisherName,
                "$customizationPrefix$": publisherPrefix,
                "$customizationOptionValuePrefix$": customizationOptionValuePrefix,
                "$cdsProjectGuid$": uuidv4(),
                "solutionprojecttype": workingDirectoryName,
                "$solutionName$": workingDirectoryName
            };
            if (this.verbose) {
                cmd.log(`publisherName: ${publisherName}`);
                cmd.log(`publisherPrefix: ${publisherPrefix}`);
                cmd.log(`customizationOptionValuePrefix: ${customizationOptionValuePrefix}`);
                cmd.log(`solutionInitTemplatePath: ${solutionInitTemplatePath}`);
                cmd.log(`cdsAssetsTemplatePath: ${cdsAssetsTemplatePath}`);
                cmd.log(`workingDirectory: ${workingDirectory}`);
                cmd.log(`workingDirectoryName: ${workingDirectoryName}`);
                cmd.log(`cdsAssetsDirectory: ${cdsAssetsDirectory}`);
                cmd.log(`cdsAssetsDirectorySolutionsFile: ${cdsAssetsDirectorySolutionsFile}`);
            }
            template_instantiator_1.default.instantiate(cmd, solutionInitTemplatePath, workingDirectory, false, variables, this.verbose);
            if (this.verbose) {
                cmd.log(` `);
            }
            cmd.log(vorpal.chalk.green(`CDS solution project with name '${workingDirectoryName}' created successfully in current directory.`));
            const cdsAssetsExist = fs.existsSync(cdsAssetsDirectory) && fs.existsSync(cdsAssetsDirectorySolutionsFile);
            if (cdsAssetsExist) {
                cmd.log(vorpal.chalk.yellow(`CDS solution files already exist in the current directory. Skipping CDS solution files creation.`));
            }
            else {
                template_instantiator_1.default.instantiate(cmd, cdsAssetsTemplatePath, cdsAssetsDirectory, false, variables, this.verbose);
                cmd.log(vorpal.chalk.green(`CDS solution files were successfully created for this project in the sub-directory 'Other', using solution name '${workingDirectory}', publisher name '${publisherName}', and customization prefix '${publisherPrefix}'.`));
                cmd.log(`Please verify the publisher information and solution name found in the '${vorpal.chalk.grey('Solution.xml')}' file.`);
            }
            cb();
        }
        catch (err) {
            cb(new Command_1.CommandError(err));
        }
    }
    options() {
        const options = [
            {
                option: '--publisherName <publisherName>',
                description: 'Name of the CDS solution publisher.'
            },
            {
                option: '--publisherPrefix <publisherPrefix>',
                description: 'Customization prefix value for the CDS solution publisher.',
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (fs.readdirSync(process.cwd()).some(fn => path.extname(fn).toLowerCase() === '.cdsproj')) {
                return 'CDS project creation failed. The current directory already contains a project. Please create a new directory and retry the operation.';
            }
            const workingDirectoryName = path.basename(process.cwd());
            if (!Utils_1.default.isValidFileName(workingDirectoryName)) {
                return `Empty or invalid project name '${workingDirectoryName}'`;
            }
            if (args.options.publisherPrefix) {
                if (args.options.publisherPrefix.length < 2 || args.options.publisherPrefix.length > 8 || !/^(?!mscrm)^([a-zA-Z])\w*$/i.test(args.options.publisherPrefix)) {
                    return `Value of 'publisherPrefix' is invalid. The prefix must be 2 to 8 characters long, can only consist of alpha-numerics, must start with a letter, and cannot start with 'mscrm'.`;
                }
            }
            else {
                return 'Missing required option publisherPrefix.';
            }
            if (args.options.publisherName) {
                if (!/^([a-zA-Z_])\w*$/i.test(args.options.publisherName)) {
                    return `Value of 'publisherName' is invalid. Only characters within the ranges [A-Z], [a-z], [0-9], or _ are allowed. The first character may only be in the ranges [A-Z], [a-z], or _.`;
                }
            }
            else {
                return 'Missing required option publisherName.';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.SOLUTION_INIT).helpInformation());
        log(`  Remarks:

    PublisherName only allows characters within the ranges [A-Z], [a-z], [0-9],
    or _. The first character may only be in the ranges [A-Z], [a-z], or _.
    
    PublisherPrefix must be 2 to 8 characters long, can only consist of
    alpha-numerics, must start with a letter, and cannot start with 'mscrm'.

  Examples:

    Initializes a CDS solution project using ${chalk.grey('yourPublisherName')} as publisher
    name and ${chalk.grey('ypn')} as publisher prefix
      ${commands_1.default.SOLUTION_INIT} --publisherName yourPublisherName --publisherPrefix ypn

  More information:

    Create and build a custom component
      https://docs.microsoft.com/en-us/powerapps/developer/component-framework/create-custom-controls-using-pcf
`);
    }
    generateOptionValuePrefixForPublisher(customizationPrefix) {
        if (customizationPrefix.toLocaleLowerCase() !== "new") {
            return this.generateOptionValuePrefixForPublisherInternal(this.getHashCode(customizationPrefix));
        }
        return "10000";
    }
    generateOptionValuePrefixForPublisherInternal(customizationPrefixHashCode) {
        return Math.abs(customizationPrefixHashCode % 90000) + 10000 + "";
    }
    getHashCode(s) {
        for (var i = 0, h = 0; i < s.length; i++) {
            h = Math.imul(31, h) + s.charCodeAt(i) | 0;
        }
        return h;
    }
}
module.exports = new PaSolutionInitCommand();
//# sourceMappingURL=solution-init.js.map