"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const commands_2 = require("../../../flow/commands");
const request_1 = require("../../../../request");
const AzmgmtCommand_1 = require("../../../base/AzmgmtCommand");
const path = require("path");
const fs = require("fs");
const vorpal = require('../../../../vorpal-init');
class PaConnectorExportCommand extends AzmgmtCommand_1.default {
    get name() {
        return commands_1.default.CONNECTOR_EXPORT;
    }
    get description() {
        return 'Exports the specified power automate or power apps custom connector';
    }
    alias() {
        return [commands_2.default.CONNECTOR_EXPORT];
    }
    commandAction(cmd, args, cb) {
        const outputFolder = path.resolve(args.options.outputFolder || '.', args.options.connector);
        const requestOptions = {
            url: `${this.resource}providers/Microsoft.PowerApps/apis/${encodeURIComponent(args.options.connector)}?api-version=2016-11-01&$filter=environment%20eq%20%27${encodeURIComponent(args.options.environment)}%27%20and%20IsCustomApi%20eq%20%27True%27`,
            headers: {
                accept: 'application/json'
            },
            json: true
        };
        let connector;
        if (this.verbose) {
            cmd.log('Downloading connector...');
        }
        request_1.default
            .get(requestOptions)
            .then((connectorRes) => {
            connector = connectorRes;
            if (!connector.properties) {
                return Promise.reject('Properties not present in the api registration information.');
            }
            if (this.verbose) {
                cmd.log(`Creating output folder ${outputFolder}...`);
            }
            fs.mkdirSync(outputFolder);
            const settings = {
                apiDefinition: "apiDefinition.swagger.json",
                apiProperties: "apiProperties.json",
                connectorId: args.options.connector,
                environment: args.options.environment,
                icon: "icon.png",
                powerAppsApiVersion: "2016-11-01",
                powerAppsUrl: "https://api.powerapps.com"
            };
            if (this.verbose) {
                cmd.log('Exporting settings...');
            }
            fs.writeFileSync(path.join(outputFolder, 'settings.json'), JSON.stringify(settings, null, 2), 'utf8');
            const propertiesWhitelist = [
                "connectionParameters",
                "iconBrandColor",
                "capabilities",
                "policyTemplateInstances"
            ];
            const apiProperties = {
                properties: JSON.parse(JSON.stringify(connector.properties))
            };
            Object.keys(apiProperties.properties).forEach(k => {
                if (propertiesWhitelist.indexOf(k) < 0) {
                    delete apiProperties.properties[k];
                }
            });
            if (this.verbose) {
                cmd.log('Exporting API properties...');
            }
            fs.writeFileSync(path.join(outputFolder, 'apiProperties.json'), JSON.stringify(apiProperties, null, 2), 'utf8');
            if (connector.properties.apiDefinitions &&
                connector.properties.apiDefinitions.originalSwaggerUrl) {
                if (this.verbose) {
                    cmd.log(`Downloading swagger from ${connector.properties.apiDefinitions.originalSwaggerUrl}...`);
                }
                return request_1.default
                    .get({
                    url: connector.properties.apiDefinitions.originalSwaggerUrl,
                    headers: {
                        'x-anonymous': true
                    }
                });
            }
            else {
                if (this.debug) {
                    cmd.log('originalSwaggerUrl not set. Skipping');
                }
                return Promise.resolve('');
            }
        })
            .then((swagger) => {
            if (swagger && swagger.length > 0) {
                if (this.debug) {
                    cmd.log('Downloaded swagger');
                    cmd.log(swagger);
                }
                if (this.verbose) {
                    cmd.log('Exporting swagger...');
                }
                fs.writeFileSync(path.join(outputFolder, 'apiDefinition.swagger.json'), swagger, 'utf8');
            }
            if (connector.properties.iconUri) {
                if (this.verbose) {
                    cmd.log(`Downloading icon from ${connector.properties.iconUri}...`);
                }
                return request_1.default
                    .get({
                    url: connector.properties.iconUri,
                    encoding: null,
                    headers: {
                        'x-anonymous': true
                    }
                });
            }
            else {
                if (this.debug) {
                    cmd.log('iconUri not set. Skipping');
                }
                return Promise.resolve();
            }
        })
            .then((icon) => {
            if (icon) {
                if (this.verbose) {
                    cmd.log('Exporting icon...');
                }
                const iconBuffer = Buffer.from(icon, 'utf8');
                fs.writeFileSync(path.join(outputFolder, 'icon.png'), iconBuffer);
            }
            else {
                if (this.debug) {
                    cmd.log('No icon retrieved');
                }
            }
            if (this.verbose) {
                cmd.log(vorpal.chalk.green('DONE'));
            }
            cb();
        }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-e, --environment <environment>',
                description: 'The name of the environment where the custom connector to export is located'
            },
            {
                option: '-c, --connector <connector>',
                description: 'The name of the custom connector to export'
            },
            {
                option: '--outputFolder [outputFolder]',
                description: 'Path where the folder with connector\'s files should be saved. If not specified, will create the connector\'s folder in the current folder.'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.environment) {
                return 'Required option environment missing';
            }
            if (!args.options.connector) {
                return 'Required option connector missing';
            }
            if (args.options.outputFolder &&
                !fs.existsSync(path.resolve(args.options.outputFolder))) {
                return `Specified output folder ${args.options.outputFolder} doesn't exist`;
            }
            const outputFolder = path.resolve(args.options.outputFolder || '.', args.options.connector);
            if (fs.existsSync(outputFolder)) {
                return `Connector output folder ${outputFolder} already exists`;
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.CONNECTOR_EXPORT).helpInformation());
        log(`  Remarks:

    ${chalk.yellow('Attention:')} This command is based on an API that is currently
    in preview and is subject to change once the API reached general
    availability.

    If no output folder has been specified, the ${chalk.blue(this.getCommandName())} command
    will create a folder named after the connector in the current folder.
    If the output folder has been specified, the folder named after
    the connector will be created in that folder.
  
  Examples:
  
    Export the specified custom connector
      ${this.getCommandName()} --environment Default-d87a7535-dd31-4437-bfe1-95340acd55c5 --connector shared_connector-201-5f20a1f2d8d6777a75-5fa602f410652f4dfa

    Export the specified custom connector to the specific directory
      ${this.getCommandName()} --environment Default-d87a7535-dd31-4437-bfe1-95340acd55c5 --connector shared_connector-201-5f20a1f2d8d6777a75-5fa602f410652f4dfa --outputFolder connector
`);
    }
}
module.exports = new PaConnectorExportCommand();
//# sourceMappingURL=connector-export.js.map