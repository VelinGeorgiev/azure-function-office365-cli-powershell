"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const uuidv4 = require('uuid/v4');
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const Utils_1 = require("../../../../Utils");
const template_instantiator_1 = require("../../template-instantiator");
const vorpal = require('../../../../vorpal-init');
/*
 * Logic extracted from bolt.module.pcf.dll
 * Version: 1.0.6
 * Class: bolt.module.pcf.PcfInitVerb
 */
class PaPcfInitCommand extends Command_1.default {
    get name() {
        return commands_1.default.PCF_INIT;
    }
    get description() {
        return 'Creates new PowerApps component framework project';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.template = args.options.template;
        return telemetryProps;
    }
    action() {
        const cmd = this;
        return function (args, cb) {
            args = cmd.processArgs(args);
            cmd.initAction(args, this);
            cmd.commandAction(this, args, cb);
        };
    }
    commandAction(cmd, args, cb) {
        try {
            const pcfTemplatePath = path.join(__dirname, 'pcf-init', 'assets');
            const pcfComponentTemplatePath = path.join(pcfTemplatePath, 'control', `${args.options.template.toLowerCase()}-template`);
            const workingDirectory = process.cwd();
            const workingDirectoryName = path.basename(workingDirectory);
            const componentDirectory = path.join(workingDirectory, args.options.name);
            const variables = {
                "$namespaceplaceholder$": args.options.namespace,
                "$controlnameplaceholder$": args.options.name,
                "$pcfProjectName$": workingDirectoryName,
                "pcfprojecttype": workingDirectoryName,
                "$pcfProjectGuid$": uuidv4()
            };
            if (this.verbose) {
                cmd.log(`name: ${args.options.name}`);
                cmd.log(`namespace: ${args.options.namespace}`);
                cmd.log(`template: ${args.options.template}`);
                cmd.log(`pcfTemplatePath: ${pcfTemplatePath}`);
                cmd.log(`pcfComponentTemplatePath: ${pcfComponentTemplatePath}`);
                cmd.log(`workingDirectory: ${workingDirectory}`);
                cmd.log(`workingDirectoryName: ${workingDirectoryName}`);
                cmd.log(`componentDirectory: ${componentDirectory}`);
            }
            template_instantiator_1.default.instantiate(cmd, pcfTemplatePath, workingDirectory, false, variables, this.verbose);
            template_instantiator_1.default.instantiate(cmd, pcfComponentTemplatePath, componentDirectory, true, variables, this.verbose);
            if (this.verbose) {
                cmd.log(` `);
            }
            cmd.log(vorpal.chalk.green(`The PowerApps component framework project was successfully created in '${workingDirectory}'.`));
            cmd.log(`Be sure to run '${vorpal.chalk.grey('npm install')}' in this directory to install project dependencies.`);
            cb();
        }
        catch (err) {
            cb(new Command_1.CommandError(err));
        }
    }
    options() {
        const options = [
            {
                option: '--namespace <namespace>',
                description: 'The namespace for the component.'
            },
            {
                option: '--name <name>',
                description: 'The name for the component.',
            },
            {
                option: '--template <template>',
                description: 'Choose a template for the component. Field|Dataset.',
                autocomplete: ['Field', 'Dataset']
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (fs.readdirSync(process.cwd()).some(fn => path.extname(fn).toLowerCase().endsWith('proj'))) {
                return 'PowerApps component framework project creation failed. The current directory already contains a project. Please create a new directory and retry the operation.';
            }
            const workingDirectoryName = path.basename(process.cwd());
            if (!Utils_1.default.isValidFileName(workingDirectoryName)) {
                return `Empty or invalid project name '${workingDirectoryName}'`;
            }
            if (args.options.name) {
                if (!/^(?!\d)[a-zA-Z0-9]+$/i.test(args.options.name)) {
                    return `Value of 'name' is invalid. Only characters within the ranges [A - Z], [a - z] or [0 - 9] are allowed. The first character may not be a number.`;
                }
                if (Utils_1.default.isJavascriptReservedWord(args.options.name)) {
                    return `The value '${args.options.name}' passed for 'name' is a reserved word.`;
                }
            }
            else {
                return 'Missing required option name.';
            }
            if (args.options.namespace) {
                if (!/^(?!\.|\d)(?!.*\.$)(?!.*?\.\d)(?!.*?\.\.)[a-zA-Z0-9.]+$/i.test(args.options.namespace)) {
                    return `Value of 'namespace' is invalid. Only characters within the ranges [A - Z], [a - z], [0 - 9], or '.' are allowed. The first and last character may not be the '.' character. Consecutive '.' characters are not allowed. Numbers are not allowed as the first character or immediately after a period.`;
                }
                if (Utils_1.default.isJavascriptReservedWord(args.options.namespace)) {
                    return `The value '${args.options.namespace}' passed for 'namespace' is or includes a reserved word.`;
                }
            }
            else {
                return 'Missing required option namespace.';
            }
            if (args.options.namespace && args.options.name && (args.options.namespace + args.options.name).length > 75) {
                return `The total length of values for 'name' and 'namespace' cannot exceed 75. Length of 'name' is ${args.options.name.length}, length of 'namespace' is ${args.options.namespace.length}.`;
            }
            if (args.options.template) {
                const testTemplate = args.options.template.toLowerCase();
                if (!(testTemplate === 'field' || testTemplate === 'dataset')) {
                    return `Template must be either 'Field' or 'Dataset', but '${args.options.template}' was provided.`;
                }
            }
            else {
                return 'Missing required option template.';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.PCF_INIT).helpInformation());
        log(`  Remarks:

    Name cannot contain reserved Javascript words. Only characters within the
    ranges [A-Z], [a-z] or [0-9] are allowed. The first character may not be
    a number.

    Namespace cannot contain reserved Javascript words. Only characters within
    the ranges [A-Z], [a-z], [0-9], or '.' are allowed. The first and last
    character may not be the '.' character. Consecutive '.' characters are not
    allowed. Numbers are not allowed as the first character or immediately after
    a period.
    
    Template currently only supports Field or Dataset.

  Examples:

    Initialize the PowerApps Component Framework for a ${chalk.grey('Field')} component, using
    ${chalk.grey('yourCustomFieldComponent')} as name and ${chalk.grey('yourNamespace')} as namespace
      ${commands_1.default.PCF_INIT} --namespace yourNamespace --name yourCustomFieldComponent --template Field

    Initialize the PowerApps Component Framework for a ${chalk.grey('Dataset')} component, using
    ${chalk.grey('yourCustomDatasetComponent')} as name and ${chalk.grey('yourNamespace')} as namespace
      ${commands_1.default.PCF_INIT} --namespace yourNamespace --name yourCustomDatasetComponent --template Dataset

  More information:

    Create and build a custom component
      https://docs.microsoft.com/en-us/powerapps/developer/component-framework/create-custom-controls-using-pcf
`);
    }
}
module.exports = new PaPcfInitCommand();
//# sourceMappingURL=pcf-init.js.map