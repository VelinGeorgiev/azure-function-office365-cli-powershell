"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const commands_1 = require("../../commands");
const Command_1 = require("../../../../Command");
const cds_project_mutator_1 = require("../../cds-project-mutator");
const vorpal = require('../../../../vorpal-init');
/*
 * Logic extracted from bolt.module.solution.dll
 * Version: 1.0.6
 * Class: bolt.module.solution.verbs.SolutionAddReferenceVerb
 */
class PaSolutionReferenceAddCommand extends Command_1.default {
    get name() {
        return commands_1.default.SOLUTION_REFERENCE_ADD;
    }
    get description() {
        return 'Adds a project reference to the solution in the current directory';
    }
    action() {
        const cmd = this;
        return function (args, cb) {
            args = cmd.processArgs(args);
            cmd.initAction(args, this);
            cmd.commandAction(this, args, cb);
        };
    }
    commandAction(cmd, args, cb) {
        try {
            const referencedProjectFilePath = this.getSupportedProjectFiles(args.options.path)[0];
            const relativeReferencedProjectFilePath = path.relative(process.cwd(), referencedProjectFilePath);
            const cdsProjectFilePath = this.getCdsProjectFile(process.cwd())[0];
            const cdsProjectFileContent = fs.readFileSync(cdsProjectFilePath, 'utf8');
            const cdsProjectMutator = new cds_project_mutator_1.default(cdsProjectFileContent);
            cdsProjectMutator.addProjectReference(relativeReferencedProjectFilePath);
            fs.writeFileSync(cdsProjectFilePath, cdsProjectMutator.cdsProjectDocument);
            cb();
        }
        catch (err) {
            cb(new Command_1.CommandError(err));
        }
    }
    options() {
        const options = [
            {
                option: '-p, --path <path>',
                description: 'The path to the referenced project'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            const existingCdsProjects = this.getCdsProjectFile(process.cwd());
            if (existingCdsProjects.length === 0) {
                return 'CDS solution project file with extension cdsproj was not found in the current directory.';
            }
            if (existingCdsProjects.length > 1) {
                return 'Multiple CDS solution project files with extension cdsproj were found in the current directory.';
            }
            if (!args.options.path) {
                return 'Missing required option path.';
            }
            if (!fs.existsSync(args.options.path)) {
                return `Path ${args.options.path} is not a valid path.`;
            }
            const existingSupportedProjects = this.getSupportedProjectFiles(args.options.path);
            if (existingSupportedProjects.length === 0) {
                return `No supported project type found in path ${args.options.path}.`;
            }
            if (existingSupportedProjects.length !== 1) {
                return `More than one supported project type found in path ${args.options.path}.`;
            }
            const cdsProjectName = path.parse(path.basename(existingCdsProjects[0])).name;
            const pcfProjectName = path.parse(path.basename(existingSupportedProjects[0])).name;
            if (cdsProjectName === pcfProjectName) {
                return `Not able to add reference to a project with same name as CDS project with name: ${pcfProjectName}.`;
            }
            return true;
        };
    }
    getCdsProjectFile(rootPath) {
        return fs.readdirSync(rootPath)
            .filter(fn => path.extname(fn).toLowerCase() === '.cdsproj')
            .map(entry => path.join(rootPath, entry));
    }
    getSupportedProjectFiles(rootPath) {
        return fs.readdirSync(rootPath).filter(fn => {
            const ext = path.extname(fn).toLowerCase();
            return ext === '.pcfproj' || ext === '.csproj';
        }).map(entry => path.join(rootPath, entry));
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.SOLUTION_REFERENCE_ADD).helpInformation());
        log(`  Remarks:

    This commands expects a CDS solution project in the current directory, and
    references a PowerApps component framework project.
    
    The CDS solution project and the PowerApps component framework project
    cannot have the same name.

  Examples:

    Adds a reference inside the CDS Solution project in the current directory
    to the PowerApps component framework project at ${chalk.grey('./projects/ExampleProject')}
      ${commands_1.default.SOLUTION_REFERENCE_ADD} --path ./projects/ExampleProject

  More information:

    Create and build a custom component
      https://docs.microsoft.com/en-us/powerapps/developer/component-framework/create-custom-controls-using-pcf
`);
    }
}
module.exports = new PaSolutionReferenceAddCommand();
//# sourceMappingURL=solution-reference-add.js.map