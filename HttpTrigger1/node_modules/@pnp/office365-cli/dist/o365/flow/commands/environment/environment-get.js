"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const AzmgmtCommand_1 = require("../../../base/AzmgmtCommand");
const vorpal = require('../../../../vorpal-init');
class FlowEnvironmentGetCommand extends AzmgmtCommand_1.default {
    get name() {
        return commands_1.default.FLOW_ENVIRONMENT_GET;
    }
    get description() {
        return 'Gets information about the specified Microsoft Flow environment';
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Retrieving information about Microsoft Flow environment ${args.options.name}...`);
        }
        const requestOptions = {
            url: `${this.resource}providers/Microsoft.ProcessSimple/environments/${encodeURIComponent(args.options.name)}?api-version=2016-11-01`,
            headers: {
                accept: 'application/json'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            cmd.log(res);
            cb();
        }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-n, --name <name>',
                description: 'The name of the environment to get information about'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.name) {
                return 'Required option name missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.FLOW_ENVIRONMENT_GET).helpInformation());
        log(`  Remarks:

    ${chalk.yellow('Attention:')} This command is based on an API that is currently
    in preview and is subject to change once the API reached general
    availability.
  
    If the environment with the name you specified doesn't exist, you will get
    the ${chalk.grey('Access to the environment \'xyz\' is denied.')} error.
   
  Examples:
  
    Get information about the Microsoft Flow environment named
    ${chalk.grey('Default-d87a7535-dd31-4437-bfe1-95340acd55c5')}
      ${this.getCommandName()} --name Default-d87a7535-dd31-4437-bfe1-95340acd55c5
`);
    }
}
module.exports = new FlowEnvironmentGetCommand();
//# sourceMappingURL=environment-get.js.map