"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../commands");
const AzmgmtItemsListCommand_1 = require("../../base/AzmgmtItemsListCommand");
const vorpal = require('../../../vorpal-init');
class FlowListCommand extends AzmgmtItemsListCommand_1.AzmgmtItemsListCommand {
    get name() {
        return commands_1.default.FLOW_LIST;
    }
    get description() {
        return 'Lists Microsoft Flows in the given environment';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.asAdmin = args.options.asAdmin === true;
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        const url = `${this.resource}providers/Microsoft.ProcessSimple${args.options.asAdmin ? '/scopes/admin' : ''}/environments/${encodeURIComponent(args.options.environment)}/flows?api-version=2016-11-01`;
        this
            .getAllItems(url, cmd, true)
            .then(() => {
            if (this.items.length > 0) {
                if (args.options.output === 'json') {
                    cmd.log(this.items);
                }
                else {
                    cmd.log(this.items.map(f => {
                        return {
                            name: f.name,
                            displayName: f.properties.displayName
                        };
                    }));
                }
            }
            else {
                if (this.verbose) {
                    cmd.log('No Flows found');
                }
            }
            cb();
        }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-e, --environment <environment>',
                description: 'The name of the environment for which to retrieve available Flows'
            },
            {
                option: '--asAdmin',
                description: 'Set, to list all Flows as admin. Otherwise will return only your own Flows'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.environment) {
                return 'Required option environment missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.FLOW_LIST).helpInformation());
        log(`  Remarks:

    ${chalk.yellow('Attention:')} This command is based on an API that is currently
    in preview and is subject to change once the API reached general
    availability.
  
    If the environment with the name you specified doesn't exist, you will get
    the ${chalk.grey('Access to the environment \'xyz\' is denied.')} error.

    By default, the ${chalk.blue(this.getCommandName())} command returns only your
    Flows. To list all Flows, use the ${chalk.blue('asAdmin')} option.
   
  Examples:
  
    List all your Flows in the given environment
      ${this.getCommandName()} --environment Default-d87a7535-dd31-4437-bfe1-95340acd55c5

    List all Flows in the given environment
      ${this.getCommandName()} --environment Default-d87a7535-dd31-4437-bfe1-95340acd55c5 --asAdmin
`);
    }
}
module.exports = new FlowListCommand();
//# sourceMappingURL=flow-list.js.map