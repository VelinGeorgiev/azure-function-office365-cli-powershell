"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../../commands");
const request_1 = require("../../../../request");
const AzmgmtCommand_1 = require("../../../base/AzmgmtCommand");
const os = require("os");
const vorpal = require('../../../../vorpal-init');
class FlowRunListCommand extends AzmgmtCommand_1.default {
    get name() {
        return commands_1.default.FLOW_RUN_LIST;
    }
    get description() {
        return 'Lists runs of the specified Microsoft Flow';
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Retrieving list of runs for Microsoft Flow ${args.options.flow}...`);
        }
        const requestOptions = {
            url: `${this.resource}providers/Microsoft.ProcessSimple/environments/${encodeURIComponent(args.options.environment)}/flows/${encodeURIComponent(args.options.flow)}/runs?api-version=2016-11-01`,
            headers: {
                accept: 'application/json'
            },
            json: true
        };
        request_1.default
            .get(requestOptions)
            .then((res) => {
            if (res.value && res.value.length > 0) {
                if (args.options.output === 'json') {
                    cmd.log(res.value);
                }
                else {
                    cmd.log(res.value.map(e => {
                        return {
                            name: e.name,
                            startTime: e.properties.startTime,
                            status: e.properties.status
                        };
                    }));
                }
            }
            else {
                if (this.verbose) {
                    cmd.log('No runs found');
                }
            }
            cb();
        }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
    }
    options() {
        const options = [
            {
                option: '-f, --flow <flow>',
                description: 'The name of the Microsoft Flow to retrieve the runs for'
            },
            {
                option: '-e, --environment <environment>',
                description: 'The name of the environment to which the flow belongs'
            }
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.flow) {
                return 'Required option name missing';
            }
            if (!args.options.environment) {
                return 'Required option environment missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.FLOW_RUN_LIST).helpInformation());
        log(`  Remarks:

    ${chalk.yellow('Attention:')} This command is based on an API that is currently
    in preview and is subject to change once the API reached general
    availability.
      
    If the environment with the name you specified doesn't exist, you will get
    the ${chalk.grey('Access to the environment \'xyz\' is denied.')} error.

    If the Microsoft Flow with the name you specified doesn't exist, you will
    get the ${chalk.grey(`The caller with object id \'abc\' does not have permission${os.EOL}` +
            '    for connection \'xyz\' under Api \'shared_logicflows\'.')} error.
   
  Examples:
  
    List runs of the specified Microsoft Flow
      ${this.getCommandName()} --environment Default-d87a7535-dd31-4437-bfe1-95340acd55c5 --flow 5923cb07-ce1a-4a5c-ab81-257ce820109a
`);
    }
}
module.exports = new FlowRunListCommand();
//# sourceMappingURL=run-list.js.map