"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("../commands");
const request_1 = require("../../../request");
const AzmgmtCommand_1 = require("../../base/AzmgmtCommand");
const Utils_1 = require("../../../Utils");
const vorpal = require('../../../vorpal-init');
class FlowRemoveCommand extends AzmgmtCommand_1.default {
    get name() {
        return commands_1.default.FLOW_REMOVE;
    }
    get description() {
        return 'Removes the specified Microsoft Flow';
    }
    getTelemetryProperties(args) {
        const telemetryProps = super.getTelemetryProperties(args);
        telemetryProps.asAdmin = typeof args.options.asAdmin !== 'undefined';
        telemetryProps.confirm = typeof args.options.confirm !== 'undefined';
        return telemetryProps;
    }
    commandAction(cmd, args, cb) {
        if (this.verbose) {
            cmd.log(`Removing Microsoft Flow ${args.options.name}...`);
        }
        const removeFlow = () => {
            const requestOptions = {
                url: `${this.resource}providers/Microsoft.ProcessSimple/${args.options.asAdmin ? 'scopes/admin/' : ''}environments/${encodeURIComponent(args.options.environment)}/flows/${encodeURIComponent(args.options.name)}?api-version=2016-11-01`,
                resolveWithFullResponse: true,
                headers: {
                    accept: 'application/json'
                },
                json: true
            };
            request_1.default
                .delete(requestOptions)
                .then((rawRes) => {
                // handle 204 and throw error message to cmd when invalid flow id is passed
                // https://github.com/pnp/office365-cli/issues/1063#issuecomment-537218957
                if (rawRes.statusCode === 204) {
                    cmd.log(vorpal.chalk.red(`Error: Resource '${args.options.name}' does not exist in environment '${args.options.environment}'`));
                    cb();
                }
                else {
                    if (this.verbose) {
                        cmd.log(vorpal.chalk.green('DONE'));
                    }
                    cb();
                }
            }, (rawRes) => this.handleRejectedODataJsonPromise(rawRes, cmd, cb));
        };
        if (args.options.confirm) {
            removeFlow();
        }
        else {
            cmd.prompt({
                type: 'confirm',
                name: 'continue',
                default: false,
                message: `Are you sure you want to remove the Microsoft Flow ${args.options.name}?`
            }, (result) => {
                if (!result.continue) {
                    cb();
                }
                else {
                    removeFlow();
                }
            });
        }
    }
    options() {
        const options = [
            {
                option: '-n, --name <name>',
                description: 'The name of the Microsoft Flow to remove'
            },
            {
                option: '-e, --environment <environment>',
                description: 'The name of the environment to which the Flow belongs'
            },
            {
                option: '--asAdmin',
                description: 'Set, to remove the Flow as admin'
            },
            {
                option: '--confirm',
                description: 'Don\'t prompt for confirmation'
            },
        ];
        const parentOptions = super.options();
        return options.concat(parentOptions);
    }
    validate() {
        return (args) => {
            if (!args.options.name) {
                return 'Required option name missing';
            }
            if (!Utils_1.default.isValidGuid(args.options.name)) {
                return `${args.options.name} is not a valid GUID`;
            }
            if (!args.options.environment) {
                return 'Required option environment missing';
            }
            return true;
        };
    }
    commandHelp(args, log) {
        const chalk = vorpal.chalk;
        log(vorpal.find(commands_1.default.FLOW_REMOVE).helpInformation());
        log(`  Remarks:
  
    By default, the command will try to remove a Microsoft Flow you own.
    If you want to remove a Microsoft Flow owned by another user, use the 
    ${chalk.blue('asAdmin')} flag.

    If the environment with the name you specified doesn't exist, you will get
    the ${chalk.grey('Access to the environment \'xyz\' is denied.')} error.

    If the Microsoft Flow with the name you specified doesn't exist, you will
    get the ${chalk.grey(`Error: Resource \'abc\' does not exist in environment \'xyz\'`)}
    error.
   
  Examples:
  
    Removes the specified Microsoft Flow owned by the currently signed-in user
      ${this.getCommandName()} --environment Default-d87a7535-dd31-4437-bfe1-95340acd55c5 --name 3989cb59-ce1a-4a5c-bb78-257c5c39381d

    Removes the specified Microsoft Flow owned by the currently signed-in user
    without confirmation
      ${this.getCommandName()} --environment Default-d87a7535-dd31-4437-bfe1-95340acd55c5 --name 3989cb59-ce1a-4a5c-bb78-257c5c39381d --confirm

    Removes the specified Microsoft Flow owned by another user
      ${this.getCommandName()} --environment Default-d87a7535-dd31-4437-bfe1-95340acd55c5 --name 3989cb59-ce1a-4a5c-bb78-257c5c39381d --asAdmin

    Removes the specified Microsoft Flow owned by another user without
    confirmation
      ${this.getCommandName()} --environment Default-d87a7535-dd31-4437-bfe1-95340acd55c5 --name 3989cb59-ce1a-4a5c-bb78-257c5c39381d --asAdmin --confirm
`);
    }
}
module.exports = new FlowRemoveCommand();
//# sourceMappingURL=flow-remove.js.map