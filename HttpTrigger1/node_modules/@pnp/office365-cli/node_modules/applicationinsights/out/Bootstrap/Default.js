"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var StatusLogger = require("./StatusLogger");
// Private configuration vars
var _appInsights;
var _logger = console;
var _prefix = "ad_"; // App Services, Default
// Env var local constants
var ENV_extensionVersion = "APPLICATIONINSIGHTS_EXTENSION_VERSION";
var _setupString = process.env.APPLICATIONINSIGHTS_CONNECTION_STRING || process.env.APPINSIGHTS_INSTRUMENTATION_KEY;
var _extensionEnabled = process.env[ENV_extensionVersion] && process.env[ENV_extensionVersion] !== "disabled";
// Other local constants
var defaultStatus = __assign({}, StatusLogger.DEFAULT_STATUS, { Ikey: _setupString });
function sdkAlreadyExists() {
    try {
        // appInstance should either resolve to user SDK or crash. If it resolves to attach SDK, user probably modified their NODE_PATH
        var appInstance = require.resolve("applicationinsights"); // assumes that the cwd is near user's package.json
        var attachInstance = require.resolve("../applicationinsights");
        if (appInstance !== attachInstance) {
            _logger.log("applicationinsights module is already installed in this application; not re-attaching. Installed SDK location:", appInstance);
            return true;
        }
        // User probably modified their NODE_PATH to resolve to this instance. Attach appinsights
        return false;
    }
    catch (e) {
        // crashed while trying to resolve "applicationinsights", so SDK does not exist. Attach appinsights
        return false;
    }
}
/**
 * Sets the attach-time logger
 * @param logger logger which implements the `AgentLogger` interface
 */
function setLogger(logger) {
    return _logger = logger;
}
exports.setLogger = setLogger;
/**
 * Sets the string which is prefixed to the exsting sdkVersion, e.g. `ad_`, `alr_`
 * @param prefix string prefix, including underscore. Defaults to `ad_`
 */
function setUsagePrefix(prefix) {
    _prefix = prefix;
}
exports.setUsagePrefix = setUsagePrefix;
/**
 * Try to setup and start this app insights instance if attach is enabled.
 * @param setupString connection string or instrumentation key
 */
function setupAndStart(setupString) {
    if (setupString === void 0) { setupString = _setupString; }
    StatusLogger.addCloseHandler();
    if (!_extensionEnabled) {
        StatusLogger.writeFile(__assign({}, defaultStatus, { AgentInitializedSuccessfully: false, Reason: "Extension is not enabled. env." + ENV_extensionVersion + "=" + process.env[ENV_extensionVersion] }));
        return null;
    }
    // If app already contains SDK, skip agent attach
    if (sdkAlreadyExists()) {
        StatusLogger.writeFile(__assign({}, defaultStatus, { AgentInitializedSuccessfully: false, SDKPresent: true, Reason: "SDK already exists. Instrumenting using Application Insights SDK" }));
        return null;
    }
    if (!setupString) {
        var message = "Application Insights wanted to be started, but no Connection String or Instrumentation Key was provided";
        _logger.error(message, setupString);
        StatusLogger.writeFile(__assign({}, defaultStatus, { AgentInitializedSuccessfully: false, Reason: message }));
        return null;
    }
    try {
        _appInsights = require("../applicationinsights");
        var prefixInternalSdkVersion = function (envelope, _contextObjects) {
            try {
                var appInsightsSDKVersion = _appInsights.defaultClient.context.keys.internalSdkVersion;
                envelope.tags[appInsightsSDKVersion] = _prefix + envelope.tags[appInsightsSDKVersion];
            }
            catch (e) {
                _logger.error("Error prefixing SDK version", e);
            }
            return true;
        };
        // Instrument the SDK
        _appInsights.setup(setupString).setSendLiveMetrics(true);
        _appInsights.defaultClient.addTelemetryProcessor(prefixInternalSdkVersion);
        _appInsights.start();
        // Agent successfully instrumented the SDK
        _logger.log("Application Insights was started with setupString", setupString, _extensionEnabled);
        StatusLogger.writeFile(__assign({}, defaultStatus, { AgentInitializedSuccessfully: true }));
    }
    catch (e) {
        _logger.error("Error setting up Application Insights", e);
        StatusLogger.writeFile(__assign({}, defaultStatus, { AgentInitializedSuccessfully: false, Reason: "Error setting up Application Insights: " + (e && e.message) }));
    }
    return _appInsights;
}
exports.setupAndStart = setupAndStart;
//# sourceMappingURL=Default.js.map