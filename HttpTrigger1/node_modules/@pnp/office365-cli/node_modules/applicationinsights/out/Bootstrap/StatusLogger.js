"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var os = require("os");
var path = require("path");
var fs = require("fs");
var _APP_TYPE = "node.js";
var _HOME_DIR = os.homedir ? os.homedir() : (process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME']);
var _FILE_PATH = _HOME_DIR + "/LogFiles/ApplicationInsights/status/";
var _FILE_NAME = "status_" + os.hostname() + "_" + process.pid + ".json";
exports.FULL_PATH = _FILE_PATH + _FILE_NAME;
function readPackageVersion() {
    var packageJsonPath = path.resolve(__dirname, "../package.json");
    try {
        var packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf8"));
        if (packageJson && typeof packageJson.version === "string") {
            return packageJson.version;
        }
    }
    catch (e) { }
    return "unknown";
}
/**
 * Zero dependencies: recursive mkdir
 */
function mkDirByPathSync(targetDir, _a) {
    var _b = (_a === void 0 ? {} : _a).isRelativeToScript, isRelativeToScript = _b === void 0 ? false : _b;
    var sep = path.sep;
    var initDir = path.isAbsolute(targetDir) ? sep : '';
    var baseDir = isRelativeToScript ? __dirname : '.';
    return targetDir.split(sep).reduce(function (parentDir, childDir) {
        var curDir = path.resolve(baseDir, parentDir, childDir);
        try {
            fs.mkdirSync(curDir);
        }
        catch (err) {
            if (err.code === 'EEXIST') {
                return curDir;
            }
            // To avoid `EISDIR` error on Mac and `EACCES`-->`ENOENT` and `EPERM` on Windows.
            if (err.code === 'ENOENT') {
                throw new Error("EACCES: permission denied, mkdir '" + parentDir + "'");
            }
            var caughtErr = ['EACCES', 'EPERM', 'EISDIR'].indexOf(err.code) > -1;
            if (!caughtErr || caughtErr && curDir === path.resolve(targetDir)) {
                throw err; // Throw if it's just the last created dir.
            }
        }
        return curDir;
    }, initDir);
}
function isNodeVersionCompatible() {
    var majVer = process.versions.node.split(".")[0];
    return parseInt(majVer) >= 1;
}
exports.isNodeVersionCompatible = isNodeVersionCompatible;
exports.DEFAULT_STATUS = {
    AgentInitializedSuccessfully: false,
    SDKPresent: false,
    Ikey: null,
    AppType: _APP_TYPE,
    SdkVersion: readPackageVersion(),
    MachineName: os.hostname(),
    PID: String(process.pid)
};
function makeStatusDirs(path) {
    if (path === void 0) { path = _FILE_PATH; }
    return mkDirByPathSync(path);
}
exports.makeStatusDirs = makeStatusDirs;
function writeFile(data, cb) {
    fs.open(exports.FULL_PATH, "w", function (err, fid) {
        if (err)
            return;
        console.log(exports.FULL_PATH);
        fs.writeFile(exports.FULL_PATH, JSON.stringify(data, null, 2), { encoding: "utf8" }, function (err) {
            if (err) {
                console.error("Error writing Application Insights status file", err);
            }
            else if (cb && typeof cb === "function") {
                cb(err);
            }
        });
    });
}
exports.writeFile = writeFile;
function addCloseHandler() {
    process.on("exit", function () {
        try {
            fs.unlinkSync(exports.FULL_PATH);
        }
        catch (err) { }
    });
}
exports.addCloseHandler = addCloseHandler;
//# sourceMappingURL=StatusLogger.js.map