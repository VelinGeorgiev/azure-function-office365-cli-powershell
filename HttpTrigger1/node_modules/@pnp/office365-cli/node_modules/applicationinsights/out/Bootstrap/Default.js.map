{"version":3,"file":"Default.js","sourceRoot":"","sources":["../../Bootstrap/Default.ts"],"names":[],"mappings":"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","sourcesContent":["import * as types from \"../applicationinsights\";\r\nimport * as StatusLogger from \"./StatusLogger\";\r\n\r\n// Private configuration vars\r\nlet _appInsights: typeof types | null;\r\nlet _logger: AgentLogger = console;\r\nlet _prefix = \"ad_\"; // App Services, Default\r\n\r\n// Env var local constants\r\nconst ENV_extensionVersion = \"APPLICATIONINSIGHTS_EXTENSION_VERSION\";\r\nconst _setupString = process.env.APPLICATIONINSIGHTS_CONNECTION_STRING || process.env.APPINSIGHTS_INSTRUMENTATION_KEY;\r\nconst _extensionEnabled = process.env[ENV_extensionVersion] && process.env[ENV_extensionVersion] !== \"disabled\";\r\n\r\n// Other local constants\r\nconst defaultStatus: StatusLogger.StatusContract = {\r\n    ...StatusLogger.DEFAULT_STATUS,\r\n    Ikey: _setupString,\r\n};\r\n\r\nexport interface AgentLogger {\r\n    log(message?: any, ...optional: any[]): void;\r\n    error(message?: any, ...optional: any[]): void;\r\n}\r\n\r\nfunction sdkAlreadyExists(): boolean {\r\n    try {\r\n        // appInstance should either resolve to user SDK or crash. If it resolves to attach SDK, user probably modified their NODE_PATH\r\n        const appInstance = require.resolve(\"applicationinsights\"); // assumes that the cwd is near user's package.json\r\n        const attachInstance = require.resolve(\"../applicationinsights\");\r\n        if (appInstance !== attachInstance) {\r\n            _logger.log(\r\n                \"applicationinsights module is already installed in this application; not re-attaching. Installed SDK location:\",\r\n                appInstance\r\n            );\r\n            return true;\r\n        }\r\n        // User probably modified their NODE_PATH to resolve to this instance. Attach appinsights\r\n        return false;\r\n    } catch (e) {\r\n        // crashed while trying to resolve \"applicationinsights\", so SDK does not exist. Attach appinsights\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the attach-time logger\r\n * @param logger logger which implements the `AgentLogger` interface\r\n */\r\nexport function setLogger(logger: AgentLogger) {\r\n    return _logger = logger;\r\n}\r\n\r\n/**\r\n * Sets the string which is prefixed to the exsting sdkVersion, e.g. `ad_`, `alr_`\r\n * @param prefix string prefix, including underscore. Defaults to `ad_`\r\n */\r\nexport function setUsagePrefix(prefix: string) {\r\n    _prefix = prefix;\r\n}\r\n\r\n/**\r\n * Try to setup and start this app insights instance if attach is enabled.\r\n * @param setupString connection string or instrumentation key\r\n */\r\nexport function setupAndStart(setupString = _setupString): typeof types | null {\r\n    StatusLogger.addCloseHandler();\r\n\r\n    if (!_extensionEnabled) {\r\n        StatusLogger.writeFile({\r\n            ...defaultStatus,\r\n            AgentInitializedSuccessfully: false,\r\n            Reason: `Extension is not enabled. env.${ENV_extensionVersion}=${process.env[ENV_extensionVersion]}`\r\n        });\r\n        return null;\r\n    }\r\n\r\n    // If app already contains SDK, skip agent attach\r\n    if (sdkAlreadyExists()) {\r\n        StatusLogger.writeFile({\r\n            ...defaultStatus,\r\n            AgentInitializedSuccessfully: false,\r\n            SDKPresent: true,\r\n            Reason: \"SDK already exists. Instrumenting using Application Insights SDK\"\r\n        })\r\n        return null;\r\n    }\r\n\r\n    if (!setupString) {\r\n        const message = \"Application Insights wanted to be started, but no Connection String or Instrumentation Key was provided\";\r\n        _logger.error(message, setupString);\r\n        StatusLogger.writeFile({\r\n            ...defaultStatus,\r\n            AgentInitializedSuccessfully: false,\r\n            Reason: message,\r\n        });\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        _appInsights = require(\"../applicationinsights\");\r\n        const prefixInternalSdkVersion = function (envelope: types.Contracts.Envelope, _contextObjects: Object) {\r\n            try {\r\n                var appInsightsSDKVersion = _appInsights.defaultClient.context.keys.internalSdkVersion;\r\n                envelope.tags[appInsightsSDKVersion] = _prefix + envelope.tags[appInsightsSDKVersion];\r\n            } catch (e) {\r\n                _logger.error(\"Error prefixing SDK version\", e);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        // Instrument the SDK\r\n        _appInsights.setup(setupString).setSendLiveMetrics(true);\r\n        _appInsights.defaultClient.addTelemetryProcessor(prefixInternalSdkVersion);\r\n        _appInsights.start();\r\n\r\n        // Agent successfully instrumented the SDK\r\n        _logger.log(\"Application Insights was started with setupString\", setupString, _extensionEnabled);\r\n        StatusLogger.writeFile({\r\n            ...defaultStatus,\r\n            AgentInitializedSuccessfully: true\r\n        });\r\n    } catch (e) {\r\n        _logger.error(\"Error setting up Application Insights\", e);\r\n        StatusLogger.writeFile({\r\n            ...defaultStatus,\r\n            AgentInitializedSuccessfully: false,\r\n            Reason: `Error setting up Application Insights: ${e && e.message}`\r\n        })\r\n    }\r\n    return _appInsights;\r\n}\r\n"]}